
adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008290  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008430  08008430  00018430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800885c  0800885c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800885c  0800885c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800885c  0800885c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000204  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003e0  200003e0  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bdb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002735  00000000  00000000  00030de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00033520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f10  00000000  00000000  00034568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022930  00000000  00000000  00035478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b02  00000000  00000000  00057da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d57  00000000  00000000  0006b8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f601  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000566c  00000000  00000000  0013f654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008418 	.word	0x08008418

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008418 	.word	0x08008418

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 fcf7 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f88b 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 fa39 	bl	800103c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bca:	f000 fa19 	bl	8001000 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bce:	f000 f8eb 	bl	8000da8 <MX_ADC1_Init>
  MX_USART2_Init();
 8000bd2:	f000 f9e9 	bl	8000fa8 <MX_USART2_Init>
  MX_DAC1_Init();
 8000bd6:	f000 f963 	bl	8000ea0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000bda:	f000 f997 	bl	8000f0c <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  float y = 0;
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
	  HAL_TIM_Base_Start(&htim2);
 8000be4:	4834      	ldr	r0, [pc, #208]	; (8000cb8 <main+0x100>)
 8000be6:	f003 ff3f 	bl	8004a68 <HAL_TIM_Base_Start>
	  __HAL_TIM_SET_COUNTER(&htim2,0);
 8000bea:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <main+0x100>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
//	  float millis_start = HAL_GetTick();
	  for(uint16_t i = 0; i < order; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	807b      	strh	r3, [r7, #2]
 8000bf6:	e023      	b.n	8000c40 <main+0x88>
		  y = y + x[i]*h[order-i-1];
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <main+0x104>)
 8000bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c00:	ee07 3a90 	vmov	s15, r3
 8000c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	f1c3 0304 	rsb	r3, r3, #4
 8000c0e:	4a2c      	ldr	r2, [pc, #176]	; (8000cc0 <main+0x108>)
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	edd3 7a00 	vldr	s15, [r3]
 8000c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c24:	edc7 7a01 	vstr	s15, [r7, #4]
		  x[i] = x[i+1];
 8000c28:	887b      	ldrh	r3, [r7, #2]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	4923      	ldr	r1, [pc, #140]	; (8000cbc <main+0x104>)
 8000c30:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <main+0x104>)
 8000c36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(uint16_t i = 0; i < order; i++) {
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	807b      	strh	r3, [r7, #2]
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d9d8      	bls.n	8000bf8 <main+0x40>
	  }
	  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_result_dma, adc_channel_count); //set adc
 8000c46:	2302      	movs	r3, #2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	491e      	ldr	r1, [pc, #120]	; (8000cc4 <main+0x10c>)
 8000c4c:	481e      	ldr	r0, [pc, #120]	; (8000cc8 <main+0x110>)
 8000c4e:	f000 ff23 	bl	8001a98 <HAL_ADC_Start_DMA>
	  while(adc_conversion_complete == 0) {
 8000c52:	bf00      	nop
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <main+0x114>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0fb      	beq.n	8000c54 <main+0x9c>

	  }
	  adc_conversion_complete = 0;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <main+0x114>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]

	  x[order] = adc_result_dma[0];
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <main+0x10c>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <main+0x104>)
 8000c6a:	815a      	strh	r2, [r3, #10]

//	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)y);
//	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (int)y);


	  while(__HAL_TIM_GET_COUNTER(&htim2) < 1){
 8000c6c:	bf00      	nop
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <main+0x100>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0fa      	beq.n	8000c6e <main+0xb6>
	  	  	}

//	  float millis_end = HAL_GetTick();
	  snprintf(tx_buff, buff_len, "CH1: %d   CH2: %d   t: %d\r\n", adc_result_dma[0], adc_result_dma[1], __HAL_TIM_GET_COUNTER(&htim2));
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <main+0x10c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <main+0x10c>)
 8000c82:	885b      	ldrh	r3, [r3, #2]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <main+0x100>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	9200      	str	r2, [sp, #0]
 8000c92:	460b      	mov	r3, r1
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <main+0x118>)
 8000c96:	2164      	movs	r1, #100	; 0x64
 8000c98:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <main+0x11c>)
 8000c9a:	f005 f92f 	bl	8005efc <sniprintf>
	  HAL_USART_Transmit(&husart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <main+0x11c>)
 8000ca0:	f7ff fa9e 	bl	80001e0 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cac:	4909      	ldr	r1, [pc, #36]	; (8000cd4 <main+0x11c>)
 8000cae:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <main+0x120>)
 8000cb0:	f004 fa1a 	bl	80050e8 <HAL_USART_Transmit>
  {
 8000cb4:	e793      	b.n	8000bde <main+0x26>
 8000cb6:	bf00      	nop
 8000cb8:	200002a0 	.word	0x200002a0
 8000cbc:	200003a8 	.word	0x200003a8
 8000cc0:	200003b4 	.word	0x200003b4
 8000cc4:	2000033c 	.word	0x2000033c
 8000cc8:	200001f8 	.word	0x200001f8
 8000ccc:	20000340 	.word	0x20000340
 8000cd0:	08008430 	.word	0x08008430
 8000cd4:	20000344 	.word	0x20000344
 8000cd8:	200002ec 	.word	0x200002ec

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0a6      	sub	sp, #152	; 0x98
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ce6:	2228      	movs	r2, #40	; 0x28
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 fc94 	bl	8005618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2258      	movs	r2, #88	; 0x58
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f004 fc86 	bl	8005618 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d14:	2310      	movs	r3, #16
 8000d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d28:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 f994 	bl	8003068 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d46:	f000 f9ad 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d64:	2102      	movs	r1, #2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 f9d2 	bl	8004110 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d72:	f000 f997 	bl	80010a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <SystemClock_Config+0xc8>)
 8000d78:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fbf6 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d96:	f000 f985 	bl	80010a4 <Error_Handler>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3798      	adds	r7, #152	; 0x98
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	00100082 	.word	0x00100082

08000da8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dca:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000dcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dd2:	4b32      	ldr	r3, [pc, #200]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd8:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dea:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e06:	2202      	movs	r2, #2
 8000e08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e24:	481d      	ldr	r0, [pc, #116]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e26:	f000 fc3d 	bl	80016a4 <HAL_ADC_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e30:	f000 f938 	bl	80010a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4817      	ldr	r0, [pc, #92]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e40:	f001 fa32 	bl	80022a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e4a:	f000 f92b 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e6c:	f000 ff30 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e76:	f000 f915 	bl	80010a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <MX_ADC1_Init+0xf4>)
 8000e84:	f000 ff24 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000e8e:	f000 f909 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200001f8 	.word	0x200001f8

08000ea0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_DAC1_Init+0x64>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_DAC1_Init+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_DAC1_Init+0x64>)
 8000eb8:	f001 fd29 	bl	800290e <HAL_DAC_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000ec2:	f000 f8ef 	bl	80010a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <MX_DAC1_Init+0x64>)
 8000ed6:	f001 fd3c 	bl	8002952 <HAL_DAC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000ee0:	f000 f8e0 	bl	80010a4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_DAC1_Init+0x64>)
 8000eec:	f001 fd31 	bl	8002952 <HAL_DAC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_DAC1_Init+0x5a>
  {
    Error_Handler();
 8000ef6:	f000 f8d5 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000028c 	.word	0x2000028c
 8000f08:	40007400 	.word	0x40007400

08000f0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_TIM2_Init+0x98>)
 8000f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1499;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_TIM2_Init+0x98>)
 8000f34:	f240 52db 	movw	r2, #1499	; 0x5db
 8000f38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_TIM2_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_TIM2_Init+0x98>)
 8000f42:	f04f 32ff 	mov.w	r2, #4294967295
 8000f46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_TIM2_Init+0x98>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_TIM2_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f54:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <MX_TIM2_Init+0x98>)
 8000f56:	f003 fd2f 	bl	80049b8 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000f60:	f000 f8a0 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_TIM2_Init+0x98>)
 8000f72:	f003 fde1 	bl	8004b38 <HAL_TIM_ConfigClockSource>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f7c:	f000 f892 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_TIM2_Init+0x98>)
 8000f8e:	f003 ffd5 	bl	8004f3c <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000f98:	f000 f884 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200002a0 	.word	0x200002a0

08000fa8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <MX_USART2_Init+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 38400;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fb4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000fb8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_USART2_Init+0x50>)
 8000fe6:	f004 f835 	bl	8005054 <HAL_USART_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000ff0:	f000 f858 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200002ec 	.word	0x200002ec
 8000ffc:	40004400 	.word	0x40004400

08001000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_DMA_Init+0x38>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <MX_DMA_Init+0x38>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_DMA_Init+0x38>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	200b      	movs	r0, #11
 8001024:	f001 fc3d 	bl	80028a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001028:	200b      	movs	r0, #11
 800102a:	f001 fc56 	bl	80028da <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_GPIO_Init+0x44>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <MX_GPIO_Init+0x44>)
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_GPIO_Init+0x44>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_GPIO_Init+0x44>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <MX_GPIO_Init+0x44>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_GPIO_Init+0x44>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	adc_conversion_complete = 1;
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <HAL_ADC_ConvCpltCallback+0x1c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000340 	.word	0x20000340

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	e7fe      	b.n	80010ac <Error_Handler+0x8>
	...

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x44>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_MspInit+0x44>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6193      	str	r3, [r2, #24]
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_MspInit+0x44>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x44>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x44>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x44>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001118:	d14c      	bne.n	80011b4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_ADC_MspInit+0xc4>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4a27      	ldr	r2, [pc, #156]	; (80011bc <HAL_ADC_MspInit+0xc4>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	6153      	str	r3, [r2, #20]
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_ADC_MspInit+0xc4>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_ADC_MspInit+0xc4>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a21      	ldr	r2, [pc, #132]	; (80011bc <HAL_ADC_MspInit+0xc4>)
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_ADC_MspInit+0xc4>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800114a:	2303      	movs	r3, #3
 800114c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f001 fdf8 	bl	8002d54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <HAL_ADC_MspInit+0xcc>)
 8001168:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 800117e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001182:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 8001186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 800119a:	f001 fc27 	bl	80029ec <HAL_DMA_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80011a4:	f7ff ff7e 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_ADC_MspInit+0xc8>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	20000248 	.word	0x20000248
 80011c4:	40020008 	.word	0x40020008

080011c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a15      	ldr	r2, [pc, #84]	; (800123c <HAL_DAC_MspInit+0x74>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d124      	bne.n	8001234 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_DAC_MspInit+0x78>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_DAC_MspInit+0x78>)
 80011f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_DAC_MspInit+0x78>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_DAC_MspInit+0x78>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_DAC_MspInit+0x78>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	6153      	str	r3, [r2, #20]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_DAC_MspInit+0x78>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800121a:	2330      	movs	r3, #48	; 0x30
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f001 fd90 	bl	8002d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40007400 	.word	0x40007400
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001254:	d10b      	bne.n	800126e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_TIM_Base_MspInit+0x38>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_TIM_Base_MspInit+0x38>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_TIM_Base_MspInit+0x38>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a26      	ldr	r2, [pc, #152]	; (8001338 <HAL_USART_MspInit+0xb8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d145      	bne.n	800132e <HAL_USART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_USART_MspInit+0xbc>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a25      	ldr	r2, [pc, #148]	; (800133c <HAL_USART_MspInit+0xbc>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <HAL_USART_MspInit+0xbc>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_USART_MspInit+0xbc>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a1f      	ldr	r2, [pc, #124]	; (800133c <HAL_USART_MspInit+0xbc>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	6153      	str	r3, [r2, #20]
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_USART_MspInit+0xbc>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <HAL_USART_MspInit+0xbc>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a19      	ldr	r2, [pc, #100]	; (800133c <HAL_USART_MspInit+0xbc>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_USART_MspInit+0xbc>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA14     ------> USART2_TX
    PB5     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_14;
 80012ea:	f244 0308 	movw	r3, #16392	; 0x4008
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fc:	2307      	movs	r3, #7
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f001 fd23 	bl	8002d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800130e:	2320      	movs	r3, #32
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131e:	2307      	movs	r3, #7
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_USART_MspInit+0xc0>)
 800132a:	f001 fd13 	bl	8002d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	; 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40004400 	.word	0x40004400
 800133c:	40021000 	.word	0x40021000
 8001340:	48000400 	.word	0x48000400

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 f954 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <DMA1_Channel1_IRQHandler+0x10>)
 800139e:	f001 fbcb 	bl	8002b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000248 	.word	0x20000248

080013ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
	return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_kill>:

int _kill(int pid, int sig)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013c6:	f004 f8fd 	bl	80055c4 <__errno>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2216      	movs	r2, #22
 80013ce:	601a      	str	r2, [r3, #0]
	return -1;
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_exit>:

void _exit (int status)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffe7 	bl	80013bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80013ee:	e7fe      	b.n	80013ee <_exit+0x12>

080013f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e00a      	b.n	8001418 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001402:	f3af 8000 	nop.w
 8001406:	4601      	mov	r1, r0
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf0      	blt.n	8001402 <_read+0x12>
	}

return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e009      	b.n	8001450 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	dbf1      	blt.n	800143c <_write+0x12>
	}
	return len;
 8001458:	687b      	ldr	r3, [r7, #4]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_close>:

int _close(int file)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	return -1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148a:	605a      	str	r2, [r3, #4]
	return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_isatty>:

int _isatty(int file)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	return 1;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
	return 0;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f004 f862 	bl	80055c4 <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20010000 	.word	0x20010000
 800152c:	00000400 	.word	0x00000400
 8001530:	200003c8 	.word	0x200003c8
 8001534:	200003e0 	.word	0x200003e0

08001538 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001594 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <LoopForever+0x6>)
  ldr r1, =_edata
 8001562:	490e      	ldr	r1, [pc, #56]	; (800159c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <LoopForever+0xe>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001578:	4c0b      	ldr	r4, [pc, #44]	; (80015a8 <LoopForever+0x16>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001586:	f7ff ffd7 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158a:	f004 f821 	bl	80055d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800158e:	f7ff fb13 	bl	8000bb8 <main>

08001592 <LoopForever>:

LoopForever:
    b LoopForever
 8001592:	e7fe      	b.n	8001592 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001594:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015a0:	08008864 	.word	0x08008864
  ldr r2, =_sbss
 80015a4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80015a8:	200003e0 	.word	0x200003e0

080015ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_2_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_Init+0x28>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_Init+0x28>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f001 f963 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fd70 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 f97b 	bl	80028f6 <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f001 f943 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000000 	.word	0x20000000
 8001634:	20000008 	.word	0x20000008
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008
 8001660:	200003cc 	.word	0x200003cc

08001664 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;  
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	200003cc 	.word	0x200003cc

0800167c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b09a      	sub	sp, #104	; 0x68
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e1e3      	b.n	8001a8c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d176      	bne.n	80017c4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d152      	bne.n	8001784 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fcfd 	bl	80010f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d13b      	bne.n	8001784 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 ff87 	bl	8002620 <ADC_Disable>
 8001712:	4603      	mov	r3, r0
 8001714:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b00      	cmp	r3, #0
 8001722:	d12f      	bne.n	8001784 <HAL_ADC_Init+0xe0>
 8001724:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001728:	2b00      	cmp	r3, #0
 800172a:	d12b      	bne.n	8001784 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001734:	f023 0302 	bic.w	r3, r3, #2
 8001738:	f043 0202 	orr.w	r2, r3, #2
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800174e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800175e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001760:	4b92      	ldr	r3, [pc, #584]	; (80019ac <HAL_ADC_Init+0x308>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a92      	ldr	r2, [pc, #584]	; (80019b0 <HAL_ADC_Init+0x30c>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0c9a      	lsrs	r2, r3, #18
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001776:	e002      	b.n	800177e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	3b01      	subs	r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f9      	bne.n	8001778 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800179c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017a0:	d110      	bne.n	80017c4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f023 0312 	bic.w	r3, r3, #18
 80017aa:	f043 0210 	orr.w	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f043 0201 	orr.w	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f040 8150 	bne.w	8001a72 <HAL_ADC_Init+0x3ce>
 80017d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 814b 	bne.w	8001a72 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 8143 	bne.w	8001a72 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017f4:	f043 0202 	orr.w	r2, r3, #2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001804:	d004      	beq.n	8001810 <HAL_ADC_Init+0x16c>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6a      	ldr	r2, [pc, #424]	; (80019b4 <HAL_ADC_Init+0x310>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_ADC_Init+0x170>
 8001810:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <HAL_ADC_Init+0x314>)
 8001812:	e000      	b.n	8001816 <HAL_ADC_Init+0x172>
 8001814:	4b69      	ldr	r3, [pc, #420]	; (80019bc <HAL_ADC_Init+0x318>)
 8001816:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001820:	d102      	bne.n	8001828 <HAL_ADC_Init+0x184>
 8001822:	4b64      	ldr	r3, [pc, #400]	; (80019b4 <HAL_ADC_Init+0x310>)
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e01a      	b.n	800185e <HAL_ADC_Init+0x1ba>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a61      	ldr	r2, [pc, #388]	; (80019b4 <HAL_ADC_Init+0x310>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d103      	bne.n	800183a <HAL_ADC_Init+0x196>
 8001832:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e011      	b.n	800185e <HAL_ADC_Init+0x1ba>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a60      	ldr	r2, [pc, #384]	; (80019c0 <HAL_ADC_Init+0x31c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d102      	bne.n	800184a <HAL_ADC_Init+0x1a6>
 8001844:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <HAL_ADC_Init+0x320>)
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e009      	b.n	800185e <HAL_ADC_Init+0x1ba>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a5d      	ldr	r2, [pc, #372]	; (80019c4 <HAL_ADC_Init+0x320>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d102      	bne.n	800185a <HAL_ADC_Init+0x1b6>
 8001854:	4b5a      	ldr	r3, [pc, #360]	; (80019c0 <HAL_ADC_Init+0x31c>)
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e001      	b.n	800185e <HAL_ADC_Init+0x1ba>
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d108      	bne.n	800187e <HAL_ADC_Init+0x1da>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_ADC_Init+0x1da>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_ADC_Init+0x1dc>
 800187e:	2300      	movs	r3, #0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d11c      	bne.n	80018be <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001884:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001886:	2b00      	cmp	r3, #0
 8001888:	d010      	beq.n	80018ac <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_ADC_Init+0x202>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Init+0x202>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_ADC_Init+0x204>
 80018a6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d108      	bne.n	80018be <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018bc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7e5b      	ldrb	r3, [r3, #25]
 80018c2:	035b      	lsls	r3, r3, #13
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018c8:	2a01      	cmp	r2, #1
 80018ca:	d002      	beq.n	80018d2 <HAL_ADC_Init+0x22e>
 80018cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d0:	e000      	b.n	80018d4 <HAL_ADC_Init+0x230>
 80018d2:	2200      	movs	r2, #0
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018e4:	4313      	orrs	r3, r2
 80018e6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d11b      	bne.n	800192a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7e5b      	ldrb	r3, [r3, #25]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	3b01      	subs	r3, #1
 8001900:	045a      	lsls	r2, r3, #17
 8001902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001904:	4313      	orrs	r3, r2
 8001906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190a:	663b      	str	r3, [r7, #96]	; 0x60
 800190c:	e00d      	b.n	800192a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001916:	f043 0220 	orr.w	r2, r3, #32
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	2b01      	cmp	r3, #1
 8001930:	d054      	beq.n	80019dc <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <HAL_ADC_Init+0x31c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d004      	beq.n	8001946 <HAL_ADC_Init+0x2a2>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <HAL_ADC_Init+0x320>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d140      	bne.n	80019c8 <HAL_ADC_Init+0x324>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800194e:	d02a      	beq.n	80019a6 <HAL_ADC_Init+0x302>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001958:	d022      	beq.n	80019a0 <HAL_ADC_Init+0x2fc>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001962:	d01a      	beq.n	800199a <HAL_ADC_Init+0x2f6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800196c:	d012      	beq.n	8001994 <HAL_ADC_Init+0x2f0>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001976:	d00a      	beq.n	800198e <HAL_ADC_Init+0x2ea>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001980:	d002      	beq.n	8001988 <HAL_ADC_Init+0x2e4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	e023      	b.n	80019d0 <HAL_ADC_Init+0x32c>
 8001988:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800198c:	e020      	b.n	80019d0 <HAL_ADC_Init+0x32c>
 800198e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001992:	e01d      	b.n	80019d0 <HAL_ADC_Init+0x32c>
 8001994:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001998:	e01a      	b.n	80019d0 <HAL_ADC_Init+0x32c>
 800199a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199e:	e017      	b.n	80019d0 <HAL_ADC_Init+0x32c>
 80019a0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80019a4:	e014      	b.n	80019d0 <HAL_ADC_Init+0x32c>
 80019a6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019aa:	e011      	b.n	80019d0 <HAL_ADC_Init+0x32c>
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	50000100 	.word	0x50000100
 80019b8:	50000300 	.word	0x50000300
 80019bc:	50000700 	.word	0x50000700
 80019c0:	50000400 	.word	0x50000400
 80019c4:	50000500 	.word	0x50000500
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019d4:	4313      	orrs	r3, r2
 80019d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019d8:	4313      	orrs	r3, r2
 80019da:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d114      	bne.n	8001a14 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019f8:	f023 0302 	bic.w	r3, r3, #2
 80019fc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7e1b      	ldrb	r3, [r3, #24]
 8001a02:	039a      	lsls	r2, r3, #14
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a10:	4313      	orrs	r3, r2
 8001a12:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_ADC_Init+0x3f0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a24:	430b      	orrs	r3, r1
 8001a26:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10c      	bne.n	8001a4a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f023 010f 	bic.w	r1, r3, #15
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
 8001a48:	e007      	b.n	8001a5a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 020f 	bic.w	r2, r2, #15
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f023 0303 	bic.w	r3, r3, #3
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a70:	e00a      	b.n	8001a88 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f023 0312 	bic.w	r3, r3, #18
 8001a7a:	f043 0210 	orr.w	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3768      	adds	r7, #104	; 0x68
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	fff0c007 	.word	0xfff0c007

08001a98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 80f7 	bne.w	8001ca6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Start_DMA+0x2e>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e0f2      	b.n	8001cac <HAL_ADC_Start_DMA+0x214>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad6:	d004      	beq.n	8001ae2 <HAL_ADC_Start_DMA+0x4a>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a75      	ldr	r2, [pc, #468]	; (8001cb4 <HAL_ADC_Start_DMA+0x21c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d109      	bne.n	8001af6 <HAL_ADC_Start_DMA+0x5e>
 8001ae2:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_ADC_Start_DMA+0x220>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf0c      	ite	eq
 8001aee:	2301      	moveq	r3, #1
 8001af0:	2300      	movne	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e008      	b.n	8001b08 <HAL_ADC_Start_DMA+0x70>
 8001af6:	4b71      	ldr	r3, [pc, #452]	; (8001cbc <HAL_ADC_Start_DMA+0x224>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80c5 	beq.w	8001c98 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fd22 	bl	8002558 <ADC_Enable>
 8001b14:	4603      	mov	r3, r0
 8001b16:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 80b7 	bne.w	8001c8e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b3c:	d004      	beq.n	8001b48 <HAL_ADC_Start_DMA+0xb0>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a5c      	ldr	r2, [pc, #368]	; (8001cb4 <HAL_ADC_Start_DMA+0x21c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d106      	bne.n	8001b56 <HAL_ADC_Start_DMA+0xbe>
 8001b48:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_ADC_Start_DMA+0x220>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_ADC_Start_DMA+0xde>
 8001b54:	e005      	b.n	8001b62 <HAL_ADC_Start_DMA+0xca>
 8001b56:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_ADC_Start_DMA+0x224>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_ADC_Start_DMA+0xde>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b6a:	d004      	beq.n	8001b76 <HAL_ADC_Start_DMA+0xde>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a53      	ldr	r2, [pc, #332]	; (8001cc0 <HAL_ADC_Start_DMA+0x228>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d115      	bne.n	8001ba2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d036      	beq.n	8001bfe <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ba0:	e02d      	b.n	8001bfe <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_Start_DMA+0x12a>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <HAL_ADC_Start_DMA+0x21c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10a      	bne.n	8001bd8 <HAL_ADC_Start_DMA+0x140>
 8001bc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e008      	b.n	8001bea <HAL_ADC_Start_DMA+0x152>
 8001bd8:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_ADC_Start_DMA+0x228>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0a:	d106      	bne.n	8001c1a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f023 0206 	bic.w	r2, r3, #6
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
 8001c18:	e002      	b.n	8001c20 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <HAL_ADC_Start_DMA+0x22c>)
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c34:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_ADC_Start_DMA+0x230>)
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <HAL_ADC_Start_DMA+0x234>)
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	221c      	movs	r2, #28
 8001c46:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0210 	orr.w	r2, r2, #16
 8001c56:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3340      	adds	r3, #64	; 0x40
 8001c72:	4619      	mov	r1, r3
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f000 feff 	bl	8002a7a <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0204 	orr.w	r2, r2, #4
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	e00d      	b.n	8001caa <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c96:	e008      	b.n	8001caa <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ca4:	e001      	b.n	8001caa <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	50000100 	.word	0x50000100
 8001cb8:	50000300 	.word	0x50000300
 8001cbc:	50000700 	.word	0x50000700
 8001cc0:	50000400 	.word	0x50000400
 8001cc4:	0800248d 	.word	0x0800248d
 8001cc8:	08002507 	.word	0x08002507
 8001ccc:	08002523 	.word	0x08002523

08001cd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b09b      	sub	sp, #108	; 0x6c
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x22>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e2ca      	b.n	8002288 <HAL_ADC_ConfigChannel+0x5b8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 82ae 	bne.w	8002266 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d81c      	bhi.n	8001d4c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	461a      	mov	r2, r3
 8001d26:	231f      	movs	r3, #31
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4019      	ands	r1, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4a:	e063      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d81e      	bhi.n	8001d92 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	3b1e      	subs	r3, #30
 8001d68:	221f      	movs	r2, #31
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4019      	ands	r1, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	3b1e      	subs	r3, #30
 8001d84:	fa00 f203 	lsl.w	r2, r0, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d90:	e040      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b0e      	cmp	r3, #14
 8001d98:	d81e      	bhi.n	8001dd8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	3b3c      	subs	r3, #60	; 0x3c
 8001dae:	221f      	movs	r2, #31
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4019      	ands	r1, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	3b3c      	subs	r3, #60	; 0x3c
 8001dca:	fa00 f203 	lsl.w	r2, r0, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8001dd6:	e01d      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	3b5a      	subs	r3, #90	; 0x5a
 8001dec:	221f      	movs	r2, #31
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4019      	ands	r1, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	3b5a      	subs	r3, #90	; 0x5a
 8001e08:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 80e5 	bne.w	8001fee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d91c      	bls.n	8001e66 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6999      	ldr	r1, [r3, #24]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b1e      	subs	r3, #30
 8001e3e:	2207      	movs	r2, #7
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4019      	ands	r1, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	3b1e      	subs	r3, #30
 8001e58:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	619a      	str	r2, [r3, #24]
 8001e64:	e019      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6959      	ldr	r1, [r3, #20]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4019      	ands	r1, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6898      	ldr	r0, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d84f      	bhi.n	8001f5c <HAL_ADC_ConfigChannel+0x28c>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001ef7 	.word	0x08001ef7
 8001ecc:	08001f19 	.word	0x08001f19
 8001ed0:	08001f3b 	.word	0x08001f3b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eda:	4b9a      	ldr	r3, [pc, #616]	; (8002144 <HAL_ADC_ConfigChannel+0x474>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	0691      	lsls	r1, r2, #26
 8001ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ef2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ef4:	e07e      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001efc:	4b91      	ldr	r3, [pc, #580]	; (8002144 <HAL_ADC_ConfigChannel+0x474>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	0691      	lsls	r1, r2, #26
 8001f06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f14:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f16:	e06d      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f1e:	4b89      	ldr	r3, [pc, #548]	; (8002144 <HAL_ADC_ConfigChannel+0x474>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	0691      	lsls	r1, r2, #26
 8001f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f36:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f38:	e05c      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f40:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_ADC_ConfigChannel+0x474>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	0691      	lsls	r1, r2, #26
 8001f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f58:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f5a:	e04b      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	069b      	lsls	r3, r3, #26
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d107      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f7e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	069b      	lsls	r3, r3, #26
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d107      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	069b      	lsls	r3, r3, #26
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d10a      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001fec:	e001      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001fee:	bf00      	nop
 8001ff0:	e000      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001ff2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d108      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x344>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x344>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_ADC_ConfigChannel+0x346>
 8002014:	2300      	movs	r3, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8130 	bne.w	800227c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d00f      	beq.n	8002044 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	400a      	ands	r2, r1
 800203e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002042:	e049      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	409a      	lsls	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b09      	cmp	r3, #9
 8002064:	d91c      	bls.n	80020a0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6999      	ldr	r1, [r3, #24]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	3b1b      	subs	r3, #27
 8002078:	2207      	movs	r2, #7
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	4019      	ands	r1, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6898      	ldr	r0, [r3, #8]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	3b1b      	subs	r3, #27
 8002092:	fa00 f203 	lsl.w	r2, r0, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	619a      	str	r2, [r3, #24]
 800209e:	e01b      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6959      	ldr	r1, [r3, #20]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	2207      	movs	r2, #7
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4019      	ands	r1, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6898      	ldr	r0, [r3, #8]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	fa00 f203 	lsl.w	r2, r0, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e0:	d004      	beq.n	80020ec <HAL_ADC_ConfigChannel+0x41c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a18      	ldr	r2, [pc, #96]	; (8002148 <HAL_ADC_ConfigChannel+0x478>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x420>
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_ADC_ConfigChannel+0x47c>)
 80020ee:	e000      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x422>
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_ADC_ConfigChannel+0x480>)
 80020f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800210c:	2b11      	cmp	r3, #17
 800210e:	d105      	bne.n	800211c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002120:	2b12      	cmp	r3, #18
 8002122:	f040 80ab 	bne.w	800227c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 80a4 	bne.w	800227c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800213c:	d10a      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x484>
 800213e:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_ADC_ConfigChannel+0x478>)
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e022      	b.n	800218a <HAL_ADC_ConfigChannel+0x4ba>
 8002144:	83fff000 	.word	0x83fff000
 8002148:	50000100 	.word	0x50000100
 800214c:	50000300 	.word	0x50000300
 8002150:	50000700 	.word	0x50000700
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_ADC_ConfigChannel+0x5c4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d103      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x496>
 800215e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e011      	b.n	800218a <HAL_ADC_ConfigChannel+0x4ba>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a4b      	ldr	r2, [pc, #300]	; (8002298 <HAL_ADC_ConfigChannel+0x5c8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d102      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x4a6>
 8002170:	4b4a      	ldr	r3, [pc, #296]	; (800229c <HAL_ADC_ConfigChannel+0x5cc>)
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e009      	b.n	800218a <HAL_ADC_ConfigChannel+0x4ba>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a48      	ldr	r2, [pc, #288]	; (800229c <HAL_ADC_ConfigChannel+0x5cc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d102      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x4b6>
 8002180:	4b45      	ldr	r3, [pc, #276]	; (8002298 <HAL_ADC_ConfigChannel+0x5c8>)
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e001      	b.n	800218a <HAL_ADC_ConfigChannel+0x4ba>
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d108      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x4da>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x4da>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_ADC_ConfigChannel+0x4dc>
 80021aa:	2300      	movs	r3, #0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d150      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d010      	beq.n	80021d8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x502>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x502>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x504>
 80021d2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d13c      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d11d      	bne.n	800221c <HAL_ADC_ConfigChannel+0x54c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e8:	d118      	bne.n	800221c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80021ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_ADC_ConfigChannel+0x5d0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2a      	ldr	r2, [pc, #168]	; (80022a4 <HAL_ADC_ConfigChannel+0x5d4>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9a      	lsrs	r2, r3, #18
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800220c:	e002      	b.n	8002214 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3b01      	subs	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f9      	bne.n	800220e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800221a:	e02e      	b.n	800227a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b11      	cmp	r3, #17
 8002222:	d10b      	bne.n	800223c <HAL_ADC_ConfigChannel+0x56c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800222c:	d106      	bne.n	800223c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800222e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002238:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800223a:	e01e      	b.n	800227a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b12      	cmp	r3, #18
 8002242:	d11a      	bne.n	800227a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800224c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800224e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002250:	e013      	b.n	800227a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f043 0220 	orr.w	r2, r3, #32
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002264:	e00a      	b.n	800227c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002278:	e000      	b.n	800227c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800227a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002284:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002288:	4618      	mov	r0, r3
 800228a:	376c      	adds	r7, #108	; 0x6c
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	50000100 	.word	0x50000100
 8002298:	50000400 	.word	0x50000400
 800229c:	50000500 	.word	0x50000500
 80022a0:	20000000 	.word	0x20000000
 80022a4:	431bde83 	.word	0x431bde83

080022a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b099      	sub	sp, #100	; 0x64
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c0:	d102      	bne.n	80022c8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80022c2:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	e01a      	b.n	80022fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6a      	ldr	r2, [pc, #424]	; (8002478 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d103      	bne.n	80022da <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80022d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	e011      	b.n	80022fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a67      	ldr	r2, [pc, #412]	; (800247c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d102      	bne.n	80022ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022e4:	4b66      	ldr	r3, [pc, #408]	; (8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	e009      	b.n	80022fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a64      	ldr	r2, [pc, #400]	; (8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d102      	bne.n	80022fa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80022f4:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	e001      	b.n	80022fe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0b0      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002312:	2302      	movs	r3, #2
 8002314:	e0a9      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 808d 	bne.w	8002448 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 8086 	bne.w	8002448 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002344:	d004      	beq.n	8002350 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002350:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002352:	e000      	b.n	8002356 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002354:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002356:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d040      	beq.n	80023e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002372:	035b      	lsls	r3, r3, #13
 8002374:	430b      	orrs	r3, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800237a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800239c:	2300      	movs	r3, #0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d15c      	bne.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d107      	bne.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80023be:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d14b      	bne.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023cc:	f023 030f 	bic.w	r3, r3, #15
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	6811      	ldr	r1, [r2, #0]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	6892      	ldr	r2, [r2, #8]
 80023d8:	430a      	orrs	r2, r1
 80023da:	431a      	orrs	r2, r3
 80023dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023de:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023e0:	e03c      	b.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d108      	bne.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800240e:	2300      	movs	r3, #0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d123      	bne.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d107      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002430:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002432:	2b00      	cmp	r3, #0
 8002434:	d112      	bne.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800243e:	f023 030f 	bic.w	r3, r3, #15
 8002442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002444:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002446:	e009      	b.n	800245c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800245a:	e000      	b.n	800245e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800245c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800246a:	4618      	mov	r0, r3
 800246c:	3764      	adds	r7, #100	; 0x64
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	50000100 	.word	0x50000100
 800247c:	50000400 	.word	0x50000400
 8002480:	50000500 	.word	0x50000500
 8002484:	50000300 	.word	0x50000300
 8002488:	50000700 	.word	0x50000700

0800248c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d126      	bne.n	80024f4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d115      	bne.n	80024ec <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d111      	bne.n	80024ec <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7fe fdc9 	bl	8001084 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80024f2:	e004      	b.n	80024fe <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f7ff f8b1 	bl	800167c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f043 0204 	orr.w	r2, r3, #4
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7ff f8a1 	bl	8001690 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <ADC_Enable+0x2c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <ADC_Enable+0x2c>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <ADC_Enable+0x2e>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d143      	bne.n	8002612 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	4b22      	ldr	r3, [pc, #136]	; (800261c <ADC_Enable+0xc4>)
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00d      	beq.n	80025b4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e02f      	b.n	8002614 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80025c4:	f7ff f84e 	bl	8001664 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025ca:	e01b      	b.n	8002604 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025cc:	f7ff f84a 	bl	8001664 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d914      	bls.n	8002604 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d00d      	beq.n	8002604 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f043 0210 	orr.w	r2, r3, #16
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e007      	b.n	8002614 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d1dc      	bne.n	80025cc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	8000003f 	.word	0x8000003f

08002620 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <ADC_Disable+0x2c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <ADC_Disable+0x2c>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <ADC_Disable+0x2e>
 800264c:	2300      	movs	r3, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d047      	beq.n	80026e2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030d 	and.w	r3, r3, #13
 800265c:	2b01      	cmp	r3, #1
 800265e:	d10f      	bne.n	8002680 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0202 	orr.w	r2, r2, #2
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2203      	movs	r2, #3
 8002676:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002678:	f7fe fff4 	bl	8001664 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800267e:	e029      	b.n	80026d4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f043 0210 	orr.w	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e023      	b.n	80026e4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800269c:	f7fe ffe2 	bl	8001664 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d914      	bls.n	80026d4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10d      	bne.n	80026d4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0210 	orr.w	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e007      	b.n	80026e4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d0dc      	beq.n	800269c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4907      	ldr	r1, [pc, #28]	; (8002788 <__NVIC_EnableIRQ+0x38>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f7ff ff8e 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff29 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff3e 	bl	8002734 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff8e 	bl	80027e0 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5d 	bl	800278c <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff31 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa2 	bl	8002848 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e014      	b.n	800294a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7fe fc49 	bl	80011c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	795b      	ldrb	r3, [r3, #5]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_DAC_ConfigChannel+0x20>
 800296e:	2302      	movs	r3, #2
 8002970:	e036      	b.n	80029e0 <HAL_DAC_ConfigChannel+0x8e>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2202      	movs	r2, #2
 800297c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002986:	f640 72fe 	movw	r2, #4094	; 0xffe
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	22c0      	movs	r2, #192	; 0xc0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43da      	mvns	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	400a      	ands	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e037      	b.n	8002a72 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2202      	movs	r2, #2
 8002a06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a18:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a1c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f941 	bl	8002cdc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}  
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_DMA_Start_IT+0x20>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e04a      	b.n	8002b30 <HAL_DMA_Start_IT+0xb6>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d13a      	bne.n	8002b22 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f8d4 	bl	8002c7e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 020e 	orr.w	r2, r2, #14
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e00f      	b.n	8002b10 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 020a 	orr.w	r2, r2, #10
 8002afe:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0204 	bic.w	r2, r2, #4
 8002b0e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e005      	b.n	8002b2e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	2204      	movs	r2, #4
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d024      	beq.n	8002baa <HAL_DMA_IRQHandler+0x72>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01f      	beq.n	8002baa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0204 	bic.w	r2, r2, #4
 8002b86:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	2104      	movs	r1, #4
 8002b92:	fa01 f202 	lsl.w	r2, r1, r2
 8002b96:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d06a      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ba8:	e065      	b.n	8002c76 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2202      	movs	r2, #2
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02c      	beq.n	8002c14 <HAL_DMA_IRQHandler+0xdc>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d027      	beq.n	8002c14 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 020a 	bic.w	r2, r2, #10
 8002be0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d035      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c12:	e030      	b.n	8002c76 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2208      	movs	r2, #8
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d028      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x13e>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d023      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 020e 	bic.w	r2, r2, #14
 8002c3c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
    }
  }
}  
 8002c74:	e7ff      	b.n	8002c76 <HAL_DMA_IRQHandler+0x13e>
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d108      	bne.n	8002cbe <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cbc:	e007      	b.n	8002cce <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	60da      	str	r2, [r3, #12]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <DMA_CalcBaseAndBitshift+0x60>)
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d80f      	bhi.n	8002d10 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <DMA_CalcBaseAndBitshift+0x64>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <DMA_CalcBaseAndBitshift+0x68>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	; (8002d48 <DMA_CalcBaseAndBitshift+0x6c>)
 8002d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002d0e:	e00e      	b.n	8002d2e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <DMA_CalcBaseAndBitshift+0x70>)
 8002d18:	4413      	add	r3, r2
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <DMA_CalcBaseAndBitshift+0x68>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	009a      	lsls	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <DMA_CalcBaseAndBitshift+0x74>)
 8002d2c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40020407 	.word	0x40020407
 8002d40:	bffdfff8 	.word	0xbffdfff8
 8002d44:	cccccccd 	.word	0xcccccccd
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	bffdfbf8 	.word	0xbffdfbf8
 8002d50:	40020400 	.word	0x40020400

08002d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d62:	e160      	b.n	8003026 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	4013      	ands	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8152 	beq.w	8003020 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d005      	beq.n	8002d94 <HAL_GPIO_Init+0x40>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d130      	bne.n	8002df6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dca:	2201      	movs	r2, #1
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0201 	and.w	r2, r3, #1
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d017      	beq.n	8002e32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d123      	bne.n	8002e86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	220f      	movs	r2, #15
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	08da      	lsrs	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3208      	adds	r2, #8
 8002e80:	6939      	ldr	r1, [r7, #16]
 8002e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	2203      	movs	r2, #3
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 0203 	and.w	r2, r3, #3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80ac 	beq.w	8003020 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec8:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_GPIO_Init+0x2f0>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	4a5d      	ldr	r2, [pc, #372]	; (8003044 <HAL_GPIO_Init+0x2f0>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6193      	str	r3, [r2, #24]
 8002ed4:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_GPIO_Init+0x2f0>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ee0:	4a59      	ldr	r2, [pc, #356]	; (8003048 <HAL_GPIO_Init+0x2f4>)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	089b      	lsrs	r3, r3, #2
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f0a:	d025      	beq.n	8002f58 <HAL_GPIO_Init+0x204>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a4f      	ldr	r2, [pc, #316]	; (800304c <HAL_GPIO_Init+0x2f8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d01f      	beq.n	8002f54 <HAL_GPIO_Init+0x200>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a4e      	ldr	r2, [pc, #312]	; (8003050 <HAL_GPIO_Init+0x2fc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d019      	beq.n	8002f50 <HAL_GPIO_Init+0x1fc>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a4d      	ldr	r2, [pc, #308]	; (8003054 <HAL_GPIO_Init+0x300>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d013      	beq.n	8002f4c <HAL_GPIO_Init+0x1f8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a4c      	ldr	r2, [pc, #304]	; (8003058 <HAL_GPIO_Init+0x304>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00d      	beq.n	8002f48 <HAL_GPIO_Init+0x1f4>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a4b      	ldr	r2, [pc, #300]	; (800305c <HAL_GPIO_Init+0x308>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <HAL_GPIO_Init+0x1f0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a4a      	ldr	r2, [pc, #296]	; (8003060 <HAL_GPIO_Init+0x30c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d101      	bne.n	8002f40 <HAL_GPIO_Init+0x1ec>
 8002f3c:	2306      	movs	r3, #6
 8002f3e:	e00c      	b.n	8002f5a <HAL_GPIO_Init+0x206>
 8002f40:	2307      	movs	r3, #7
 8002f42:	e00a      	b.n	8002f5a <HAL_GPIO_Init+0x206>
 8002f44:	2305      	movs	r3, #5
 8002f46:	e008      	b.n	8002f5a <HAL_GPIO_Init+0x206>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e006      	b.n	8002f5a <HAL_GPIO_Init+0x206>
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e004      	b.n	8002f5a <HAL_GPIO_Init+0x206>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e002      	b.n	8002f5a <HAL_GPIO_Init+0x206>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_GPIO_Init+0x206>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	f002 0203 	and.w	r2, r2, #3
 8002f60:	0092      	lsls	r2, r2, #2
 8002f62:	4093      	lsls	r3, r2
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f6a:	4937      	ldr	r1, [pc, #220]	; (8003048 <HAL_GPIO_Init+0x2f4>)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f78:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_GPIO_Init+0x310>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f9c:	4a31      	ldr	r2, [pc, #196]	; (8003064 <HAL_GPIO_Init+0x310>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fa2:	4b30      	ldr	r3, [pc, #192]	; (8003064 <HAL_GPIO_Init+0x310>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <HAL_GPIO_Init+0x310>)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_GPIO_Init+0x310>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ff0:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <HAL_GPIO_Init+0x310>)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_GPIO_Init+0x310>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <HAL_GPIO_Init+0x310>)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3301      	adds	r3, #1
 8003024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	f47f ae97 	bne.w	8002d64 <HAL_GPIO_Init+0x10>
  }
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	40021000 	.word	0x40021000
 8003048:	40010000 	.word	0x40010000
 800304c:	48000400 	.word	0x48000400
 8003050:	48000800 	.word	0x48000800
 8003054:	48000c00 	.word	0x48000c00
 8003058:	48001000 	.word	0x48001000
 800305c:	48001400 	.word	0x48001400
 8003060:	48001800 	.word	0x48001800
 8003064:	40010400 	.word	0x40010400

08003068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800306e:	af00      	add	r7, sp, #0
 8003070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003074:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003078:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800307a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800307e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f001 b83a 	b.w	8004102 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003092:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 816f 	beq.w	8003382 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030a4:	4bb5      	ldr	r3, [pc, #724]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d00c      	beq.n	80030ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030b0:	4bb2      	ldr	r3, [pc, #712]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d15c      	bne.n	8003176 <HAL_RCC_OscConfig+0x10e>
 80030bc:	4baf      	ldr	r3, [pc, #700]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c8:	d155      	bne.n	8003176 <HAL_RCC_OscConfig+0x10e>
 80030ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d102      	bne.n	80030fc <HAL_RCC_OscConfig+0x94>
 80030f6:	4ba1      	ldr	r3, [pc, #644]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	e015      	b.n	8003128 <HAL_RCC_OscConfig+0xc0>
 80030fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003100:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003114:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003118:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003124:	4b95      	ldr	r3, [pc, #596]	; (800337c <HAL_RCC_OscConfig+0x314>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800312c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003130:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003134:	fa92 f2a2 	rbit	r2, r2
 8003138:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800313c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003140:	fab2 f282 	clz	r2, r2
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f042 0220 	orr.w	r2, r2, #32
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	f002 021f 	and.w	r2, r2, #31
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f202 	lsl.w	r2, r1, r2
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8111 	beq.w	8003380 <HAL_RCC_OscConfig+0x318>
 800315e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003162:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 8108 	bne.w	8003380 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f000 bfc6 	b.w	8004102 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x12e>
 8003188:	4b7c      	ldr	r3, [pc, #496]	; (800337c <HAL_RCC_OscConfig+0x314>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a7b      	ldr	r2, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x314>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e036      	b.n	8003204 <HAL_RCC_OscConfig+0x19c>
 8003196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x158>
 80031a6:	4b75      	ldr	r3, [pc, #468]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a74      	ldr	r2, [pc, #464]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b72      	ldr	r3, [pc, #456]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a71      	ldr	r2, [pc, #452]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e021      	b.n	8003204 <HAL_RCC_OscConfig+0x19c>
 80031c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x184>
 80031d2:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a69      	ldr	r2, [pc, #420]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a66      	ldr	r2, [pc, #408]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0x19c>
 80031ec:	4b63      	ldr	r3, [pc, #396]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a62      	ldr	r2, [pc, #392]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b60      	ldr	r3, [pc, #384]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a5f      	ldr	r2, [pc, #380]	; (800337c <HAL_RCC_OscConfig+0x314>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003202:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d059      	beq.n	80032c8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fa26 	bl	8001664 <HAL_GetTick>
 8003218:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321c:	e00a      	b.n	8003234 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321e:	f7fe fa21 	bl	8001664 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d902      	bls.n	8003234 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	f000 bf67 	b.w	8004102 <HAL_RCC_OscConfig+0x109a>
 8003234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003238:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003248:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d102      	bne.n	8003266 <HAL_RCC_OscConfig+0x1fe>
 8003260:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_RCC_OscConfig+0x314>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x22a>
 8003266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800326a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800327a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800327e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003282:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <HAL_RCC_OscConfig+0x314>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003296:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800329a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800329e:	fa92 f2a2 	rbit	r2, r2
 80032a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80032a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0220 	orr.w	r2, r2, #32
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0ab      	beq.n	800321e <HAL_RCC_OscConfig+0x1b6>
 80032c6:	e05c      	b.n	8003382 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe f9cc 	bl	8001664 <HAL_GetTick>
 80032cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d2:	f7fe f9c7 	bl	8001664 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d902      	bls.n	80032e8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	f000 bf0d 	b.w	8004102 <HAL_RCC_OscConfig+0x109a>
 80032e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80032fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <HAL_RCC_OscConfig+0x2b2>
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_OscConfig+0x314>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	e015      	b.n	8003346 <HAL_RCC_OscConfig+0x2de>
 800331a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800332e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003332:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003336:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_RCC_OscConfig+0x314>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800334a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800334e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003352:	fa92 f2a2 	rbit	r2, r2
 8003356:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800335a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800335e:	fab2 f282 	clz	r2, r2
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	f002 021f 	and.w	r2, r2, #31
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f202 	lsl.w	r2, r1, r2
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ab      	bne.n	80032d2 <HAL_RCC_OscConfig+0x26a>
 800337a:	e002      	b.n	8003382 <HAL_RCC_OscConfig+0x31a>
 800337c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003386:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 817f 	beq.w	8003696 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003398:	4ba7      	ldr	r3, [pc, #668]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00c      	beq.n	80033be <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033a4:	4ba4      	ldr	r3, [pc, #656]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d173      	bne.n	8003498 <HAL_RCC_OscConfig+0x430>
 80033b0:	4ba1      	ldr	r3, [pc, #644]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80033b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033bc:	d16c      	bne.n	8003498 <HAL_RCC_OscConfig+0x430>
 80033be:	2302      	movs	r3, #2
 80033c0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80033d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d4:	fab3 f383 	clz	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <HAL_RCC_OscConfig+0x386>
 80033e8:	4b93      	ldr	r3, [pc, #588]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e013      	b.n	8003416 <HAL_RCC_OscConfig+0x3ae>
 80033ee:	2302      	movs	r3, #2
 80033f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003400:	2302      	movs	r3, #2
 8003402:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003406:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003412:	4b89      	ldr	r3, [pc, #548]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	2202      	movs	r2, #2
 8003418:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800341c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003420:	fa92 f2a2 	rbit	r2, r2
 8003424:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003428:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800342c:	fab2 f282 	clz	r2, r2
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f042 0220 	orr.w	r2, r2, #32
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	f002 021f 	and.w	r2, r2, #31
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCC_OscConfig+0x3f6>
 8003448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800344c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d002      	beq.n	800345e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f000 be52 	b.w	8004102 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	4b76      	ldr	r3, [pc, #472]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800346a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	21f8      	movs	r1, #248	; 0xf8
 8003474:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800347c:	fa91 f1a1 	rbit	r1, r1
 8003480:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003484:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003488:	fab1 f181 	clz	r1, r1
 800348c:	b2c9      	uxtb	r1, r1
 800348e:	408b      	lsls	r3, r1
 8003490:	4969      	ldr	r1, [pc, #420]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	e0fe      	b.n	8003696 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8088 	beq.w	80035ba <HAL_RCC_OscConfig+0x552>
 80034aa:	2301      	movs	r3, #1
 80034ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80034bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	461a      	mov	r2, r3
 80034d2:	2301      	movs	r3, #1
 80034d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fe f8c5 	bl	8001664 <HAL_GetTick>
 80034da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fe f8c0 	bl	8001664 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d902      	bls.n	80034f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	f000 be06 	b.w	8004102 <HAL_RCC_OscConfig+0x109a>
 80034f6:	2302      	movs	r3, #2
 80034f8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003508:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_RCC_OscConfig+0x4be>
 8003520:	4b45      	ldr	r3, [pc, #276]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	e013      	b.n	800354e <HAL_RCC_OscConfig+0x4e6>
 8003526:	2302      	movs	r3, #2
 8003528:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003538:	2302      	movs	r3, #2
 800353a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800353e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800354a:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2202      	movs	r2, #2
 8003550:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003554:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003558:	fa92 f2a2 	rbit	r2, r2
 800355c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003560:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003564:	fab2 f282 	clz	r2, r2
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	f042 0220 	orr.w	r2, r2, #32
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	f002 021f 	and.w	r2, r2, #31
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f202 	lsl.w	r2, r1, r2
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0af      	beq.n	80034e0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	21f8      	movs	r1, #248	; 0xf8
 8003596:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800359e:	fa91 f1a1 	rbit	r1, r1
 80035a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80035a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80035aa:	fab1 f181 	clz	r1, r1
 80035ae:	b2c9      	uxtb	r1, r1
 80035b0:	408b      	lsls	r3, r1
 80035b2:	4921      	ldr	r1, [pc, #132]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]
 80035b8:	e06d      	b.n	8003696 <HAL_RCC_OscConfig+0x62e>
 80035ba:	2301      	movs	r3, #1
 80035bc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80035cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	461a      	mov	r2, r3
 80035e2:	2300      	movs	r3, #0
 80035e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7fe f83d 	bl	8001664 <HAL_GetTick>
 80035ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fe f838 	bl	8001664 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d902      	bls.n	8003606 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	f000 bd7e 	b.w	8004102 <HAL_RCC_OscConfig+0x109a>
 8003606:	2302      	movs	r3, #2
 8003608:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003618:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361c:	fab3 f383 	clz	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_RCC_OscConfig+0x5d4>
 8003630:	4b01      	ldr	r3, [pc, #4]	; (8003638 <HAL_RCC_OscConfig+0x5d0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	e016      	b.n	8003664 <HAL_RCC_OscConfig+0x5fc>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	2302      	movs	r3, #2
 800363e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800364e:	2302      	movs	r3, #2
 8003650:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003654:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003660:	4bbf      	ldr	r3, [pc, #764]	; (8003960 <HAL_RCC_OscConfig+0x8f8>)
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2202      	movs	r2, #2
 8003666:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800366a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800366e:	fa92 f2a2 	rbit	r2, r2
 8003672:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003676:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800367a:	fab2 f282 	clz	r2, r2
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	f042 0220 	orr.w	r2, r2, #32
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	f002 021f 	and.w	r2, r2, #31
 800368a:	2101      	movs	r1, #1
 800368c:	fa01 f202 	lsl.w	r2, r1, r2
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ac      	bne.n	80035f0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800369a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8113 	beq.w	80038d2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d07c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x74e>
 80036bc:	2301      	movs	r3, #1
 80036be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80036ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	4ba2      	ldr	r3, [pc, #648]	; (8003964 <HAL_RCC_OscConfig+0x8fc>)
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	461a      	mov	r2, r3
 80036e2:	2301      	movs	r3, #1
 80036e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fd ffbd 	bl	8001664 <HAL_GetTick>
 80036ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f0:	f7fd ffb8 	bl	8001664 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d902      	bls.n	8003706 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	f000 bcfe 	b.w	8004102 <HAL_RCC_OscConfig+0x109a>
 8003706:	2302      	movs	r3, #2
 8003708:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003710:	fa93 f2a3 	rbit	r2, r3
 8003714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003718:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003726:	2202      	movs	r2, #2
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	fa93 f2a3 	rbit	r2, r3
 8003738:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003746:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800374a:	2202      	movs	r2, #2
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003752:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	fa93 f2a3 	rbit	r2, r3
 800375c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003760:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003764:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	4b7e      	ldr	r3, [pc, #504]	; (8003960 <HAL_RCC_OscConfig+0x8f8>)
 8003768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800376a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003772:	2102      	movs	r1, #2
 8003774:	6019      	str	r1, [r3, #0]
 8003776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f1a3 	rbit	r1, r3
 8003784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003788:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800378c:	6019      	str	r1, [r3, #0]
  return result;
 800378e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003792:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	fab3 f383 	clz	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d09d      	beq.n	80036f0 <HAL_RCC_OscConfig+0x688>
 80037b4:	e08d      	b.n	80038d2 <HAL_RCC_OscConfig+0x86a>
 80037b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	fa93 f2a3 	rbit	r2, r3
 80037d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037d8:	601a      	str	r2, [r3, #0]
  return result;
 80037da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e4:	fab3 f383 	clz	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b5d      	ldr	r3, [pc, #372]	; (8003964 <HAL_RCC_OscConfig+0x8fc>)
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	461a      	mov	r2, r3
 80037f4:	2300      	movs	r3, #0
 80037f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f8:	f7fd ff34 	bl	8001664 <HAL_GetTick>
 80037fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003802:	f7fd ff2f 	bl	8001664 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d902      	bls.n	8003818 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	f000 bc75 	b.w	8004102 <HAL_RCC_OscConfig+0x109a>
 8003818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800381c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003820:	2202      	movs	r2, #2
 8003822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003828:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fa93 f2a3 	rbit	r2, r3
 8003832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003836:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003844:	2202      	movs	r2, #2
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	fa93 f2a3 	rbit	r2, r3
 8003856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003864:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003868:	2202      	movs	r2, #2
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003870:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003882:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	4b36      	ldr	r3, [pc, #216]	; (8003960 <HAL_RCC_OscConfig+0x8f8>)
 8003886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800388c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003890:	2102      	movs	r1, #2
 8003892:	6019      	str	r1, [r3, #0]
 8003894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003898:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f1a3 	rbit	r1, r3
 80038a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038aa:	6019      	str	r1, [r3, #0]
  return result;
 80038ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2101      	movs	r1, #1
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d197      	bne.n	8003802 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 81a5 	beq.w	8003c32 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <HAL_RCC_OscConfig+0x8f8>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_RCC_OscConfig+0x8f8>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_RCC_OscConfig+0x8f8>)
 8003900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003904:	61d3      	str	r3, [r2, #28]
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <HAL_RCC_OscConfig+0x8f8>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800390e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003920:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <HAL_RCC_OscConfig+0x900>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d121      	bne.n	8003978 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <HAL_RCC_OscConfig+0x900>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x900>)
 800393a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003940:	f7fd fe90 	bl	8001664 <HAL_GetTick>
 8003944:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	e010      	b.n	800396c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fd fe8b 	bl	8001664 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d908      	bls.n	800396c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e3d1      	b.n	8004102 <HAL_RCC_OscConfig+0x109a>
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
 8003964:	10908120 	.word	0x10908120
 8003968:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <HAL_RCC_OscConfig+0xb3c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0e8      	beq.n	800394a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x92e>
 8003988:	4b87      	ldr	r3, [pc, #540]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4a86      	ldr	r2, [pc, #536]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6213      	str	r3, [r2, #32]
 8003994:	e035      	b.n	8003a02 <HAL_RCC_OscConfig+0x99a>
 8003996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x958>
 80039a6:	4b80      	ldr	r3, [pc, #512]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a7f      	ldr	r2, [pc, #508]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	6213      	str	r3, [r2, #32]
 80039b2:	4b7d      	ldr	r3, [pc, #500]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	4a7c      	ldr	r2, [pc, #496]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039b8:	f023 0304 	bic.w	r3, r3, #4
 80039bc:	6213      	str	r3, [r2, #32]
 80039be:	e020      	b.n	8003a02 <HAL_RCC_OscConfig+0x99a>
 80039c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b05      	cmp	r3, #5
 80039ce:	d10c      	bne.n	80039ea <HAL_RCC_OscConfig+0x982>
 80039d0:	4b75      	ldr	r3, [pc, #468]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4a74      	ldr	r2, [pc, #464]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	4b72      	ldr	r3, [pc, #456]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4a71      	ldr	r2, [pc, #452]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6213      	str	r3, [r2, #32]
 80039e8:	e00b      	b.n	8003a02 <HAL_RCC_OscConfig+0x99a>
 80039ea:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4a6e      	ldr	r2, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	6213      	str	r3, [r2, #32]
 80039f6:	4b6c      	ldr	r3, [pc, #432]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4a6b      	ldr	r2, [pc, #428]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 8081 	beq.w	8003b16 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a14:	f7fd fe26 	bl	8001664 <HAL_GetTick>
 8003a18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	e00b      	b.n	8003a36 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fd fe21 	bl	8001664 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e365      	b.n	8004102 <HAL_RCC_OscConfig+0x109a>
 8003a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a3e:	2202      	movs	r2, #2
 8003a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a46:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	fa93 f2a3 	rbit	r2, r3
 8003a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a62:	2202      	movs	r2, #2
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	fa93 f2a3 	rbit	r2, r3
 8003a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a7c:	601a      	str	r2, [r3, #0]
  return result;
 8003a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a82:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a86:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f043 0302 	orr.w	r3, r3, #2
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d102      	bne.n	8003aa2 <HAL_RCC_OscConfig+0xa3a>
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	e013      	b.n	8003aca <HAL_RCC_OscConfig+0xa62>
 8003aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003aaa:	2202      	movs	r2, #2
 8003aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	fa93 f2a3 	rbit	r2, r3
 8003abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ace:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	6011      	str	r1, [r2, #0]
 8003ad6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ada:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	fa92 f1a2 	rbit	r1, r2
 8003ae4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ae8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003aec:	6011      	str	r1, [r2, #0]
  return result;
 8003aee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003af2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	fab2 f282 	clz	r2, r2
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	f002 021f 	and.w	r2, r2, #31
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d084      	beq.n	8003a1e <HAL_RCC_OscConfig+0x9b6>
 8003b14:	e083      	b.n	8003c1e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b16:	f7fd fda5 	bl	8001664 <HAL_GetTick>
 8003b1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b20:	f7fd fda0 	bl	8001664 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e2e4      	b.n	8004102 <HAL_RCC_OscConfig+0x109a>
 8003b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b40:	2202      	movs	r2, #2
 8003b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b48:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	fa93 f2a3 	rbit	r2, r3
 8003b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b64:	2202      	movs	r2, #2
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fa93 f2a3 	rbit	r2, r3
 8003b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b7e:	601a      	str	r2, [r3, #0]
  return result;
 8003b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b84:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b88:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d106      	bne.n	8003bac <HAL_RCC_OscConfig+0xb44>
 8003b9e:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <HAL_RCC_OscConfig+0xb40>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	e017      	b.n	8003bd4 <HAL_RCC_OscConfig+0xb6c>
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bbc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	fa93 f2a3 	rbit	r2, r3
 8003bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bca:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	4bb3      	ldr	r3, [pc, #716]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bd8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bdc:	2102      	movs	r1, #2
 8003bde:	6011      	str	r1, [r2, #0]
 8003be0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003be4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	fa92 f1a2 	rbit	r1, r2
 8003bee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bf2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003bf6:	6011      	str	r1, [r2, #0]
  return result;
 8003bf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bfc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	fab2 f282 	clz	r2, r2
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	f002 021f 	and.w	r2, r2, #31
 8003c12:	2101      	movs	r1, #1
 8003c14:	fa01 f202 	lsl.w	r2, r1, r2
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d180      	bne.n	8003b20 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c1e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4b9e      	ldr	r3, [pc, #632]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	4a9d      	ldr	r2, [pc, #628]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c30:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 825e 	beq.w	8004100 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c44:	4b96      	ldr	r3, [pc, #600]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	f000 821f 	beq.w	8004090 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	f040 8170 	bne.w	8003f44 <HAL_RCC_OscConfig+0xedc>
 8003c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c68:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c76:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	fa93 f2a3 	rbit	r2, r3
 8003c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c88:	601a      	str	r2, [r3, #0]
  return result;
 8003c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c92:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7fd fcdb 	bl	8001664 <HAL_GetTick>
 8003cae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	e009      	b.n	8003cc8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fd fcd6 	bl	8001664 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e21c      	b.n	8004102 <HAL_RCC_OscConfig+0x109a>
 8003cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ccc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cda:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	fa93 f2a3 	rbit	r2, r3
 8003ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cec:	601a      	str	r2, [r3, #0]
  return result;
 8003cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cf6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf8:	fab3 f383 	clz	r3, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d102      	bne.n	8003d12 <HAL_RCC_OscConfig+0xcaa>
 8003d0c:	4b64      	ldr	r3, [pc, #400]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	e027      	b.n	8003d62 <HAL_RCC_OscConfig+0xcfa>
 8003d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d24:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	fa93 f2a3 	rbit	r2, r3
 8003d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	fa93 f2a3 	rbit	r2, r3
 8003d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d58:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d6e:	6011      	str	r1, [r2, #0]
 8003d70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	fa92 f1a2 	rbit	r1, r2
 8003d7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d82:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003d86:	6011      	str	r1, [r2, #0]
  return result;
 8003d88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d8c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	fab2 f282 	clz	r2, r2
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	f042 0220 	orr.w	r2, r2, #32
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	f002 021f 	and.w	r2, r2, #31
 8003da2:	2101      	movs	r1, #1
 8003da4:	fa01 f202 	lsl.w	r2, r1, r2
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d182      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dae:	4b3c      	ldr	r3, [pc, #240]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f023 020f 	bic.w	r2, r3, #15
 8003db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	4937      	ldr	r1, [pc, #220]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003dc8:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6a19      	ldr	r1, [r3, #32]
 8003ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	492d      	ldr	r1, [pc, #180]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
 8003df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	fa93 f2a3 	rbit	r2, r3
 8003e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e14:	601a      	str	r2, [r3, #0]
  return result;
 8003e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e1e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e20:	fab3 f383 	clz	r3, r3
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	461a      	mov	r2, r3
 8003e32:	2301      	movs	r3, #1
 8003e34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e36:	f7fd fc15 	bl	8001664 <HAL_GetTick>
 8003e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e3e:	e009      	b.n	8003e54 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fd fc10 	bl	8001664 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e156      	b.n	8004102 <HAL_RCC_OscConfig+0x109a>
 8003e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	fa93 f2a3 	rbit	r2, r3
 8003e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e78:	601a      	str	r2, [r3, #0]
  return result;
 8003e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCC_OscConfig+0xe3c>
 8003e98:	4b01      	ldr	r3, [pc, #4]	; (8003ea0 <HAL_RCC_OscConfig+0xe38>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	e02a      	b.n	8003ef4 <HAL_RCC_OscConfig+0xe8c>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	fa93 f2a3 	rbit	r2, r3
 8003ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ece:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ed2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003edc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	fa93 f2a3 	rbit	r2, r3
 8003ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eea:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	4b86      	ldr	r3, [pc, #536]	; (800410c <HAL_RCC_OscConfig+0x10a4>)
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ef8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003efc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f00:	6011      	str	r1, [r2, #0]
 8003f02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f06:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	fa92 f1a2 	rbit	r1, r2
 8003f10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f14:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f18:	6011      	str	r1, [r2, #0]
  return result;
 8003f1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f1e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	fab2 f282 	clz	r2, r2
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	f042 0220 	orr.w	r2, r2, #32
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	f002 021f 	and.w	r2, r2, #31
 8003f34:	2101      	movs	r1, #1
 8003f36:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f43f af7f 	beq.w	8003e40 <HAL_RCC_OscConfig+0xdd8>
 8003f42:	e0dd      	b.n	8004100 <HAL_RCC_OscConfig+0x1098>
 8003f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f48:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	fa93 f2a3 	rbit	r2, r3
 8003f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f64:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f68:	601a      	str	r2, [r3, #0]
  return result;
 8003f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f72:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	461a      	mov	r2, r3
 8003f86:	2300      	movs	r3, #0
 8003f88:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd fb6b 	bl	8001664 <HAL_GetTick>
 8003f8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f92:	e009      	b.n	8003fa8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fd fb66 	bl	8001664 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e0ac      	b.n	8004102 <HAL_RCC_OscConfig+0x109a>
 8003fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	fa93 f2a3 	rbit	r2, r3
 8003fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fcc:	601a      	str	r2, [r3, #0]
  return result;
 8003fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd8:	fab3 f383 	clz	r3, r3
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d102      	bne.n	8003ff2 <HAL_RCC_OscConfig+0xf8a>
 8003fec:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_OscConfig+0x10a4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	e027      	b.n	8004042 <HAL_RCC_OscConfig+0xfda>
 8003ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ffa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004004:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	fa93 f2a3 	rbit	r2, r3
 800400e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004012:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	fa93 f2a3 	rbit	r2, r3
 8004034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004038:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	4b33      	ldr	r3, [pc, #204]	; (800410c <HAL_RCC_OscConfig+0x10a4>)
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004046:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800404a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800404e:	6011      	str	r1, [r2, #0]
 8004050:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004054:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	fa92 f1a2 	rbit	r1, r2
 800405e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004062:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004066:	6011      	str	r1, [r2, #0]
  return result;
 8004068:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800406c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	fab2 f282 	clz	r2, r2
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	f042 0220 	orr.w	r2, r2, #32
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	f002 021f 	and.w	r2, r2, #31
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f202 	lsl.w	r2, r1, r2
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d182      	bne.n	8003f94 <HAL_RCC_OscConfig+0xf2c>
 800408e:	e037      	b.n	8004100 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004094:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e02e      	b.n	8004102 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_OscConfig+0x10a4>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <HAL_RCC_OscConfig+0x10a4>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040b8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80040bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d117      	bne.n	80040fc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80040d0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d10b      	bne.n	80040fc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80040e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040e8:	f003 020f 	and.w	r2, r3, #15
 80040ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000

08004110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b09e      	sub	sp, #120	; 0x78
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e162      	b.n	80043ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004128:	4b90      	ldr	r3, [pc, #576]	; (800436c <HAL_RCC_ClockConfig+0x25c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d910      	bls.n	8004158 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b8d      	ldr	r3, [pc, #564]	; (800436c <HAL_RCC_ClockConfig+0x25c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 0207 	bic.w	r2, r3, #7
 800413e:	498b      	ldr	r1, [pc, #556]	; (800436c <HAL_RCC_ClockConfig+0x25c>)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b89      	ldr	r3, [pc, #548]	; (800436c <HAL_RCC_ClockConfig+0x25c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e14a      	b.n	80043ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004164:	4b82      	ldr	r3, [pc, #520]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	497f      	ldr	r1, [pc, #508]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 8004172:	4313      	orrs	r3, r2
 8004174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80dc 	beq.w	800433c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d13c      	bne.n	8004206 <HAL_RCC_ClockConfig+0xf6>
 800418c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004190:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d102      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xa6>
 80041b0:	4b6f      	ldr	r3, [pc, #444]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	e00f      	b.n	80041d6 <HAL_RCC_ClockConfig+0xc6>
 80041b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	667b      	str	r3, [r7, #100]	; 0x64
 80041c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041cc:	fa93 f3a3 	rbit	r3, r3
 80041d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041d2:	4b67      	ldr	r3, [pc, #412]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041da:	65ba      	str	r2, [r7, #88]	; 0x58
 80041dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041de:	fa92 f2a2 	rbit	r2, r2
 80041e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80041e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041e6:	fab2 f282 	clz	r2, r2
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	f042 0220 	orr.w	r2, r2, #32
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	f002 021f 	and.w	r2, r2, #31
 80041f6:	2101      	movs	r1, #1
 80041f8:	fa01 f202 	lsl.w	r2, r1, r2
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d17b      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0f3      	b.n	80043ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d13c      	bne.n	8004288 <HAL_RCC_ClockConfig+0x178>
 800420e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004212:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004216:	fa93 f3a3 	rbit	r3, r3
 800421a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800421c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d102      	bne.n	8004238 <HAL_RCC_ClockConfig+0x128>
 8004232:	4b4f      	ldr	r3, [pc, #316]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	e00f      	b.n	8004258 <HAL_RCC_ClockConfig+0x148>
 8004238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800423c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
 8004246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800424a:	643b      	str	r3, [r7, #64]	; 0x40
 800424c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004254:	4b46      	ldr	r3, [pc, #280]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800425c:	63ba      	str	r2, [r7, #56]	; 0x38
 800425e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004260:	fa92 f2a2 	rbit	r2, r2
 8004264:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004268:	fab2 f282 	clz	r2, r2
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	f042 0220 	orr.w	r2, r2, #32
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	f002 021f 	and.w	r2, r2, #31
 8004278:	2101      	movs	r1, #1
 800427a:	fa01 f202 	lsl.w	r2, r1, r2
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d13a      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0b2      	b.n	80043ee <HAL_RCC_ClockConfig+0x2de>
 8004288:	2302      	movs	r3, #2
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d102      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x1a0>
 80042aa:	4b31      	ldr	r3, [pc, #196]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	e00d      	b.n	80042cc <HAL_RCC_ClockConfig+0x1bc>
 80042b0:	2302      	movs	r3, #2
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
 80042bc:	2302      	movs	r3, #2
 80042be:	623b      	str	r3, [r7, #32]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	2202      	movs	r2, #2
 80042ce:	61ba      	str	r2, [r7, #24]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	fa92 f2a2 	rbit	r2, r2
 80042d6:	617a      	str	r2, [r7, #20]
  return result;
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	fab2 f282 	clz	r2, r2
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	f042 0220 	orr.w	r2, r2, #32
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f002 021f 	and.w	r2, r2, #31
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e079      	b.n	80043ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f023 0203 	bic.w	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	491a      	ldr	r1, [pc, #104]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800430c:	f7fd f9aa 	bl	8001664 <HAL_GetTick>
 8004310:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	e00a      	b.n	800432a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004314:	f7fd f9a6 	bl	8001664 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e061      	b.n	80043ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_RCC_ClockConfig+0x260>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 020c 	and.w	r2, r3, #12
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	429a      	cmp	r2, r3
 800433a:	d1eb      	bne.n	8004314 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_ClockConfig+0x25c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d214      	bcs.n	8004374 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_RCC_ClockConfig+0x25c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 0207 	bic.w	r2, r3, #7
 8004352:	4906      	ldr	r1, [pc, #24]	; (800436c <HAL_RCC_ClockConfig+0x25c>)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <HAL_RCC_ClockConfig+0x25c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e040      	b.n	80043ee <HAL_RCC_ClockConfig+0x2de>
 800436c:	40022000 	.word	0x40022000
 8004370:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004380:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <HAL_RCC_ClockConfig+0x2e8>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	491a      	ldr	r1, [pc, #104]	; (80043f8 <HAL_RCC_ClockConfig+0x2e8>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439e:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <HAL_RCC_ClockConfig+0x2e8>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4912      	ldr	r1, [pc, #72]	; (80043f8 <HAL_RCC_ClockConfig+0x2e8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043b2:	f000 f829 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80043b6:	4601      	mov	r1, r0
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <HAL_RCC_ClockConfig+0x2e8>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c0:	22f0      	movs	r2, #240	; 0xf0
 80043c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	fa92 f2a2 	rbit	r2, r2
 80043ca:	60fa      	str	r2, [r7, #12]
  return result;
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	fab2 f282 	clz	r2, r2
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	40d3      	lsrs	r3, r2
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x2ec>)
 80043d8:	5cd3      	ldrb	r3, [r2, r3]
 80043da:	fa21 f303 	lsr.w	r3, r1, r3
 80043de:	4a08      	ldr	r2, [pc, #32]	; (8004400 <HAL_RCC_ClockConfig+0x2f0>)
 80043e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_RCC_ClockConfig+0x2f4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fd f8f8 	bl	80015dc <HAL_InitTick>
  
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3778      	adds	r7, #120	; 0x78
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	0800844c 	.word	0x0800844c
 8004400:	20000000 	.word	0x20000000
 8004404:	20000004 	.word	0x20000004

08004408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	b08b      	sub	sp, #44	; 0x2c
 800440c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004422:	4b2a      	ldr	r3, [pc, #168]	; (80044cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b04      	cmp	r3, #4
 8004430:	d002      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x30>
 8004432:	2b08      	cmp	r3, #8
 8004434:	d003      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0x36>
 8004436:	e03f      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800443a:	623b      	str	r3, [r7, #32]
      break;
 800443c:	e03f      	b.n	80044be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004444:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004448:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	fa92 f2a2 	rbit	r2, r2
 8004450:	607a      	str	r2, [r7, #4]
  return result;
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	fab2 f282 	clz	r2, r2
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	40d3      	lsrs	r3, r2
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004462:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	220f      	movs	r2, #15
 800446c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	fa92 f2a2 	rbit	r2, r2
 8004474:	60fa      	str	r2, [r7, #12]
  return result;
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	fab2 f282 	clz	r2, r2
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	40d3      	lsrs	r3, r2
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004490:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	fbb2 f2f3 	udiv	r2, r2, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	e007      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044a2:	4a0b      	ldr	r2, [pc, #44]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	623b      	str	r3, [r7, #32]
      break;
 80044b6:	e002      	b.n	80044be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044ba:	623b      	str	r3, [r7, #32]
      break;
 80044bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044be:	6a3b      	ldr	r3, [r7, #32]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	372c      	adds	r7, #44	; 0x2c
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40021000 	.word	0x40021000
 80044d0:	007a1200 	.word	0x007a1200
 80044d4:	08008464 	.word	0x08008464
 80044d8:	08008474 	.word	0x08008474

080044dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000000 	.word	0x20000000

080044f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80044fa:	f7ff ffef 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 80044fe:	4601      	mov	r1, r0
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004508:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800450c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	fa92 f2a2 	rbit	r2, r2
 8004514:	603a      	str	r2, [r7, #0]
  return result;
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	fab2 f282 	clz	r2, r2
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	40d3      	lsrs	r3, r2
 8004520:	4a04      	ldr	r2, [pc, #16]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	0800845c 	.word	0x0800845c

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800453e:	f7ff ffcd 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 8004542:	4601      	mov	r1, r0
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800454c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004550:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	fa92 f2a2 	rbit	r2, r2
 8004558:	603a      	str	r2, [r7, #0]
  return result;
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	fab2 f282 	clz	r2, r2
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	40d3      	lsrs	r3, r2
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004566:	5cd3      	ldrb	r3, [r2, r3]
 8004568:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	0800845c 	.word	0x0800845c

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b092      	sub	sp, #72	; 0x48
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800458c:	2300      	movs	r3, #0
 800458e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80d4 	beq.w	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a0:	4b4e      	ldr	r3, [pc, #312]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10e      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ac:	4b4b      	ldr	r3, [pc, #300]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	4a4a      	ldr	r2, [pc, #296]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b6:	61d3      	str	r3, [r2, #28]
 80045b8:	4b48      	ldr	r3, [pc, #288]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c0:	60bb      	str	r3, [r7, #8]
 80045c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	4b45      	ldr	r3, [pc, #276]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d118      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d6:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a41      	ldr	r2, [pc, #260]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e2:	f7fd f83f 	bl	8001664 <HAL_GetTick>
 80045e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	e008      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7fd f83b 	bl	8001664 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b64      	cmp	r3, #100	; 0x64
 80045f6:	d901      	bls.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1d6      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004608:	4b34      	ldr	r3, [pc, #208]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004610:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 8084 	beq.w	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004624:	429a      	cmp	r2, r3
 8004626:	d07c      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004628:	4b2c      	ldr	r3, [pc, #176]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	461a      	mov	r2, r3
 8004652:	2301      	movs	r3, #1
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800465a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	461a      	mov	r2, r3
 8004676:	2300      	movs	r3, #0
 8004678:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800467a:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d04b      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fc ffeb 	bl	8001664 <HAL_GetTick>
 800468e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	e00a      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fc ffe7 	bl	8001664 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e180      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80046a8:	2302      	movs	r3, #2
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
 80046b4:	2302      	movs	r3, #2
 80046b6:	623b      	str	r3, [r7, #32]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	61fb      	str	r3, [r7, #28]
  return result;
 80046c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d108      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046d6:	4b01      	ldr	r3, [pc, #4]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	e00d      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40007000 	.word	0x40007000
 80046e4:	10908100 	.word	0x10908100
 80046e8:	2302      	movs	r3, #2
 80046ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	fa93 f3a3 	rbit	r3, r3
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	4b9a      	ldr	r3, [pc, #616]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2202      	movs	r2, #2
 80046fa:	613a      	str	r2, [r7, #16]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	fa92 f2a2 	rbit	r2, r2
 8004702:	60fa      	str	r2, [r7, #12]
  return result;
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	fab2 f282 	clz	r2, r2
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	f002 021f 	and.w	r2, r2, #31
 8004716:	2101      	movs	r1, #1
 8004718:	fa01 f202 	lsl.w	r2, r1, r2
 800471c:	4013      	ands	r3, r2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0b7      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004722:	4b8f      	ldr	r3, [pc, #572]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	498c      	ldr	r1, [pc, #560]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004734:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004738:	2b01      	cmp	r3, #1
 800473a:	d105      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800473c:	4b88      	ldr	r3, [pc, #544]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	4a87      	ldr	r2, [pc, #540]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004746:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004754:	4b82      	ldr	r3, [pc, #520]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	f023 0203 	bic.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	497f      	ldr	r1, [pc, #508]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004762:	4313      	orrs	r3, r2
 8004764:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004772:	4b7b      	ldr	r3, [pc, #492]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4978      	ldr	r1, [pc, #480]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004790:	4b73      	ldr	r3, [pc, #460]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	4970      	ldr	r1, [pc, #448]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047ae:	4b6c      	ldr	r3, [pc, #432]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f023 0210 	bic.w	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4969      	ldr	r1, [pc, #420]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047cc:	4b64      	ldr	r3, [pc, #400]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	4961      	ldr	r1, [pc, #388]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ea:	4b5d      	ldr	r3, [pc, #372]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	f023 0220 	bic.w	r2, r3, #32
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	495a      	ldr	r1, [pc, #360]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004808:	4b55      	ldr	r3, [pc, #340]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	4952      	ldr	r1, [pc, #328]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004826:	4b4e      	ldr	r3, [pc, #312]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	494b      	ldr	r1, [pc, #300]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004834:	4313      	orrs	r3, r2
 8004836:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004844:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	4943      	ldr	r1, [pc, #268]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	493c      	ldr	r1, [pc, #240]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004880:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	4934      	ldr	r1, [pc, #208]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	492d      	ldr	r1, [pc, #180]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048bc:	4b28      	ldr	r3, [pc, #160]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c8:	4925      	ldr	r1, [pc, #148]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80048da:	4b21      	ldr	r3, [pc, #132]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	491e      	ldr	r1, [pc, #120]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	4916      	ldr	r1, [pc, #88]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004906:	4313      	orrs	r3, r2
 8004908:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	490f      	ldr	r1, [pc, #60]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004924:	4313      	orrs	r3, r2
 8004926:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004940:	4907      	ldr	r1, [pc, #28]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00c      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004952:	4b03      	ldr	r3, [pc, #12]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	e002      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004966:	4913      	ldr	r1, [pc, #76]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004968:	4313      	orrs	r3, r2
 800496a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004978:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	490b      	ldr	r1, [pc, #44]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004986:	4313      	orrs	r3, r2
 8004988:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a2:	4904      	ldr	r1, [pc, #16]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3748      	adds	r7, #72	; 0x48
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40021000 	.word	0x40021000

080049b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e049      	b.n	8004a5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fc fc30 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f000 f968 	bl	8004ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e047      	b.n	8004b10 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a23      	ldr	r2, [pc, #140]	; (8004b1c <HAL_TIM_Base_Start+0xb4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01d      	beq.n	8004ace <HAL_TIM_Base_Start+0x66>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9a:	d018      	beq.n	8004ace <HAL_TIM_Base_Start+0x66>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <HAL_TIM_Base_Start+0xb8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_TIM_Base_Start+0x66>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <HAL_TIM_Base_Start+0xbc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_TIM_Base_Start+0x66>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <HAL_TIM_Base_Start+0xc0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_TIM_Base_Start+0x66>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <HAL_TIM_Base_Start+0xc4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_TIM_Base_Start+0x66>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a19      	ldr	r2, [pc, #100]	; (8004b30 <HAL_TIM_Base_Start+0xc8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d115      	bne.n	8004afa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <HAL_TIM_Base_Start+0xcc>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b06      	cmp	r3, #6
 8004ade:	d015      	beq.n	8004b0c <HAL_TIM_Base_Start+0xa4>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae6:	d011      	beq.n	8004b0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af8:	e008      	b.n	8004b0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e000      	b.n	8004b0e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40015000 	.word	0x40015000
 8004b34:	00010007 	.word	0x00010007

08004b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIM_ConfigClockSource+0x1c>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e0b6      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x18a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b90:	d03e      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0xd8>
 8004b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b96:	f200 8087 	bhi.w	8004ca8 <HAL_TIM_ConfigClockSource+0x170>
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9e:	f000 8086 	beq.w	8004cae <HAL_TIM_ConfigClockSource+0x176>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d87f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x170>
 8004ba8:	2b70      	cmp	r3, #112	; 0x70
 8004baa:	d01a      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0xaa>
 8004bac:	2b70      	cmp	r3, #112	; 0x70
 8004bae:	d87b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x170>
 8004bb0:	2b60      	cmp	r3, #96	; 0x60
 8004bb2:	d050      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0x11e>
 8004bb4:	2b60      	cmp	r3, #96	; 0x60
 8004bb6:	d877      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x170>
 8004bb8:	2b50      	cmp	r3, #80	; 0x50
 8004bba:	d03c      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xfe>
 8004bbc:	2b50      	cmp	r3, #80	; 0x50
 8004bbe:	d873      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x170>
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d058      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x13e>
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d86f      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x170>
 8004bc8:	2b30      	cmp	r3, #48	; 0x30
 8004bca:	d064      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15e>
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d86b      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x170>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d060      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15e>
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d867      	bhi.n	8004ca8 <HAL_TIM_ConfigClockSource+0x170>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05c      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15e>
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d05a      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x15e>
 8004be0:	e062      	b.n	8004ca8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6899      	ldr	r1, [r3, #8]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f000 f983 	bl	8004efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	609a      	str	r2, [r3, #8]
      break;
 8004c0e:	e04f      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f000 f96c 	bl	8004efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c32:	609a      	str	r2, [r3, #8]
      break;
 8004c34:	e03c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	461a      	mov	r2, r3
 8004c44:	f000 f8e0 	bl	8004e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2150      	movs	r1, #80	; 0x50
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f939 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c54:	e02c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 f8ff 	bl	8004e66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2160      	movs	r1, #96	; 0x60
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f929 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c74:	e01c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 f8c0 	bl	8004e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2140      	movs	r1, #64	; 0x40
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 f919 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c94:	e00c      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f000 f910 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004ca6:	e003      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a42      	ldr	r2, [pc, #264]	; (8004de8 <TIM_Base_SetConfig+0x11c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cea:	d00f      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a3f      	ldr	r2, [pc, #252]	; (8004dec <TIM_Base_SetConfig+0x120>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a3e      	ldr	r2, [pc, #248]	; (8004df0 <TIM_Base_SetConfig+0x124>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d007      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a3d      	ldr	r2, [pc, #244]	; (8004df4 <TIM_Base_SetConfig+0x128>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a3c      	ldr	r2, [pc, #240]	; (8004df8 <TIM_Base_SetConfig+0x12c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d108      	bne.n	8004d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a31      	ldr	r2, [pc, #196]	; (8004de8 <TIM_Base_SetConfig+0x11c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01f      	beq.n	8004d66 <TIM_Base_SetConfig+0x9a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2c:	d01b      	beq.n	8004d66 <TIM_Base_SetConfig+0x9a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2e      	ldr	r2, [pc, #184]	; (8004dec <TIM_Base_SetConfig+0x120>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d017      	beq.n	8004d66 <TIM_Base_SetConfig+0x9a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2d      	ldr	r2, [pc, #180]	; (8004df0 <TIM_Base_SetConfig+0x124>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <TIM_Base_SetConfig+0x9a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2c      	ldr	r2, [pc, #176]	; (8004df4 <TIM_Base_SetConfig+0x128>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00f      	beq.n	8004d66 <TIM_Base_SetConfig+0x9a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2c      	ldr	r2, [pc, #176]	; (8004dfc <TIM_Base_SetConfig+0x130>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_Base_SetConfig+0x9a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2b      	ldr	r2, [pc, #172]	; (8004e00 <TIM_Base_SetConfig+0x134>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <TIM_Base_SetConfig+0x9a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <TIM_Base_SetConfig+0x138>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_Base_SetConfig+0x9a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a25      	ldr	r2, [pc, #148]	; (8004df8 <TIM_Base_SetConfig+0x12c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d108      	bne.n	8004d78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <TIM_Base_SetConfig+0x11c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <TIM_Base_SetConfig+0x100>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <TIM_Base_SetConfig+0x128>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_Base_SetConfig+0x100>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <TIM_Base_SetConfig+0x130>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_Base_SetConfig+0x100>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <TIM_Base_SetConfig+0x134>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_Base_SetConfig+0x100>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <TIM_Base_SetConfig+0x138>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_Base_SetConfig+0x100>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a0c      	ldr	r2, [pc, #48]	; (8004df8 <TIM_Base_SetConfig+0x12c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d103      	bne.n	8004dd4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	615a      	str	r2, [r3, #20]
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40013400 	.word	0x40013400
 8004df8:	40015000 	.word	0x40015000
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800

08004e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f023 0201 	bic.w	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f023 030a 	bic.w	r3, r3, #10
 8004e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f023 0210 	bic.w	r2, r3, #16
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	031b      	lsls	r3, r3, #12
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f043 0307 	orr.w	r3, r3, #7
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	609a      	str	r2, [r3, #8]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	021a      	lsls	r2, r3, #8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	609a      	str	r2, [r3, #8]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e06d      	b.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a30      	ldr	r2, [pc, #192]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2f      	ldr	r2, [pc, #188]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d108      	bne.n	8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d018      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1a      	ldr	r2, [pc, #104]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a15      	ldr	r2, [pc, #84]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a16      	ldr	r2, [pc, #88]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a11      	ldr	r2, [pc, #68]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10c      	bne.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800500a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40013400 	.word	0x40013400
 8005044:	40015000 	.word	0x40015000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40014000 	.word	0x40014000

08005054 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e03c      	b.n	80050e0 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fc f900 	bl	8001280 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f905 	bl	80052a8 <USART_SetConfig>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e01b      	b.n	80050e0 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050b6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050c6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fa2f 	bl	800553c <USART_CheckIdleState>
 80050de:	4603      	mov	r3, r0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	f040 8096 	bne.w	8005232 <HAL_USART_Transmit+0x14a>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_USART_Transmit+0x2a>
 800510c:	88fb      	ldrh	r3, [r7, #6]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e08e      	b.n	8005234 <HAL_USART_Transmit+0x14c>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_USART_Transmit+0x3c>
 8005120:	2302      	movs	r3, #2
 8005122:	e087      	b.n	8005234 <HAL_USART_Transmit+0x14c>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2212      	movs	r2, #18
 8005136:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800513a:	f7fc fa93 	bl	8001664 <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	88fa      	ldrh	r2, [r7, #6]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005154:	d108      	bne.n	8005168 <HAL_USART_Transmit+0x80>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	e003      	b.n	8005170 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8005170:	e02b      	b.n	80051ca <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2200      	movs	r2, #0
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f85d 	bl	800523c <USART_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e053      	b.n	8005234 <HAL_USART_Transmit+0x14c>
      }
      if (ptxdata8bits == NULL)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10b      	bne.n	80051aa <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	881a      	ldrh	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800519e:	b292      	uxth	r2, r2
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	3302      	adds	r3, #2
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	e008      	b.n	80051bc <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	781a      	ldrb	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	b292      	uxth	r2, r2
 80051b4:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3301      	adds	r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ce      	bne.n	8005172 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2200      	movs	r2, #0
 80051dc:	2140      	movs	r1, #64	; 0x40
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f82c 	bl	800523c <USART_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e022      	b.n	8005234 <HAL_USART_Transmit+0x14c>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2240      	movs	r2, #64	; 0x40
 80051f4:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2208      	movs	r2, #8
 80051fc:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0208 	orr.w	r2, r2, #8
 800520c:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0210 	orr.w	r2, r2, #16
 800521c:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	e000      	b.n	8005234 <HAL_USART_Transmit+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8005232:	2302      	movs	r3, #2
  }
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800524c:	e018      	b.n	8005280 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d014      	beq.n	8005280 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005256:	f7fc fa05 	bl	8001664 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	429a      	cmp	r2, r3
 8005264:	d302      	bcc.n	800526c <USART_WaitOnFlagUntilTimeout+0x30>
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d109      	bne.n	8005280 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e00f      	b.n	80052a0 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	429a      	cmp	r2, r3
 800529c:	d0d7      	beq.n	800524e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b94      	ldr	r3, [pc, #592]	; (8005528 <USART_SetConfig+0x280>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	6979      	ldr	r1, [r7, #20]
 80052de:	430b      	orrs	r3, r1
 80052e0:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80052e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052e6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a81      	ldr	r2, [pc, #516]	; (800552c <USART_SetConfig+0x284>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d11f      	bne.n	800536a <USART_SetConfig+0xc2>
 800532a:	4b81      	ldr	r3, [pc, #516]	; (8005530 <USART_SetConfig+0x288>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b03      	cmp	r3, #3
 8005334:	d816      	bhi.n	8005364 <USART_SetConfig+0xbc>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <USART_SetConfig+0x94>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	0800534d 	.word	0x0800534d
 8005340:	08005359 	.word	0x08005359
 8005344:	0800535f 	.word	0x0800535f
 8005348:	08005353 	.word	0x08005353
 800534c:	2301      	movs	r3, #1
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e061      	b.n	8005416 <USART_SetConfig+0x16e>
 8005352:	2302      	movs	r3, #2
 8005354:	77fb      	strb	r3, [r7, #31]
 8005356:	e05e      	b.n	8005416 <USART_SetConfig+0x16e>
 8005358:	2304      	movs	r3, #4
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e05b      	b.n	8005416 <USART_SetConfig+0x16e>
 800535e:	2308      	movs	r3, #8
 8005360:	77fb      	strb	r3, [r7, #31]
 8005362:	e058      	b.n	8005416 <USART_SetConfig+0x16e>
 8005364:	2310      	movs	r3, #16
 8005366:	77fb      	strb	r3, [r7, #31]
 8005368:	e055      	b.n	8005416 <USART_SetConfig+0x16e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a71      	ldr	r2, [pc, #452]	; (8005534 <USART_SetConfig+0x28c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d124      	bne.n	80053be <USART_SetConfig+0x116>
 8005374:	4b6e      	ldr	r3, [pc, #440]	; (8005530 <USART_SetConfig+0x288>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800537c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005380:	d011      	beq.n	80053a6 <USART_SetConfig+0xfe>
 8005382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005386:	d817      	bhi.n	80053b8 <USART_SetConfig+0x110>
 8005388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538c:	d011      	beq.n	80053b2 <USART_SetConfig+0x10a>
 800538e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005392:	d811      	bhi.n	80053b8 <USART_SetConfig+0x110>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <USART_SetConfig+0xf8>
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d006      	beq.n	80053ac <USART_SetConfig+0x104>
 800539e:	e00b      	b.n	80053b8 <USART_SetConfig+0x110>
 80053a0:	2300      	movs	r3, #0
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e037      	b.n	8005416 <USART_SetConfig+0x16e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e034      	b.n	8005416 <USART_SetConfig+0x16e>
 80053ac:	2304      	movs	r3, #4
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e031      	b.n	8005416 <USART_SetConfig+0x16e>
 80053b2:	2308      	movs	r3, #8
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e02e      	b.n	8005416 <USART_SetConfig+0x16e>
 80053b8:	2310      	movs	r3, #16
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e02b      	b.n	8005416 <USART_SetConfig+0x16e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a5d      	ldr	r2, [pc, #372]	; (8005538 <USART_SetConfig+0x290>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d124      	bne.n	8005412 <USART_SetConfig+0x16a>
 80053c8:	4b59      	ldr	r3, [pc, #356]	; (8005530 <USART_SetConfig+0x288>)
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80053d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053d4:	d011      	beq.n	80053fa <USART_SetConfig+0x152>
 80053d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053da:	d817      	bhi.n	800540c <USART_SetConfig+0x164>
 80053dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053e0:	d011      	beq.n	8005406 <USART_SetConfig+0x15e>
 80053e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053e6:	d811      	bhi.n	800540c <USART_SetConfig+0x164>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <USART_SetConfig+0x14c>
 80053ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053f0:	d006      	beq.n	8005400 <USART_SetConfig+0x158>
 80053f2:	e00b      	b.n	800540c <USART_SetConfig+0x164>
 80053f4:	2300      	movs	r3, #0
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	e00d      	b.n	8005416 <USART_SetConfig+0x16e>
 80053fa:	2302      	movs	r3, #2
 80053fc:	77fb      	strb	r3, [r7, #31]
 80053fe:	e00a      	b.n	8005416 <USART_SetConfig+0x16e>
 8005400:	2304      	movs	r3, #4
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e007      	b.n	8005416 <USART_SetConfig+0x16e>
 8005406:	2308      	movs	r3, #8
 8005408:	77fb      	strb	r3, [r7, #31]
 800540a:	e004      	b.n	8005416 <USART_SetConfig+0x16e>
 800540c:	2310      	movs	r3, #16
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e001      	b.n	8005416 <USART_SetConfig+0x16e>
 8005412:	2310      	movs	r3, #16
 8005414:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8005416:	7ffb      	ldrb	r3, [r7, #31]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d85a      	bhi.n	80054d2 <USART_SetConfig+0x22a>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <USART_SetConfig+0x17c>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005449 	.word	0x08005449
 8005428:	08005467 	.word	0x08005467
 800542c:	08005485 	.word	0x08005485
 8005430:	080054d3 	.word	0x080054d3
 8005434:	0800549f 	.word	0x0800549f
 8005438:	080054d3 	.word	0x080054d3
 800543c:	080054d3 	.word	0x080054d3
 8005440:	080054d3 	.word	0x080054d3
 8005444:	080054bd 	.word	0x080054bd
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7ff f854 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 800544c:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	005a      	lsls	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	441a      	add	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	61bb      	str	r3, [r7, #24]
      break;
 8005464:	e038      	b.n	80054d8 <USART_SetConfig+0x230>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005466:	f7ff f867 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 800546a:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	005a      	lsls	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	441a      	add	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	61bb      	str	r3, [r7, #24]
      break;
 8005482:	e029      	b.n	80054d8 <USART_SetConfig+0x230>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800548e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6852      	ldr	r2, [r2, #4]
 8005496:	fbb3 f3f2 	udiv	r3, r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
      break;
 800549c:	e01c      	b.n	80054d8 <USART_SetConfig+0x230>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800549e:	f7fe ffb3 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80054a2:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	005a      	lsls	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	441a      	add	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	61bb      	str	r3, [r7, #24]
      break;
 80054ba:	e00d      	b.n	80054d8 <USART_SetConfig+0x230>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ce:	61bb      	str	r3, [r7, #24]
      break;
 80054d0:	e002      	b.n	80054d8 <USART_SetConfig+0x230>
    default:
      ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	77bb      	strb	r3, [r7, #30]
      break;
 80054d6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b0f      	cmp	r3, #15
 80054dc:	d916      	bls.n	800550c <USART_SetConfig+0x264>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e4:	d212      	bcs.n	800550c <USART_SetConfig+0x264>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f023 030f 	bic.w	r3, r3, #15
 80054ee:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	89fb      	ldrh	r3, [r7, #14]
 80054fe:	4313      	orrs	r3, r2
 8005500:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	89fa      	ldrh	r2, [r7, #14]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	e001      	b.n	8005510 <USART_SetConfig+0x268>
  }
  else
  {
    ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 800551c:	7fbb      	ldrb	r3, [r7, #30]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	efff69f3 	.word	0xefff69f3
 800552c:	40013800 	.word	0x40013800
 8005530:	40021000 	.word	0x40021000
 8005534:	40004400 	.word	0x40004400
 8005538:	40004800 	.word	0x40004800

0800553c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af02      	add	r7, sp, #8
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800554a:	f7fc f88b 	bl	8001664 <HAL_GetTick>
 800554e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b08      	cmp	r3, #8
 800555c:	d10e      	bne.n	800557c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800555e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff fe65 	bl	800523c <USART_WaitOnFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e01e      	b.n	80055ba <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b04      	cmp	r3, #4
 8005588:	d10e      	bne.n	80055a8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800558a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fe4f 	bl	800523c <USART_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e008      	b.n	80055ba <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <__errno>:
 80055c4:	4b01      	ldr	r3, [pc, #4]	; (80055cc <__errno+0x8>)
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	2000000c 	.word	0x2000000c

080055d0 <__libc_init_array>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	4d0d      	ldr	r5, [pc, #52]	; (8005608 <__libc_init_array+0x38>)
 80055d4:	4c0d      	ldr	r4, [pc, #52]	; (800560c <__libc_init_array+0x3c>)
 80055d6:	1b64      	subs	r4, r4, r5
 80055d8:	10a4      	asrs	r4, r4, #2
 80055da:	2600      	movs	r6, #0
 80055dc:	42a6      	cmp	r6, r4
 80055de:	d109      	bne.n	80055f4 <__libc_init_array+0x24>
 80055e0:	4d0b      	ldr	r5, [pc, #44]	; (8005610 <__libc_init_array+0x40>)
 80055e2:	4c0c      	ldr	r4, [pc, #48]	; (8005614 <__libc_init_array+0x44>)
 80055e4:	f002 ff18 	bl	8008418 <_init>
 80055e8:	1b64      	subs	r4, r4, r5
 80055ea:	10a4      	asrs	r4, r4, #2
 80055ec:	2600      	movs	r6, #0
 80055ee:	42a6      	cmp	r6, r4
 80055f0:	d105      	bne.n	80055fe <__libc_init_array+0x2e>
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f8:	4798      	blx	r3
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7ee      	b.n	80055dc <__libc_init_array+0xc>
 80055fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005602:	4798      	blx	r3
 8005604:	3601      	adds	r6, #1
 8005606:	e7f2      	b.n	80055ee <__libc_init_array+0x1e>
 8005608:	0800885c 	.word	0x0800885c
 800560c:	0800885c 	.word	0x0800885c
 8005610:	0800885c 	.word	0x0800885c
 8005614:	08008860 	.word	0x08008860

08005618 <memset>:
 8005618:	4402      	add	r2, r0
 800561a:	4603      	mov	r3, r0
 800561c:	4293      	cmp	r3, r2
 800561e:	d100      	bne.n	8005622 <memset+0xa>
 8005620:	4770      	bx	lr
 8005622:	f803 1b01 	strb.w	r1, [r3], #1
 8005626:	e7f9      	b.n	800561c <memset+0x4>

08005628 <__cvt>:
 8005628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	ec55 4b10 	vmov	r4, r5, d0
 8005630:	2d00      	cmp	r5, #0
 8005632:	460e      	mov	r6, r1
 8005634:	4619      	mov	r1, r3
 8005636:	462b      	mov	r3, r5
 8005638:	bfbb      	ittet	lt
 800563a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800563e:	461d      	movlt	r5, r3
 8005640:	2300      	movge	r3, #0
 8005642:	232d      	movlt	r3, #45	; 0x2d
 8005644:	700b      	strb	r3, [r1, #0]
 8005646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005648:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800564c:	4691      	mov	r9, r2
 800564e:	f023 0820 	bic.w	r8, r3, #32
 8005652:	bfbc      	itt	lt
 8005654:	4622      	movlt	r2, r4
 8005656:	4614      	movlt	r4, r2
 8005658:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800565c:	d005      	beq.n	800566a <__cvt+0x42>
 800565e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005662:	d100      	bne.n	8005666 <__cvt+0x3e>
 8005664:	3601      	adds	r6, #1
 8005666:	2102      	movs	r1, #2
 8005668:	e000      	b.n	800566c <__cvt+0x44>
 800566a:	2103      	movs	r1, #3
 800566c:	ab03      	add	r3, sp, #12
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	ab02      	add	r3, sp, #8
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	ec45 4b10 	vmov	d0, r4, r5
 8005678:	4653      	mov	r3, sl
 800567a:	4632      	mov	r2, r6
 800567c:	f000 fd00 	bl	8006080 <_dtoa_r>
 8005680:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005684:	4607      	mov	r7, r0
 8005686:	d102      	bne.n	800568e <__cvt+0x66>
 8005688:	f019 0f01 	tst.w	r9, #1
 800568c:	d022      	beq.n	80056d4 <__cvt+0xac>
 800568e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005692:	eb07 0906 	add.w	r9, r7, r6
 8005696:	d110      	bne.n	80056ba <__cvt+0x92>
 8005698:	783b      	ldrb	r3, [r7, #0]
 800569a:	2b30      	cmp	r3, #48	; 0x30
 800569c:	d10a      	bne.n	80056b4 <__cvt+0x8c>
 800569e:	2200      	movs	r2, #0
 80056a0:	2300      	movs	r3, #0
 80056a2:	4620      	mov	r0, r4
 80056a4:	4629      	mov	r1, r5
 80056a6:	f7fb fa17 	bl	8000ad8 <__aeabi_dcmpeq>
 80056aa:	b918      	cbnz	r0, 80056b4 <__cvt+0x8c>
 80056ac:	f1c6 0601 	rsb	r6, r6, #1
 80056b0:	f8ca 6000 	str.w	r6, [sl]
 80056b4:	f8da 3000 	ldr.w	r3, [sl]
 80056b8:	4499      	add	r9, r3
 80056ba:	2200      	movs	r2, #0
 80056bc:	2300      	movs	r3, #0
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7fb fa09 	bl	8000ad8 <__aeabi_dcmpeq>
 80056c6:	b108      	cbz	r0, 80056cc <__cvt+0xa4>
 80056c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80056cc:	2230      	movs	r2, #48	; 0x30
 80056ce:	9b03      	ldr	r3, [sp, #12]
 80056d0:	454b      	cmp	r3, r9
 80056d2:	d307      	bcc.n	80056e4 <__cvt+0xbc>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056d8:	1bdb      	subs	r3, r3, r7
 80056da:	4638      	mov	r0, r7
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	b004      	add	sp, #16
 80056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e4:	1c59      	adds	r1, r3, #1
 80056e6:	9103      	str	r1, [sp, #12]
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e7f0      	b.n	80056ce <__cvt+0xa6>

080056ec <__exponent>:
 80056ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ee:	4603      	mov	r3, r0
 80056f0:	2900      	cmp	r1, #0
 80056f2:	bfb8      	it	lt
 80056f4:	4249      	neglt	r1, r1
 80056f6:	f803 2b02 	strb.w	r2, [r3], #2
 80056fa:	bfb4      	ite	lt
 80056fc:	222d      	movlt	r2, #45	; 0x2d
 80056fe:	222b      	movge	r2, #43	; 0x2b
 8005700:	2909      	cmp	r1, #9
 8005702:	7042      	strb	r2, [r0, #1]
 8005704:	dd2a      	ble.n	800575c <__exponent+0x70>
 8005706:	f10d 0407 	add.w	r4, sp, #7
 800570a:	46a4      	mov	ip, r4
 800570c:	270a      	movs	r7, #10
 800570e:	46a6      	mov	lr, r4
 8005710:	460a      	mov	r2, r1
 8005712:	fb91 f6f7 	sdiv	r6, r1, r7
 8005716:	fb07 1516 	mls	r5, r7, r6, r1
 800571a:	3530      	adds	r5, #48	; 0x30
 800571c:	2a63      	cmp	r2, #99	; 0x63
 800571e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005722:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005726:	4631      	mov	r1, r6
 8005728:	dcf1      	bgt.n	800570e <__exponent+0x22>
 800572a:	3130      	adds	r1, #48	; 0x30
 800572c:	f1ae 0502 	sub.w	r5, lr, #2
 8005730:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005734:	1c44      	adds	r4, r0, #1
 8005736:	4629      	mov	r1, r5
 8005738:	4561      	cmp	r1, ip
 800573a:	d30a      	bcc.n	8005752 <__exponent+0x66>
 800573c:	f10d 0209 	add.w	r2, sp, #9
 8005740:	eba2 020e 	sub.w	r2, r2, lr
 8005744:	4565      	cmp	r5, ip
 8005746:	bf88      	it	hi
 8005748:	2200      	movhi	r2, #0
 800574a:	4413      	add	r3, r2
 800574c:	1a18      	subs	r0, r3, r0
 800574e:	b003      	add	sp, #12
 8005750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005756:	f804 2f01 	strb.w	r2, [r4, #1]!
 800575a:	e7ed      	b.n	8005738 <__exponent+0x4c>
 800575c:	2330      	movs	r3, #48	; 0x30
 800575e:	3130      	adds	r1, #48	; 0x30
 8005760:	7083      	strb	r3, [r0, #2]
 8005762:	70c1      	strb	r1, [r0, #3]
 8005764:	1d03      	adds	r3, r0, #4
 8005766:	e7f1      	b.n	800574c <__exponent+0x60>

08005768 <_printf_float>:
 8005768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576c:	ed2d 8b02 	vpush	{d8}
 8005770:	b08d      	sub	sp, #52	; 0x34
 8005772:	460c      	mov	r4, r1
 8005774:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005778:	4616      	mov	r6, r2
 800577a:	461f      	mov	r7, r3
 800577c:	4605      	mov	r5, r0
 800577e:	f001 fa6d 	bl	8006c5c <_localeconv_r>
 8005782:	f8d0 a000 	ldr.w	sl, [r0]
 8005786:	4650      	mov	r0, sl
 8005788:	f7fa fd2a 	bl	80001e0 <strlen>
 800578c:	2300      	movs	r3, #0
 800578e:	930a      	str	r3, [sp, #40]	; 0x28
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	9305      	str	r3, [sp, #20]
 8005794:	f8d8 3000 	ldr.w	r3, [r8]
 8005798:	f894 b018 	ldrb.w	fp, [r4, #24]
 800579c:	3307      	adds	r3, #7
 800579e:	f023 0307 	bic.w	r3, r3, #7
 80057a2:	f103 0208 	add.w	r2, r3, #8
 80057a6:	f8c8 2000 	str.w	r2, [r8]
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057ba:	9307      	str	r3, [sp, #28]
 80057bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80057c0:	ee08 0a10 	vmov	s16, r0
 80057c4:	4b9f      	ldr	r3, [pc, #636]	; (8005a44 <_printf_float+0x2dc>)
 80057c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295
 80057ce:	f7fb f9b5 	bl	8000b3c <__aeabi_dcmpun>
 80057d2:	bb88      	cbnz	r0, 8005838 <_printf_float+0xd0>
 80057d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057d8:	4b9a      	ldr	r3, [pc, #616]	; (8005a44 <_printf_float+0x2dc>)
 80057da:	f04f 32ff 	mov.w	r2, #4294967295
 80057de:	f7fb f98f 	bl	8000b00 <__aeabi_dcmple>
 80057e2:	bb48      	cbnz	r0, 8005838 <_printf_float+0xd0>
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	4640      	mov	r0, r8
 80057ea:	4649      	mov	r1, r9
 80057ec:	f7fb f97e 	bl	8000aec <__aeabi_dcmplt>
 80057f0:	b110      	cbz	r0, 80057f8 <_printf_float+0x90>
 80057f2:	232d      	movs	r3, #45	; 0x2d
 80057f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f8:	4b93      	ldr	r3, [pc, #588]	; (8005a48 <_printf_float+0x2e0>)
 80057fa:	4894      	ldr	r0, [pc, #592]	; (8005a4c <_printf_float+0x2e4>)
 80057fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005800:	bf94      	ite	ls
 8005802:	4698      	movls	r8, r3
 8005804:	4680      	movhi	r8, r0
 8005806:	2303      	movs	r3, #3
 8005808:	6123      	str	r3, [r4, #16]
 800580a:	9b05      	ldr	r3, [sp, #20]
 800580c:	f023 0204 	bic.w	r2, r3, #4
 8005810:	6022      	str	r2, [r4, #0]
 8005812:	f04f 0900 	mov.w	r9, #0
 8005816:	9700      	str	r7, [sp, #0]
 8005818:	4633      	mov	r3, r6
 800581a:	aa0b      	add	r2, sp, #44	; 0x2c
 800581c:	4621      	mov	r1, r4
 800581e:	4628      	mov	r0, r5
 8005820:	f000 f9d8 	bl	8005bd4 <_printf_common>
 8005824:	3001      	adds	r0, #1
 8005826:	f040 8090 	bne.w	800594a <_printf_float+0x1e2>
 800582a:	f04f 30ff 	mov.w	r0, #4294967295
 800582e:	b00d      	add	sp, #52	; 0x34
 8005830:	ecbd 8b02 	vpop	{d8}
 8005834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005838:	4642      	mov	r2, r8
 800583a:	464b      	mov	r3, r9
 800583c:	4640      	mov	r0, r8
 800583e:	4649      	mov	r1, r9
 8005840:	f7fb f97c 	bl	8000b3c <__aeabi_dcmpun>
 8005844:	b140      	cbz	r0, 8005858 <_printf_float+0xf0>
 8005846:	464b      	mov	r3, r9
 8005848:	2b00      	cmp	r3, #0
 800584a:	bfbc      	itt	lt
 800584c:	232d      	movlt	r3, #45	; 0x2d
 800584e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005852:	487f      	ldr	r0, [pc, #508]	; (8005a50 <_printf_float+0x2e8>)
 8005854:	4b7f      	ldr	r3, [pc, #508]	; (8005a54 <_printf_float+0x2ec>)
 8005856:	e7d1      	b.n	80057fc <_printf_float+0x94>
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800585e:	9206      	str	r2, [sp, #24]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	d13f      	bne.n	80058e4 <_printf_float+0x17c>
 8005864:	2306      	movs	r3, #6
 8005866:	6063      	str	r3, [r4, #4]
 8005868:	9b05      	ldr	r3, [sp, #20]
 800586a:	6861      	ldr	r1, [r4, #4]
 800586c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005870:	2300      	movs	r3, #0
 8005872:	9303      	str	r3, [sp, #12]
 8005874:	ab0a      	add	r3, sp, #40	; 0x28
 8005876:	e9cd b301 	strd	fp, r3, [sp, #4]
 800587a:	ab09      	add	r3, sp, #36	; 0x24
 800587c:	ec49 8b10 	vmov	d0, r8, r9
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	6022      	str	r2, [r4, #0]
 8005884:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005888:	4628      	mov	r0, r5
 800588a:	f7ff fecd 	bl	8005628 <__cvt>
 800588e:	9b06      	ldr	r3, [sp, #24]
 8005890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005892:	2b47      	cmp	r3, #71	; 0x47
 8005894:	4680      	mov	r8, r0
 8005896:	d108      	bne.n	80058aa <_printf_float+0x142>
 8005898:	1cc8      	adds	r0, r1, #3
 800589a:	db02      	blt.n	80058a2 <_printf_float+0x13a>
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	4299      	cmp	r1, r3
 80058a0:	dd41      	ble.n	8005926 <_printf_float+0x1be>
 80058a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80058a6:	fa5f fb8b 	uxtb.w	fp, fp
 80058aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058ae:	d820      	bhi.n	80058f2 <_printf_float+0x18a>
 80058b0:	3901      	subs	r1, #1
 80058b2:	465a      	mov	r2, fp
 80058b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058b8:	9109      	str	r1, [sp, #36]	; 0x24
 80058ba:	f7ff ff17 	bl	80056ec <__exponent>
 80058be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c0:	1813      	adds	r3, r2, r0
 80058c2:	2a01      	cmp	r2, #1
 80058c4:	4681      	mov	r9, r0
 80058c6:	6123      	str	r3, [r4, #16]
 80058c8:	dc02      	bgt.n	80058d0 <_printf_float+0x168>
 80058ca:	6822      	ldr	r2, [r4, #0]
 80058cc:	07d2      	lsls	r2, r2, #31
 80058ce:	d501      	bpl.n	80058d4 <_printf_float+0x16c>
 80058d0:	3301      	adds	r3, #1
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d09c      	beq.n	8005816 <_printf_float+0xae>
 80058dc:	232d      	movs	r3, #45	; 0x2d
 80058de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e2:	e798      	b.n	8005816 <_printf_float+0xae>
 80058e4:	9a06      	ldr	r2, [sp, #24]
 80058e6:	2a47      	cmp	r2, #71	; 0x47
 80058e8:	d1be      	bne.n	8005868 <_printf_float+0x100>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1bc      	bne.n	8005868 <_printf_float+0x100>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e7b9      	b.n	8005866 <_printf_float+0xfe>
 80058f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058f6:	d118      	bne.n	800592a <_printf_float+0x1c2>
 80058f8:	2900      	cmp	r1, #0
 80058fa:	6863      	ldr	r3, [r4, #4]
 80058fc:	dd0b      	ble.n	8005916 <_printf_float+0x1ae>
 80058fe:	6121      	str	r1, [r4, #16]
 8005900:	b913      	cbnz	r3, 8005908 <_printf_float+0x1a0>
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	07d0      	lsls	r0, r2, #31
 8005906:	d502      	bpl.n	800590e <_printf_float+0x1a6>
 8005908:	3301      	adds	r3, #1
 800590a:	440b      	add	r3, r1
 800590c:	6123      	str	r3, [r4, #16]
 800590e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005910:	f04f 0900 	mov.w	r9, #0
 8005914:	e7de      	b.n	80058d4 <_printf_float+0x16c>
 8005916:	b913      	cbnz	r3, 800591e <_printf_float+0x1b6>
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	07d2      	lsls	r2, r2, #31
 800591c:	d501      	bpl.n	8005922 <_printf_float+0x1ba>
 800591e:	3302      	adds	r3, #2
 8005920:	e7f4      	b.n	800590c <_printf_float+0x1a4>
 8005922:	2301      	movs	r3, #1
 8005924:	e7f2      	b.n	800590c <_printf_float+0x1a4>
 8005926:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800592a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800592c:	4299      	cmp	r1, r3
 800592e:	db05      	blt.n	800593c <_printf_float+0x1d4>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	6121      	str	r1, [r4, #16]
 8005934:	07d8      	lsls	r0, r3, #31
 8005936:	d5ea      	bpl.n	800590e <_printf_float+0x1a6>
 8005938:	1c4b      	adds	r3, r1, #1
 800593a:	e7e7      	b.n	800590c <_printf_float+0x1a4>
 800593c:	2900      	cmp	r1, #0
 800593e:	bfd4      	ite	le
 8005940:	f1c1 0202 	rsble	r2, r1, #2
 8005944:	2201      	movgt	r2, #1
 8005946:	4413      	add	r3, r2
 8005948:	e7e0      	b.n	800590c <_printf_float+0x1a4>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	055a      	lsls	r2, r3, #21
 800594e:	d407      	bmi.n	8005960 <_printf_float+0x1f8>
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	4642      	mov	r2, r8
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	d12c      	bne.n	80059b8 <_printf_float+0x250>
 800595e:	e764      	b.n	800582a <_printf_float+0xc2>
 8005960:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005964:	f240 80e0 	bls.w	8005b28 <_printf_float+0x3c0>
 8005968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	f7fb f8b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005974:	2800      	cmp	r0, #0
 8005976:	d034      	beq.n	80059e2 <_printf_float+0x27a>
 8005978:	4a37      	ldr	r2, [pc, #220]	; (8005a58 <_printf_float+0x2f0>)
 800597a:	2301      	movs	r3, #1
 800597c:	4631      	mov	r1, r6
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	f43f af51 	beq.w	800582a <_printf_float+0xc2>
 8005988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800598c:	429a      	cmp	r2, r3
 800598e:	db02      	blt.n	8005996 <_printf_float+0x22e>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	07d8      	lsls	r0, r3, #31
 8005994:	d510      	bpl.n	80059b8 <_printf_float+0x250>
 8005996:	ee18 3a10 	vmov	r3, s16
 800599a:	4652      	mov	r2, sl
 800599c:	4631      	mov	r1, r6
 800599e:	4628      	mov	r0, r5
 80059a0:	47b8      	blx	r7
 80059a2:	3001      	adds	r0, #1
 80059a4:	f43f af41 	beq.w	800582a <_printf_float+0xc2>
 80059a8:	f04f 0800 	mov.w	r8, #0
 80059ac:	f104 091a 	add.w	r9, r4, #26
 80059b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b2:	3b01      	subs	r3, #1
 80059b4:	4543      	cmp	r3, r8
 80059b6:	dc09      	bgt.n	80059cc <_printf_float+0x264>
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	079b      	lsls	r3, r3, #30
 80059bc:	f100 8105 	bmi.w	8005bca <_printf_float+0x462>
 80059c0:	68e0      	ldr	r0, [r4, #12]
 80059c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059c4:	4298      	cmp	r0, r3
 80059c6:	bfb8      	it	lt
 80059c8:	4618      	movlt	r0, r3
 80059ca:	e730      	b.n	800582e <_printf_float+0xc6>
 80059cc:	2301      	movs	r3, #1
 80059ce:	464a      	mov	r2, r9
 80059d0:	4631      	mov	r1, r6
 80059d2:	4628      	mov	r0, r5
 80059d4:	47b8      	blx	r7
 80059d6:	3001      	adds	r0, #1
 80059d8:	f43f af27 	beq.w	800582a <_printf_float+0xc2>
 80059dc:	f108 0801 	add.w	r8, r8, #1
 80059e0:	e7e6      	b.n	80059b0 <_printf_float+0x248>
 80059e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dc39      	bgt.n	8005a5c <_printf_float+0x2f4>
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <_printf_float+0x2f0>)
 80059ea:	2301      	movs	r3, #1
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f af19 	beq.w	800582a <_printf_float+0xc2>
 80059f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059fc:	4313      	orrs	r3, r2
 80059fe:	d102      	bne.n	8005a06 <_printf_float+0x29e>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	07d9      	lsls	r1, r3, #31
 8005a04:	d5d8      	bpl.n	80059b8 <_printf_float+0x250>
 8005a06:	ee18 3a10 	vmov	r3, s16
 8005a0a:	4652      	mov	r2, sl
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4628      	mov	r0, r5
 8005a10:	47b8      	blx	r7
 8005a12:	3001      	adds	r0, #1
 8005a14:	f43f af09 	beq.w	800582a <_printf_float+0xc2>
 8005a18:	f04f 0900 	mov.w	r9, #0
 8005a1c:	f104 0a1a 	add.w	sl, r4, #26
 8005a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a22:	425b      	negs	r3, r3
 8005a24:	454b      	cmp	r3, r9
 8005a26:	dc01      	bgt.n	8005a2c <_printf_float+0x2c4>
 8005a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a2a:	e792      	b.n	8005952 <_printf_float+0x1ea>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f aef7 	beq.w	800582a <_printf_float+0xc2>
 8005a3c:	f109 0901 	add.w	r9, r9, #1
 8005a40:	e7ee      	b.n	8005a20 <_printf_float+0x2b8>
 8005a42:	bf00      	nop
 8005a44:	7fefffff 	.word	0x7fefffff
 8005a48:	08008488 	.word	0x08008488
 8005a4c:	0800848c 	.word	0x0800848c
 8005a50:	08008494 	.word	0x08008494
 8005a54:	08008490 	.word	0x08008490
 8005a58:	08008498 	.word	0x08008498
 8005a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a60:	429a      	cmp	r2, r3
 8005a62:	bfa8      	it	ge
 8005a64:	461a      	movge	r2, r3
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	4691      	mov	r9, r2
 8005a6a:	dc37      	bgt.n	8005adc <_printf_float+0x374>
 8005a6c:	f04f 0b00 	mov.w	fp, #0
 8005a70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a74:	f104 021a 	add.w	r2, r4, #26
 8005a78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	eba3 0309 	sub.w	r3, r3, r9
 8005a80:	455b      	cmp	r3, fp
 8005a82:	dc33      	bgt.n	8005aec <_printf_float+0x384>
 8005a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	db3b      	blt.n	8005b04 <_printf_float+0x39c>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	07da      	lsls	r2, r3, #31
 8005a90:	d438      	bmi.n	8005b04 <_printf_float+0x39c>
 8005a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a94:	9a05      	ldr	r2, [sp, #20]
 8005a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a98:	1a9a      	subs	r2, r3, r2
 8005a9a:	eba3 0901 	sub.w	r9, r3, r1
 8005a9e:	4591      	cmp	r9, r2
 8005aa0:	bfa8      	it	ge
 8005aa2:	4691      	movge	r9, r2
 8005aa4:	f1b9 0f00 	cmp.w	r9, #0
 8005aa8:	dc35      	bgt.n	8005b16 <_printf_float+0x3ae>
 8005aaa:	f04f 0800 	mov.w	r8, #0
 8005aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ab2:	f104 0a1a 	add.w	sl, r4, #26
 8005ab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	eba3 0309 	sub.w	r3, r3, r9
 8005ac0:	4543      	cmp	r3, r8
 8005ac2:	f77f af79 	ble.w	80059b8 <_printf_float+0x250>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	4652      	mov	r2, sl
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f43f aeaa 	beq.w	800582a <_printf_float+0xc2>
 8005ad6:	f108 0801 	add.w	r8, r8, #1
 8005ada:	e7ec      	b.n	8005ab6 <_printf_float+0x34e>
 8005adc:	4613      	mov	r3, r2
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	47b8      	blx	r7
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d1c0      	bne.n	8005a6c <_printf_float+0x304>
 8005aea:	e69e      	b.n	800582a <_printf_float+0xc2>
 8005aec:	2301      	movs	r3, #1
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	9205      	str	r2, [sp, #20]
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	f43f ae97 	beq.w	800582a <_printf_float+0xc2>
 8005afc:	9a05      	ldr	r2, [sp, #20]
 8005afe:	f10b 0b01 	add.w	fp, fp, #1
 8005b02:	e7b9      	b.n	8005a78 <_printf_float+0x310>
 8005b04:	ee18 3a10 	vmov	r3, s16
 8005b08:	4652      	mov	r2, sl
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	d1be      	bne.n	8005a92 <_printf_float+0x32a>
 8005b14:	e689      	b.n	800582a <_printf_float+0xc2>
 8005b16:	9a05      	ldr	r2, [sp, #20]
 8005b18:	464b      	mov	r3, r9
 8005b1a:	4442      	add	r2, r8
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b8      	blx	r7
 8005b22:	3001      	adds	r0, #1
 8005b24:	d1c1      	bne.n	8005aaa <_printf_float+0x342>
 8005b26:	e680      	b.n	800582a <_printf_float+0xc2>
 8005b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b2a:	2a01      	cmp	r2, #1
 8005b2c:	dc01      	bgt.n	8005b32 <_printf_float+0x3ca>
 8005b2e:	07db      	lsls	r3, r3, #31
 8005b30:	d538      	bpl.n	8005ba4 <_printf_float+0x43c>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4642      	mov	r2, r8
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f43f ae74 	beq.w	800582a <_printf_float+0xc2>
 8005b42:	ee18 3a10 	vmov	r3, s16
 8005b46:	4652      	mov	r2, sl
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b8      	blx	r7
 8005b4e:	3001      	adds	r0, #1
 8005b50:	f43f ae6b 	beq.w	800582a <_printf_float+0xc2>
 8005b54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f7fa ffbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b60:	b9d8      	cbnz	r0, 8005b9a <_printf_float+0x432>
 8005b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b64:	f108 0201 	add.w	r2, r8, #1
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	d10e      	bne.n	8005b92 <_printf_float+0x42a>
 8005b74:	e659      	b.n	800582a <_printf_float+0xc2>
 8005b76:	2301      	movs	r3, #1
 8005b78:	4652      	mov	r2, sl
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b8      	blx	r7
 8005b80:	3001      	adds	r0, #1
 8005b82:	f43f ae52 	beq.w	800582a <_printf_float+0xc2>
 8005b86:	f108 0801 	add.w	r8, r8, #1
 8005b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	4543      	cmp	r3, r8
 8005b90:	dcf1      	bgt.n	8005b76 <_printf_float+0x40e>
 8005b92:	464b      	mov	r3, r9
 8005b94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b98:	e6dc      	b.n	8005954 <_printf_float+0x1ec>
 8005b9a:	f04f 0800 	mov.w	r8, #0
 8005b9e:	f104 0a1a 	add.w	sl, r4, #26
 8005ba2:	e7f2      	b.n	8005b8a <_printf_float+0x422>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4642      	mov	r2, r8
 8005ba8:	e7df      	b.n	8005b6a <_printf_float+0x402>
 8005baa:	2301      	movs	r3, #1
 8005bac:	464a      	mov	r2, r9
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae38 	beq.w	800582a <_printf_float+0xc2>
 8005bba:	f108 0801 	add.w	r8, r8, #1
 8005bbe:	68e3      	ldr	r3, [r4, #12]
 8005bc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bc2:	1a5b      	subs	r3, r3, r1
 8005bc4:	4543      	cmp	r3, r8
 8005bc6:	dcf0      	bgt.n	8005baa <_printf_float+0x442>
 8005bc8:	e6fa      	b.n	80059c0 <_printf_float+0x258>
 8005bca:	f04f 0800 	mov.w	r8, #0
 8005bce:	f104 0919 	add.w	r9, r4, #25
 8005bd2:	e7f4      	b.n	8005bbe <_printf_float+0x456>

08005bd4 <_printf_common>:
 8005bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd8:	4616      	mov	r6, r2
 8005bda:	4699      	mov	r9, r3
 8005bdc:	688a      	ldr	r2, [r1, #8]
 8005bde:	690b      	ldr	r3, [r1, #16]
 8005be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005be4:	4293      	cmp	r3, r2
 8005be6:	bfb8      	it	lt
 8005be8:	4613      	movlt	r3, r2
 8005bea:	6033      	str	r3, [r6, #0]
 8005bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bf0:	4607      	mov	r7, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	b10a      	cbz	r2, 8005bfa <_printf_common+0x26>
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	6033      	str	r3, [r6, #0]
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	0699      	lsls	r1, r3, #26
 8005bfe:	bf42      	ittt	mi
 8005c00:	6833      	ldrmi	r3, [r6, #0]
 8005c02:	3302      	addmi	r3, #2
 8005c04:	6033      	strmi	r3, [r6, #0]
 8005c06:	6825      	ldr	r5, [r4, #0]
 8005c08:	f015 0506 	ands.w	r5, r5, #6
 8005c0c:	d106      	bne.n	8005c1c <_printf_common+0x48>
 8005c0e:	f104 0a19 	add.w	sl, r4, #25
 8005c12:	68e3      	ldr	r3, [r4, #12]
 8005c14:	6832      	ldr	r2, [r6, #0]
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	dc26      	bgt.n	8005c6a <_printf_common+0x96>
 8005c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c20:	1e13      	subs	r3, r2, #0
 8005c22:	6822      	ldr	r2, [r4, #0]
 8005c24:	bf18      	it	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	0692      	lsls	r2, r2, #26
 8005c2a:	d42b      	bmi.n	8005c84 <_printf_common+0xb0>
 8005c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c30:	4649      	mov	r1, r9
 8005c32:	4638      	mov	r0, r7
 8005c34:	47c0      	blx	r8
 8005c36:	3001      	adds	r0, #1
 8005c38:	d01e      	beq.n	8005c78 <_printf_common+0xa4>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	68e5      	ldr	r5, [r4, #12]
 8005c3e:	6832      	ldr	r2, [r6, #0]
 8005c40:	f003 0306 	and.w	r3, r3, #6
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	bf08      	it	eq
 8005c48:	1aad      	subeq	r5, r5, r2
 8005c4a:	68a3      	ldr	r3, [r4, #8]
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	bf0c      	ite	eq
 8005c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c54:	2500      	movne	r5, #0
 8005c56:	4293      	cmp	r3, r2
 8005c58:	bfc4      	itt	gt
 8005c5a:	1a9b      	subgt	r3, r3, r2
 8005c5c:	18ed      	addgt	r5, r5, r3
 8005c5e:	2600      	movs	r6, #0
 8005c60:	341a      	adds	r4, #26
 8005c62:	42b5      	cmp	r5, r6
 8005c64:	d11a      	bne.n	8005c9c <_printf_common+0xc8>
 8005c66:	2000      	movs	r0, #0
 8005c68:	e008      	b.n	8005c7c <_printf_common+0xa8>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	4652      	mov	r2, sl
 8005c6e:	4649      	mov	r1, r9
 8005c70:	4638      	mov	r0, r7
 8005c72:	47c0      	blx	r8
 8005c74:	3001      	adds	r0, #1
 8005c76:	d103      	bne.n	8005c80 <_printf_common+0xac>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c80:	3501      	adds	r5, #1
 8005c82:	e7c6      	b.n	8005c12 <_printf_common+0x3e>
 8005c84:	18e1      	adds	r1, r4, r3
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	2030      	movs	r0, #48	; 0x30
 8005c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c8e:	4422      	add	r2, r4
 8005c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c98:	3302      	adds	r3, #2
 8005c9a:	e7c7      	b.n	8005c2c <_printf_common+0x58>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	47c0      	blx	r8
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d0e6      	beq.n	8005c78 <_printf_common+0xa4>
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7d9      	b.n	8005c62 <_printf_common+0x8e>
	...

08005cb0 <_printf_i>:
 8005cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb4:	7e0f      	ldrb	r7, [r1, #24]
 8005cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb8:	2f78      	cmp	r7, #120	; 0x78
 8005cba:	4691      	mov	r9, r2
 8005cbc:	4680      	mov	r8, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	469a      	mov	sl, r3
 8005cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cc6:	d807      	bhi.n	8005cd8 <_printf_i+0x28>
 8005cc8:	2f62      	cmp	r7, #98	; 0x62
 8005cca:	d80a      	bhi.n	8005ce2 <_printf_i+0x32>
 8005ccc:	2f00      	cmp	r7, #0
 8005cce:	f000 80d8 	beq.w	8005e82 <_printf_i+0x1d2>
 8005cd2:	2f58      	cmp	r7, #88	; 0x58
 8005cd4:	f000 80a3 	beq.w	8005e1e <_printf_i+0x16e>
 8005cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ce0:	e03a      	b.n	8005d58 <_printf_i+0xa8>
 8005ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ce6:	2b15      	cmp	r3, #21
 8005ce8:	d8f6      	bhi.n	8005cd8 <_printf_i+0x28>
 8005cea:	a101      	add	r1, pc, #4	; (adr r1, 8005cf0 <_printf_i+0x40>)
 8005cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cf0:	08005d49 	.word	0x08005d49
 8005cf4:	08005d5d 	.word	0x08005d5d
 8005cf8:	08005cd9 	.word	0x08005cd9
 8005cfc:	08005cd9 	.word	0x08005cd9
 8005d00:	08005cd9 	.word	0x08005cd9
 8005d04:	08005cd9 	.word	0x08005cd9
 8005d08:	08005d5d 	.word	0x08005d5d
 8005d0c:	08005cd9 	.word	0x08005cd9
 8005d10:	08005cd9 	.word	0x08005cd9
 8005d14:	08005cd9 	.word	0x08005cd9
 8005d18:	08005cd9 	.word	0x08005cd9
 8005d1c:	08005e69 	.word	0x08005e69
 8005d20:	08005d8d 	.word	0x08005d8d
 8005d24:	08005e4b 	.word	0x08005e4b
 8005d28:	08005cd9 	.word	0x08005cd9
 8005d2c:	08005cd9 	.word	0x08005cd9
 8005d30:	08005e8b 	.word	0x08005e8b
 8005d34:	08005cd9 	.word	0x08005cd9
 8005d38:	08005d8d 	.word	0x08005d8d
 8005d3c:	08005cd9 	.word	0x08005cd9
 8005d40:	08005cd9 	.word	0x08005cd9
 8005d44:	08005e53 	.word	0x08005e53
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	1d1a      	adds	r2, r3, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	602a      	str	r2, [r5, #0]
 8005d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0a3      	b.n	8005ea4 <_printf_i+0x1f4>
 8005d5c:	6820      	ldr	r0, [r4, #0]
 8005d5e:	6829      	ldr	r1, [r5, #0]
 8005d60:	0606      	lsls	r6, r0, #24
 8005d62:	f101 0304 	add.w	r3, r1, #4
 8005d66:	d50a      	bpl.n	8005d7e <_printf_i+0xce>
 8005d68:	680e      	ldr	r6, [r1, #0]
 8005d6a:	602b      	str	r3, [r5, #0]
 8005d6c:	2e00      	cmp	r6, #0
 8005d6e:	da03      	bge.n	8005d78 <_printf_i+0xc8>
 8005d70:	232d      	movs	r3, #45	; 0x2d
 8005d72:	4276      	negs	r6, r6
 8005d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d78:	485e      	ldr	r0, [pc, #376]	; (8005ef4 <_printf_i+0x244>)
 8005d7a:	230a      	movs	r3, #10
 8005d7c:	e019      	b.n	8005db2 <_printf_i+0x102>
 8005d7e:	680e      	ldr	r6, [r1, #0]
 8005d80:	602b      	str	r3, [r5, #0]
 8005d82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d86:	bf18      	it	ne
 8005d88:	b236      	sxthne	r6, r6
 8005d8a:	e7ef      	b.n	8005d6c <_printf_i+0xbc>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	6820      	ldr	r0, [r4, #0]
 8005d90:	1d19      	adds	r1, r3, #4
 8005d92:	6029      	str	r1, [r5, #0]
 8005d94:	0601      	lsls	r1, r0, #24
 8005d96:	d501      	bpl.n	8005d9c <_printf_i+0xec>
 8005d98:	681e      	ldr	r6, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <_printf_i+0xf2>
 8005d9c:	0646      	lsls	r6, r0, #25
 8005d9e:	d5fb      	bpl.n	8005d98 <_printf_i+0xe8>
 8005da0:	881e      	ldrh	r6, [r3, #0]
 8005da2:	4854      	ldr	r0, [pc, #336]	; (8005ef4 <_printf_i+0x244>)
 8005da4:	2f6f      	cmp	r7, #111	; 0x6f
 8005da6:	bf0c      	ite	eq
 8005da8:	2308      	moveq	r3, #8
 8005daa:	230a      	movne	r3, #10
 8005dac:	2100      	movs	r1, #0
 8005dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005db2:	6865      	ldr	r5, [r4, #4]
 8005db4:	60a5      	str	r5, [r4, #8]
 8005db6:	2d00      	cmp	r5, #0
 8005db8:	bfa2      	ittt	ge
 8005dba:	6821      	ldrge	r1, [r4, #0]
 8005dbc:	f021 0104 	bicge.w	r1, r1, #4
 8005dc0:	6021      	strge	r1, [r4, #0]
 8005dc2:	b90e      	cbnz	r6, 8005dc8 <_printf_i+0x118>
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	d04d      	beq.n	8005e64 <_printf_i+0x1b4>
 8005dc8:	4615      	mov	r5, r2
 8005dca:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dce:	fb03 6711 	mls	r7, r3, r1, r6
 8005dd2:	5dc7      	ldrb	r7, [r0, r7]
 8005dd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dd8:	4637      	mov	r7, r6
 8005dda:	42bb      	cmp	r3, r7
 8005ddc:	460e      	mov	r6, r1
 8005dde:	d9f4      	bls.n	8005dca <_printf_i+0x11a>
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d10b      	bne.n	8005dfc <_printf_i+0x14c>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	07de      	lsls	r6, r3, #31
 8005de8:	d508      	bpl.n	8005dfc <_printf_i+0x14c>
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	6861      	ldr	r1, [r4, #4]
 8005dee:	4299      	cmp	r1, r3
 8005df0:	bfde      	ittt	le
 8005df2:	2330      	movle	r3, #48	; 0x30
 8005df4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005df8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dfc:	1b52      	subs	r2, r2, r5
 8005dfe:	6122      	str	r2, [r4, #16]
 8005e00:	f8cd a000 	str.w	sl, [sp]
 8005e04:	464b      	mov	r3, r9
 8005e06:	aa03      	add	r2, sp, #12
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	f7ff fee2 	bl	8005bd4 <_printf_common>
 8005e10:	3001      	adds	r0, #1
 8005e12:	d14c      	bne.n	8005eae <_printf_i+0x1fe>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	b004      	add	sp, #16
 8005e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1e:	4835      	ldr	r0, [pc, #212]	; (8005ef4 <_printf_i+0x244>)
 8005e20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e24:	6829      	ldr	r1, [r5, #0]
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e2c:	6029      	str	r1, [r5, #0]
 8005e2e:	061d      	lsls	r5, r3, #24
 8005e30:	d514      	bpl.n	8005e5c <_printf_i+0x1ac>
 8005e32:	07df      	lsls	r7, r3, #31
 8005e34:	bf44      	itt	mi
 8005e36:	f043 0320 	orrmi.w	r3, r3, #32
 8005e3a:	6023      	strmi	r3, [r4, #0]
 8005e3c:	b91e      	cbnz	r6, 8005e46 <_printf_i+0x196>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	f023 0320 	bic.w	r3, r3, #32
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	2310      	movs	r3, #16
 8005e48:	e7b0      	b.n	8005dac <_printf_i+0xfc>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	f043 0320 	orr.w	r3, r3, #32
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	2378      	movs	r3, #120	; 0x78
 8005e54:	4828      	ldr	r0, [pc, #160]	; (8005ef8 <_printf_i+0x248>)
 8005e56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e5a:	e7e3      	b.n	8005e24 <_printf_i+0x174>
 8005e5c:	0659      	lsls	r1, r3, #25
 8005e5e:	bf48      	it	mi
 8005e60:	b2b6      	uxthmi	r6, r6
 8005e62:	e7e6      	b.n	8005e32 <_printf_i+0x182>
 8005e64:	4615      	mov	r5, r2
 8005e66:	e7bb      	b.n	8005de0 <_printf_i+0x130>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	6826      	ldr	r6, [r4, #0]
 8005e6c:	6961      	ldr	r1, [r4, #20]
 8005e6e:	1d18      	adds	r0, r3, #4
 8005e70:	6028      	str	r0, [r5, #0]
 8005e72:	0635      	lsls	r5, r6, #24
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	d501      	bpl.n	8005e7c <_printf_i+0x1cc>
 8005e78:	6019      	str	r1, [r3, #0]
 8005e7a:	e002      	b.n	8005e82 <_printf_i+0x1d2>
 8005e7c:	0670      	lsls	r0, r6, #25
 8005e7e:	d5fb      	bpl.n	8005e78 <_printf_i+0x1c8>
 8005e80:	8019      	strh	r1, [r3, #0]
 8005e82:	2300      	movs	r3, #0
 8005e84:	6123      	str	r3, [r4, #16]
 8005e86:	4615      	mov	r5, r2
 8005e88:	e7ba      	b.n	8005e00 <_printf_i+0x150>
 8005e8a:	682b      	ldr	r3, [r5, #0]
 8005e8c:	1d1a      	adds	r2, r3, #4
 8005e8e:	602a      	str	r2, [r5, #0]
 8005e90:	681d      	ldr	r5, [r3, #0]
 8005e92:	6862      	ldr	r2, [r4, #4]
 8005e94:	2100      	movs	r1, #0
 8005e96:	4628      	mov	r0, r5
 8005e98:	f7fa f9aa 	bl	80001f0 <memchr>
 8005e9c:	b108      	cbz	r0, 8005ea2 <_printf_i+0x1f2>
 8005e9e:	1b40      	subs	r0, r0, r5
 8005ea0:	6060      	str	r0, [r4, #4]
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eac:	e7a8      	b.n	8005e00 <_printf_i+0x150>
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	462a      	mov	r2, r5
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	47d0      	blx	sl
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d0ab      	beq.n	8005e14 <_printf_i+0x164>
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	079b      	lsls	r3, r3, #30
 8005ec0:	d413      	bmi.n	8005eea <_printf_i+0x23a>
 8005ec2:	68e0      	ldr	r0, [r4, #12]
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	4298      	cmp	r0, r3
 8005ec8:	bfb8      	it	lt
 8005eca:	4618      	movlt	r0, r3
 8005ecc:	e7a4      	b.n	8005e18 <_printf_i+0x168>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	47d0      	blx	sl
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d09b      	beq.n	8005e14 <_printf_i+0x164>
 8005edc:	3501      	adds	r5, #1
 8005ede:	68e3      	ldr	r3, [r4, #12]
 8005ee0:	9903      	ldr	r1, [sp, #12]
 8005ee2:	1a5b      	subs	r3, r3, r1
 8005ee4:	42ab      	cmp	r3, r5
 8005ee6:	dcf2      	bgt.n	8005ece <_printf_i+0x21e>
 8005ee8:	e7eb      	b.n	8005ec2 <_printf_i+0x212>
 8005eea:	2500      	movs	r5, #0
 8005eec:	f104 0619 	add.w	r6, r4, #25
 8005ef0:	e7f5      	b.n	8005ede <_printf_i+0x22e>
 8005ef2:	bf00      	nop
 8005ef4:	0800849a 	.word	0x0800849a
 8005ef8:	080084ab 	.word	0x080084ab

08005efc <sniprintf>:
 8005efc:	b40c      	push	{r2, r3}
 8005efe:	b530      	push	{r4, r5, lr}
 8005f00:	4b17      	ldr	r3, [pc, #92]	; (8005f60 <sniprintf+0x64>)
 8005f02:	1e0c      	subs	r4, r1, #0
 8005f04:	681d      	ldr	r5, [r3, #0]
 8005f06:	b09d      	sub	sp, #116	; 0x74
 8005f08:	da08      	bge.n	8005f1c <sniprintf+0x20>
 8005f0a:	238b      	movs	r3, #139	; 0x8b
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f12:	b01d      	add	sp, #116	; 0x74
 8005f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f18:	b002      	add	sp, #8
 8005f1a:	4770      	bx	lr
 8005f1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f24:	bf14      	ite	ne
 8005f26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f2a:	4623      	moveq	r3, r4
 8005f2c:	9304      	str	r3, [sp, #16]
 8005f2e:	9307      	str	r3, [sp, #28]
 8005f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f34:	9002      	str	r0, [sp, #8]
 8005f36:	9006      	str	r0, [sp, #24]
 8005f38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f3e:	ab21      	add	r3, sp, #132	; 0x84
 8005f40:	a902      	add	r1, sp, #8
 8005f42:	4628      	mov	r0, r5
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	f001 fb79 	bl	800763c <_svfiprintf_r>
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	bfbc      	itt	lt
 8005f4e:	238b      	movlt	r3, #139	; 0x8b
 8005f50:	602b      	strlt	r3, [r5, #0]
 8005f52:	2c00      	cmp	r4, #0
 8005f54:	d0dd      	beq.n	8005f12 <sniprintf+0x16>
 8005f56:	9b02      	ldr	r3, [sp, #8]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	e7d9      	b.n	8005f12 <sniprintf+0x16>
 8005f5e:	bf00      	nop
 8005f60:	2000000c 	.word	0x2000000c

08005f64 <quorem>:
 8005f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f68:	6903      	ldr	r3, [r0, #16]
 8005f6a:	690c      	ldr	r4, [r1, #16]
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	4607      	mov	r7, r0
 8005f70:	f2c0 8081 	blt.w	8006076 <quorem+0x112>
 8005f74:	3c01      	subs	r4, #1
 8005f76:	f101 0814 	add.w	r8, r1, #20
 8005f7a:	f100 0514 	add.w	r5, r0, #20
 8005f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f98:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f9c:	d331      	bcc.n	8006002 <quorem+0x9e>
 8005f9e:	f04f 0e00 	mov.w	lr, #0
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	46ac      	mov	ip, r5
 8005fa6:	46f2      	mov	sl, lr
 8005fa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fac:	b293      	uxth	r3, r2
 8005fae:	fb06 e303 	mla	r3, r6, r3, lr
 8005fb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	ebaa 0303 	sub.w	r3, sl, r3
 8005fbc:	f8dc a000 	ldr.w	sl, [ip]
 8005fc0:	0c12      	lsrs	r2, r2, #16
 8005fc2:	fa13 f38a 	uxtah	r3, r3, sl
 8005fc6:	fb06 e202 	mla	r2, r6, r2, lr
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fd2:	b292      	uxth	r2, r2
 8005fd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fdc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005fe0:	4581      	cmp	r9, r0
 8005fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe6:	f84c 3b04 	str.w	r3, [ip], #4
 8005fea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fee:	d2db      	bcs.n	8005fa8 <quorem+0x44>
 8005ff0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ff4:	b92b      	cbnz	r3, 8006002 <quorem+0x9e>
 8005ff6:	9b01      	ldr	r3, [sp, #4]
 8005ff8:	3b04      	subs	r3, #4
 8005ffa:	429d      	cmp	r5, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	d32e      	bcc.n	800605e <quorem+0xfa>
 8006000:	613c      	str	r4, [r7, #16]
 8006002:	4638      	mov	r0, r7
 8006004:	f001 f8c6 	bl	8007194 <__mcmp>
 8006008:	2800      	cmp	r0, #0
 800600a:	db24      	blt.n	8006056 <quorem+0xf2>
 800600c:	3601      	adds	r6, #1
 800600e:	4628      	mov	r0, r5
 8006010:	f04f 0c00 	mov.w	ip, #0
 8006014:	f858 2b04 	ldr.w	r2, [r8], #4
 8006018:	f8d0 e000 	ldr.w	lr, [r0]
 800601c:	b293      	uxth	r3, r2
 800601e:	ebac 0303 	sub.w	r3, ip, r3
 8006022:	0c12      	lsrs	r2, r2, #16
 8006024:	fa13 f38e 	uxtah	r3, r3, lr
 8006028:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800602c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006030:	b29b      	uxth	r3, r3
 8006032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006036:	45c1      	cmp	r9, r8
 8006038:	f840 3b04 	str.w	r3, [r0], #4
 800603c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006040:	d2e8      	bcs.n	8006014 <quorem+0xb0>
 8006042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800604a:	b922      	cbnz	r2, 8006056 <quorem+0xf2>
 800604c:	3b04      	subs	r3, #4
 800604e:	429d      	cmp	r5, r3
 8006050:	461a      	mov	r2, r3
 8006052:	d30a      	bcc.n	800606a <quorem+0x106>
 8006054:	613c      	str	r4, [r7, #16]
 8006056:	4630      	mov	r0, r6
 8006058:	b003      	add	sp, #12
 800605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	3b04      	subs	r3, #4
 8006062:	2a00      	cmp	r2, #0
 8006064:	d1cc      	bne.n	8006000 <quorem+0x9c>
 8006066:	3c01      	subs	r4, #1
 8006068:	e7c7      	b.n	8005ffa <quorem+0x96>
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	3b04      	subs	r3, #4
 800606e:	2a00      	cmp	r2, #0
 8006070:	d1f0      	bne.n	8006054 <quorem+0xf0>
 8006072:	3c01      	subs	r4, #1
 8006074:	e7eb      	b.n	800604e <quorem+0xea>
 8006076:	2000      	movs	r0, #0
 8006078:	e7ee      	b.n	8006058 <quorem+0xf4>
 800607a:	0000      	movs	r0, r0
 800607c:	0000      	movs	r0, r0
	...

08006080 <_dtoa_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	ed2d 8b04 	vpush	{d8-d9}
 8006088:	ec57 6b10 	vmov	r6, r7, d0
 800608c:	b093      	sub	sp, #76	; 0x4c
 800608e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006090:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006094:	9106      	str	r1, [sp, #24]
 8006096:	ee10 aa10 	vmov	sl, s0
 800609a:	4604      	mov	r4, r0
 800609c:	9209      	str	r2, [sp, #36]	; 0x24
 800609e:	930c      	str	r3, [sp, #48]	; 0x30
 80060a0:	46bb      	mov	fp, r7
 80060a2:	b975      	cbnz	r5, 80060c2 <_dtoa_r+0x42>
 80060a4:	2010      	movs	r0, #16
 80060a6:	f000 fddd 	bl	8006c64 <malloc>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6260      	str	r0, [r4, #36]	; 0x24
 80060ae:	b920      	cbnz	r0, 80060ba <_dtoa_r+0x3a>
 80060b0:	4ba7      	ldr	r3, [pc, #668]	; (8006350 <_dtoa_r+0x2d0>)
 80060b2:	21ea      	movs	r1, #234	; 0xea
 80060b4:	48a7      	ldr	r0, [pc, #668]	; (8006354 <_dtoa_r+0x2d4>)
 80060b6:	f001 fbd1 	bl	800785c <__assert_func>
 80060ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060be:	6005      	str	r5, [r0, #0]
 80060c0:	60c5      	str	r5, [r0, #12]
 80060c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060c4:	6819      	ldr	r1, [r3, #0]
 80060c6:	b151      	cbz	r1, 80060de <_dtoa_r+0x5e>
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	604a      	str	r2, [r1, #4]
 80060cc:	2301      	movs	r3, #1
 80060ce:	4093      	lsls	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 fe1c 	bl	8006d10 <_Bfree>
 80060d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	1e3b      	subs	r3, r7, #0
 80060e0:	bfaa      	itet	ge
 80060e2:	2300      	movge	r3, #0
 80060e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80060e8:	f8c8 3000 	strge.w	r3, [r8]
 80060ec:	4b9a      	ldr	r3, [pc, #616]	; (8006358 <_dtoa_r+0x2d8>)
 80060ee:	bfbc      	itt	lt
 80060f0:	2201      	movlt	r2, #1
 80060f2:	f8c8 2000 	strlt.w	r2, [r8]
 80060f6:	ea33 030b 	bics.w	r3, r3, fp
 80060fa:	d11b      	bne.n	8006134 <_dtoa_r+0xb4>
 80060fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006108:	4333      	orrs	r3, r6
 800610a:	f000 8592 	beq.w	8006c32 <_dtoa_r+0xbb2>
 800610e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006110:	b963      	cbnz	r3, 800612c <_dtoa_r+0xac>
 8006112:	4b92      	ldr	r3, [pc, #584]	; (800635c <_dtoa_r+0x2dc>)
 8006114:	e022      	b.n	800615c <_dtoa_r+0xdc>
 8006116:	4b92      	ldr	r3, [pc, #584]	; (8006360 <_dtoa_r+0x2e0>)
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	3308      	adds	r3, #8
 800611c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	9801      	ldr	r0, [sp, #4]
 8006122:	b013      	add	sp, #76	; 0x4c
 8006124:	ecbd 8b04 	vpop	{d8-d9}
 8006128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612c:	4b8b      	ldr	r3, [pc, #556]	; (800635c <_dtoa_r+0x2dc>)
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	3303      	adds	r3, #3
 8006132:	e7f3      	b.n	800611c <_dtoa_r+0x9c>
 8006134:	2200      	movs	r2, #0
 8006136:	2300      	movs	r3, #0
 8006138:	4650      	mov	r0, sl
 800613a:	4659      	mov	r1, fp
 800613c:	f7fa fccc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006140:	ec4b ab19 	vmov	d9, sl, fp
 8006144:	4680      	mov	r8, r0
 8006146:	b158      	cbz	r0, 8006160 <_dtoa_r+0xe0>
 8006148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800614a:	2301      	movs	r3, #1
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 856b 	beq.w	8006c2c <_dtoa_r+0xbac>
 8006156:	4883      	ldr	r0, [pc, #524]	; (8006364 <_dtoa_r+0x2e4>)
 8006158:	6018      	str	r0, [r3, #0]
 800615a:	1e43      	subs	r3, r0, #1
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	e7df      	b.n	8006120 <_dtoa_r+0xa0>
 8006160:	ec4b ab10 	vmov	d0, sl, fp
 8006164:	aa10      	add	r2, sp, #64	; 0x40
 8006166:	a911      	add	r1, sp, #68	; 0x44
 8006168:	4620      	mov	r0, r4
 800616a:	f001 f8b9 	bl	80072e0 <__d2b>
 800616e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006172:	ee08 0a10 	vmov	s16, r0
 8006176:	2d00      	cmp	r5, #0
 8006178:	f000 8084 	beq.w	8006284 <_dtoa_r+0x204>
 800617c:	ee19 3a90 	vmov	r3, s19
 8006180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006184:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006188:	4656      	mov	r6, sl
 800618a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800618e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006192:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006196:	4b74      	ldr	r3, [pc, #464]	; (8006368 <_dtoa_r+0x2e8>)
 8006198:	2200      	movs	r2, #0
 800619a:	4630      	mov	r0, r6
 800619c:	4639      	mov	r1, r7
 800619e:	f7fa f87b 	bl	8000298 <__aeabi_dsub>
 80061a2:	a365      	add	r3, pc, #404	; (adr r3, 8006338 <_dtoa_r+0x2b8>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa fa2e 	bl	8000608 <__aeabi_dmul>
 80061ac:	a364      	add	r3, pc, #400	; (adr r3, 8006340 <_dtoa_r+0x2c0>)
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	f7fa f873 	bl	800029c <__adddf3>
 80061b6:	4606      	mov	r6, r0
 80061b8:	4628      	mov	r0, r5
 80061ba:	460f      	mov	r7, r1
 80061bc:	f7fa f9ba 	bl	8000534 <__aeabi_i2d>
 80061c0:	a361      	add	r3, pc, #388	; (adr r3, 8006348 <_dtoa_r+0x2c8>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fa fa1f 	bl	8000608 <__aeabi_dmul>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4630      	mov	r0, r6
 80061d0:	4639      	mov	r1, r7
 80061d2:	f7fa f863 	bl	800029c <__adddf3>
 80061d6:	4606      	mov	r6, r0
 80061d8:	460f      	mov	r7, r1
 80061da:	f7fa fcc5 	bl	8000b68 <__aeabi_d2iz>
 80061de:	2200      	movs	r2, #0
 80061e0:	9000      	str	r0, [sp, #0]
 80061e2:	2300      	movs	r3, #0
 80061e4:	4630      	mov	r0, r6
 80061e6:	4639      	mov	r1, r7
 80061e8:	f7fa fc80 	bl	8000aec <__aeabi_dcmplt>
 80061ec:	b150      	cbz	r0, 8006204 <_dtoa_r+0x184>
 80061ee:	9800      	ldr	r0, [sp, #0]
 80061f0:	f7fa f9a0 	bl	8000534 <__aeabi_i2d>
 80061f4:	4632      	mov	r2, r6
 80061f6:	463b      	mov	r3, r7
 80061f8:	f7fa fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80061fc:	b910      	cbnz	r0, 8006204 <_dtoa_r+0x184>
 80061fe:	9b00      	ldr	r3, [sp, #0]
 8006200:	3b01      	subs	r3, #1
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	9b00      	ldr	r3, [sp, #0]
 8006206:	2b16      	cmp	r3, #22
 8006208:	d85a      	bhi.n	80062c0 <_dtoa_r+0x240>
 800620a:	9a00      	ldr	r2, [sp, #0]
 800620c:	4b57      	ldr	r3, [pc, #348]	; (800636c <_dtoa_r+0x2ec>)
 800620e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	ec51 0b19 	vmov	r0, r1, d9
 800621a:	f7fa fc67 	bl	8000aec <__aeabi_dcmplt>
 800621e:	2800      	cmp	r0, #0
 8006220:	d050      	beq.n	80062c4 <_dtoa_r+0x244>
 8006222:	9b00      	ldr	r3, [sp, #0]
 8006224:	3b01      	subs	r3, #1
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2300      	movs	r3, #0
 800622a:	930b      	str	r3, [sp, #44]	; 0x2c
 800622c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800622e:	1b5d      	subs	r5, r3, r5
 8006230:	1e6b      	subs	r3, r5, #1
 8006232:	9305      	str	r3, [sp, #20]
 8006234:	bf45      	ittet	mi
 8006236:	f1c5 0301 	rsbmi	r3, r5, #1
 800623a:	9304      	strmi	r3, [sp, #16]
 800623c:	2300      	movpl	r3, #0
 800623e:	2300      	movmi	r3, #0
 8006240:	bf4c      	ite	mi
 8006242:	9305      	strmi	r3, [sp, #20]
 8006244:	9304      	strpl	r3, [sp, #16]
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	db3d      	blt.n	80062c8 <_dtoa_r+0x248>
 800624c:	9b05      	ldr	r3, [sp, #20]
 800624e:	9a00      	ldr	r2, [sp, #0]
 8006250:	920a      	str	r2, [sp, #40]	; 0x28
 8006252:	4413      	add	r3, r2
 8006254:	9305      	str	r3, [sp, #20]
 8006256:	2300      	movs	r3, #0
 8006258:	9307      	str	r3, [sp, #28]
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	2b09      	cmp	r3, #9
 800625e:	f200 8089 	bhi.w	8006374 <_dtoa_r+0x2f4>
 8006262:	2b05      	cmp	r3, #5
 8006264:	bfc4      	itt	gt
 8006266:	3b04      	subgt	r3, #4
 8006268:	9306      	strgt	r3, [sp, #24]
 800626a:	9b06      	ldr	r3, [sp, #24]
 800626c:	f1a3 0302 	sub.w	r3, r3, #2
 8006270:	bfcc      	ite	gt
 8006272:	2500      	movgt	r5, #0
 8006274:	2501      	movle	r5, #1
 8006276:	2b03      	cmp	r3, #3
 8006278:	f200 8087 	bhi.w	800638a <_dtoa_r+0x30a>
 800627c:	e8df f003 	tbb	[pc, r3]
 8006280:	59383a2d 	.word	0x59383a2d
 8006284:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006288:	441d      	add	r5, r3
 800628a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800628e:	2b20      	cmp	r3, #32
 8006290:	bfc1      	itttt	gt
 8006292:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006296:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800629a:	fa0b f303 	lslgt.w	r3, fp, r3
 800629e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80062a2:	bfda      	itte	le
 80062a4:	f1c3 0320 	rsble	r3, r3, #32
 80062a8:	fa06 f003 	lslle.w	r0, r6, r3
 80062ac:	4318      	orrgt	r0, r3
 80062ae:	f7fa f931 	bl	8000514 <__aeabi_ui2d>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4606      	mov	r6, r0
 80062b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80062ba:	3d01      	subs	r5, #1
 80062bc:	930e      	str	r3, [sp, #56]	; 0x38
 80062be:	e76a      	b.n	8006196 <_dtoa_r+0x116>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e7b2      	b.n	800622a <_dtoa_r+0x1aa>
 80062c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80062c6:	e7b1      	b.n	800622c <_dtoa_r+0x1ac>
 80062c8:	9b04      	ldr	r3, [sp, #16]
 80062ca:	9a00      	ldr	r2, [sp, #0]
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	4253      	negs	r3, r2
 80062d2:	9307      	str	r3, [sp, #28]
 80062d4:	2300      	movs	r3, #0
 80062d6:	930a      	str	r3, [sp, #40]	; 0x28
 80062d8:	e7bf      	b.n	800625a <_dtoa_r+0x1da>
 80062da:	2300      	movs	r3, #0
 80062dc:	9308      	str	r3, [sp, #32]
 80062de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	dc55      	bgt.n	8006390 <_dtoa_r+0x310>
 80062e4:	2301      	movs	r3, #1
 80062e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062ea:	461a      	mov	r2, r3
 80062ec:	9209      	str	r2, [sp, #36]	; 0x24
 80062ee:	e00c      	b.n	800630a <_dtoa_r+0x28a>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e7f3      	b.n	80062dc <_dtoa_r+0x25c>
 80062f4:	2300      	movs	r3, #0
 80062f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f8:	9308      	str	r3, [sp, #32]
 80062fa:	9b00      	ldr	r3, [sp, #0]
 80062fc:	4413      	add	r3, r2
 80062fe:	9302      	str	r3, [sp, #8]
 8006300:	3301      	adds	r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	9303      	str	r3, [sp, #12]
 8006306:	bfb8      	it	lt
 8006308:	2301      	movlt	r3, #1
 800630a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800630c:	2200      	movs	r2, #0
 800630e:	6042      	str	r2, [r0, #4]
 8006310:	2204      	movs	r2, #4
 8006312:	f102 0614 	add.w	r6, r2, #20
 8006316:	429e      	cmp	r6, r3
 8006318:	6841      	ldr	r1, [r0, #4]
 800631a:	d93d      	bls.n	8006398 <_dtoa_r+0x318>
 800631c:	4620      	mov	r0, r4
 800631e:	f000 fcb7 	bl	8006c90 <_Balloc>
 8006322:	9001      	str	r0, [sp, #4]
 8006324:	2800      	cmp	r0, #0
 8006326:	d13b      	bne.n	80063a0 <_dtoa_r+0x320>
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <_dtoa_r+0x2f0>)
 800632a:	4602      	mov	r2, r0
 800632c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006330:	e6c0      	b.n	80060b4 <_dtoa_r+0x34>
 8006332:	2301      	movs	r3, #1
 8006334:	e7df      	b.n	80062f6 <_dtoa_r+0x276>
 8006336:	bf00      	nop
 8006338:	636f4361 	.word	0x636f4361
 800633c:	3fd287a7 	.word	0x3fd287a7
 8006340:	8b60c8b3 	.word	0x8b60c8b3
 8006344:	3fc68a28 	.word	0x3fc68a28
 8006348:	509f79fb 	.word	0x509f79fb
 800634c:	3fd34413 	.word	0x3fd34413
 8006350:	080084c9 	.word	0x080084c9
 8006354:	080084e0 	.word	0x080084e0
 8006358:	7ff00000 	.word	0x7ff00000
 800635c:	080084c5 	.word	0x080084c5
 8006360:	080084bc 	.word	0x080084bc
 8006364:	08008499 	.word	0x08008499
 8006368:	3ff80000 	.word	0x3ff80000
 800636c:	080085d0 	.word	0x080085d0
 8006370:	0800853b 	.word	0x0800853b
 8006374:	2501      	movs	r5, #1
 8006376:	2300      	movs	r3, #0
 8006378:	9306      	str	r3, [sp, #24]
 800637a:	9508      	str	r5, [sp, #32]
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006384:	2200      	movs	r2, #0
 8006386:	2312      	movs	r3, #18
 8006388:	e7b0      	b.n	80062ec <_dtoa_r+0x26c>
 800638a:	2301      	movs	r3, #1
 800638c:	9308      	str	r3, [sp, #32]
 800638e:	e7f5      	b.n	800637c <_dtoa_r+0x2fc>
 8006390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006392:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006396:	e7b8      	b.n	800630a <_dtoa_r+0x28a>
 8006398:	3101      	adds	r1, #1
 800639a:	6041      	str	r1, [r0, #4]
 800639c:	0052      	lsls	r2, r2, #1
 800639e:	e7b8      	b.n	8006312 <_dtoa_r+0x292>
 80063a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a2:	9a01      	ldr	r2, [sp, #4]
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	2b0e      	cmp	r3, #14
 80063aa:	f200 809d 	bhi.w	80064e8 <_dtoa_r+0x468>
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	f000 809a 	beq.w	80064e8 <_dtoa_r+0x468>
 80063b4:	9b00      	ldr	r3, [sp, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	dd32      	ble.n	8006420 <_dtoa_r+0x3a0>
 80063ba:	4ab7      	ldr	r2, [pc, #732]	; (8006698 <_dtoa_r+0x618>)
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063c8:	9b00      	ldr	r3, [sp, #0]
 80063ca:	05d8      	lsls	r0, r3, #23
 80063cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80063d0:	d516      	bpl.n	8006400 <_dtoa_r+0x380>
 80063d2:	4bb2      	ldr	r3, [pc, #712]	; (800669c <_dtoa_r+0x61c>)
 80063d4:	ec51 0b19 	vmov	r0, r1, d9
 80063d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063dc:	f7fa fa3e 	bl	800085c <__aeabi_ddiv>
 80063e0:	f007 070f 	and.w	r7, r7, #15
 80063e4:	4682      	mov	sl, r0
 80063e6:	468b      	mov	fp, r1
 80063e8:	2503      	movs	r5, #3
 80063ea:	4eac      	ldr	r6, [pc, #688]	; (800669c <_dtoa_r+0x61c>)
 80063ec:	b957      	cbnz	r7, 8006404 <_dtoa_r+0x384>
 80063ee:	4642      	mov	r2, r8
 80063f0:	464b      	mov	r3, r9
 80063f2:	4650      	mov	r0, sl
 80063f4:	4659      	mov	r1, fp
 80063f6:	f7fa fa31 	bl	800085c <__aeabi_ddiv>
 80063fa:	4682      	mov	sl, r0
 80063fc:	468b      	mov	fp, r1
 80063fe:	e028      	b.n	8006452 <_dtoa_r+0x3d2>
 8006400:	2502      	movs	r5, #2
 8006402:	e7f2      	b.n	80063ea <_dtoa_r+0x36a>
 8006404:	07f9      	lsls	r1, r7, #31
 8006406:	d508      	bpl.n	800641a <_dtoa_r+0x39a>
 8006408:	4640      	mov	r0, r8
 800640a:	4649      	mov	r1, r9
 800640c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006410:	f7fa f8fa 	bl	8000608 <__aeabi_dmul>
 8006414:	3501      	adds	r5, #1
 8006416:	4680      	mov	r8, r0
 8006418:	4689      	mov	r9, r1
 800641a:	107f      	asrs	r7, r7, #1
 800641c:	3608      	adds	r6, #8
 800641e:	e7e5      	b.n	80063ec <_dtoa_r+0x36c>
 8006420:	f000 809b 	beq.w	800655a <_dtoa_r+0x4da>
 8006424:	9b00      	ldr	r3, [sp, #0]
 8006426:	4f9d      	ldr	r7, [pc, #628]	; (800669c <_dtoa_r+0x61c>)
 8006428:	425e      	negs	r6, r3
 800642a:	4b9b      	ldr	r3, [pc, #620]	; (8006698 <_dtoa_r+0x618>)
 800642c:	f006 020f 	and.w	r2, r6, #15
 8006430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006438:	ec51 0b19 	vmov	r0, r1, d9
 800643c:	f7fa f8e4 	bl	8000608 <__aeabi_dmul>
 8006440:	1136      	asrs	r6, r6, #4
 8006442:	4682      	mov	sl, r0
 8006444:	468b      	mov	fp, r1
 8006446:	2300      	movs	r3, #0
 8006448:	2502      	movs	r5, #2
 800644a:	2e00      	cmp	r6, #0
 800644c:	d17a      	bne.n	8006544 <_dtoa_r+0x4c4>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1d3      	bne.n	80063fa <_dtoa_r+0x37a>
 8006452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8082 	beq.w	800655e <_dtoa_r+0x4de>
 800645a:	4b91      	ldr	r3, [pc, #580]	; (80066a0 <_dtoa_r+0x620>)
 800645c:	2200      	movs	r2, #0
 800645e:	4650      	mov	r0, sl
 8006460:	4659      	mov	r1, fp
 8006462:	f7fa fb43 	bl	8000aec <__aeabi_dcmplt>
 8006466:	2800      	cmp	r0, #0
 8006468:	d079      	beq.n	800655e <_dtoa_r+0x4de>
 800646a:	9b03      	ldr	r3, [sp, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d076      	beq.n	800655e <_dtoa_r+0x4de>
 8006470:	9b02      	ldr	r3, [sp, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	dd36      	ble.n	80064e4 <_dtoa_r+0x464>
 8006476:	9b00      	ldr	r3, [sp, #0]
 8006478:	4650      	mov	r0, sl
 800647a:	4659      	mov	r1, fp
 800647c:	1e5f      	subs	r7, r3, #1
 800647e:	2200      	movs	r2, #0
 8006480:	4b88      	ldr	r3, [pc, #544]	; (80066a4 <_dtoa_r+0x624>)
 8006482:	f7fa f8c1 	bl	8000608 <__aeabi_dmul>
 8006486:	9e02      	ldr	r6, [sp, #8]
 8006488:	4682      	mov	sl, r0
 800648a:	468b      	mov	fp, r1
 800648c:	3501      	adds	r5, #1
 800648e:	4628      	mov	r0, r5
 8006490:	f7fa f850 	bl	8000534 <__aeabi_i2d>
 8006494:	4652      	mov	r2, sl
 8006496:	465b      	mov	r3, fp
 8006498:	f7fa f8b6 	bl	8000608 <__aeabi_dmul>
 800649c:	4b82      	ldr	r3, [pc, #520]	; (80066a8 <_dtoa_r+0x628>)
 800649e:	2200      	movs	r2, #0
 80064a0:	f7f9 fefc 	bl	800029c <__adddf3>
 80064a4:	46d0      	mov	r8, sl
 80064a6:	46d9      	mov	r9, fp
 80064a8:	4682      	mov	sl, r0
 80064aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	d158      	bne.n	8006564 <_dtoa_r+0x4e4>
 80064b2:	4b7e      	ldr	r3, [pc, #504]	; (80066ac <_dtoa_r+0x62c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	4640      	mov	r0, r8
 80064b8:	4649      	mov	r1, r9
 80064ba:	f7f9 feed 	bl	8000298 <__aeabi_dsub>
 80064be:	4652      	mov	r2, sl
 80064c0:	465b      	mov	r3, fp
 80064c2:	4680      	mov	r8, r0
 80064c4:	4689      	mov	r9, r1
 80064c6:	f7fa fb2f 	bl	8000b28 <__aeabi_dcmpgt>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	f040 8295 	bne.w	80069fa <_dtoa_r+0x97a>
 80064d0:	4652      	mov	r2, sl
 80064d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064d6:	4640      	mov	r0, r8
 80064d8:	4649      	mov	r1, r9
 80064da:	f7fa fb07 	bl	8000aec <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	f040 8289 	bne.w	80069f6 <_dtoa_r+0x976>
 80064e4:	ec5b ab19 	vmov	sl, fp, d9
 80064e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f2c0 8148 	blt.w	8006780 <_dtoa_r+0x700>
 80064f0:	9a00      	ldr	r2, [sp, #0]
 80064f2:	2a0e      	cmp	r2, #14
 80064f4:	f300 8144 	bgt.w	8006780 <_dtoa_r+0x700>
 80064f8:	4b67      	ldr	r3, [pc, #412]	; (8006698 <_dtoa_r+0x618>)
 80064fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	f280 80d5 	bge.w	80066b4 <_dtoa_r+0x634>
 800650a:	9b03      	ldr	r3, [sp, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f300 80d1 	bgt.w	80066b4 <_dtoa_r+0x634>
 8006512:	f040 826f 	bne.w	80069f4 <_dtoa_r+0x974>
 8006516:	4b65      	ldr	r3, [pc, #404]	; (80066ac <_dtoa_r+0x62c>)
 8006518:	2200      	movs	r2, #0
 800651a:	4640      	mov	r0, r8
 800651c:	4649      	mov	r1, r9
 800651e:	f7fa f873 	bl	8000608 <__aeabi_dmul>
 8006522:	4652      	mov	r2, sl
 8006524:	465b      	mov	r3, fp
 8006526:	f7fa faf5 	bl	8000b14 <__aeabi_dcmpge>
 800652a:	9e03      	ldr	r6, [sp, #12]
 800652c:	4637      	mov	r7, r6
 800652e:	2800      	cmp	r0, #0
 8006530:	f040 8245 	bne.w	80069be <_dtoa_r+0x93e>
 8006534:	9d01      	ldr	r5, [sp, #4]
 8006536:	2331      	movs	r3, #49	; 0x31
 8006538:	f805 3b01 	strb.w	r3, [r5], #1
 800653c:	9b00      	ldr	r3, [sp, #0]
 800653e:	3301      	adds	r3, #1
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	e240      	b.n	80069c6 <_dtoa_r+0x946>
 8006544:	07f2      	lsls	r2, r6, #31
 8006546:	d505      	bpl.n	8006554 <_dtoa_r+0x4d4>
 8006548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800654c:	f7fa f85c 	bl	8000608 <__aeabi_dmul>
 8006550:	3501      	adds	r5, #1
 8006552:	2301      	movs	r3, #1
 8006554:	1076      	asrs	r6, r6, #1
 8006556:	3708      	adds	r7, #8
 8006558:	e777      	b.n	800644a <_dtoa_r+0x3ca>
 800655a:	2502      	movs	r5, #2
 800655c:	e779      	b.n	8006452 <_dtoa_r+0x3d2>
 800655e:	9f00      	ldr	r7, [sp, #0]
 8006560:	9e03      	ldr	r6, [sp, #12]
 8006562:	e794      	b.n	800648e <_dtoa_r+0x40e>
 8006564:	9901      	ldr	r1, [sp, #4]
 8006566:	4b4c      	ldr	r3, [pc, #304]	; (8006698 <_dtoa_r+0x618>)
 8006568:	4431      	add	r1, r6
 800656a:	910d      	str	r1, [sp, #52]	; 0x34
 800656c:	9908      	ldr	r1, [sp, #32]
 800656e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006572:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006576:	2900      	cmp	r1, #0
 8006578:	d043      	beq.n	8006602 <_dtoa_r+0x582>
 800657a:	494d      	ldr	r1, [pc, #308]	; (80066b0 <_dtoa_r+0x630>)
 800657c:	2000      	movs	r0, #0
 800657e:	f7fa f96d 	bl	800085c <__aeabi_ddiv>
 8006582:	4652      	mov	r2, sl
 8006584:	465b      	mov	r3, fp
 8006586:	f7f9 fe87 	bl	8000298 <__aeabi_dsub>
 800658a:	9d01      	ldr	r5, [sp, #4]
 800658c:	4682      	mov	sl, r0
 800658e:	468b      	mov	fp, r1
 8006590:	4649      	mov	r1, r9
 8006592:	4640      	mov	r0, r8
 8006594:	f7fa fae8 	bl	8000b68 <__aeabi_d2iz>
 8006598:	4606      	mov	r6, r0
 800659a:	f7f9 ffcb 	bl	8000534 <__aeabi_i2d>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4640      	mov	r0, r8
 80065a4:	4649      	mov	r1, r9
 80065a6:	f7f9 fe77 	bl	8000298 <__aeabi_dsub>
 80065aa:	3630      	adds	r6, #48	; 0x30
 80065ac:	f805 6b01 	strb.w	r6, [r5], #1
 80065b0:	4652      	mov	r2, sl
 80065b2:	465b      	mov	r3, fp
 80065b4:	4680      	mov	r8, r0
 80065b6:	4689      	mov	r9, r1
 80065b8:	f7fa fa98 	bl	8000aec <__aeabi_dcmplt>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d163      	bne.n	8006688 <_dtoa_r+0x608>
 80065c0:	4642      	mov	r2, r8
 80065c2:	464b      	mov	r3, r9
 80065c4:	4936      	ldr	r1, [pc, #216]	; (80066a0 <_dtoa_r+0x620>)
 80065c6:	2000      	movs	r0, #0
 80065c8:	f7f9 fe66 	bl	8000298 <__aeabi_dsub>
 80065cc:	4652      	mov	r2, sl
 80065ce:	465b      	mov	r3, fp
 80065d0:	f7fa fa8c 	bl	8000aec <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 80b5 	bne.w	8006744 <_dtoa_r+0x6c4>
 80065da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065dc:	429d      	cmp	r5, r3
 80065de:	d081      	beq.n	80064e4 <_dtoa_r+0x464>
 80065e0:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <_dtoa_r+0x624>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	4650      	mov	r0, sl
 80065e6:	4659      	mov	r1, fp
 80065e8:	f7fa f80e 	bl	8000608 <__aeabi_dmul>
 80065ec:	4b2d      	ldr	r3, [pc, #180]	; (80066a4 <_dtoa_r+0x624>)
 80065ee:	4682      	mov	sl, r0
 80065f0:	468b      	mov	fp, r1
 80065f2:	4640      	mov	r0, r8
 80065f4:	4649      	mov	r1, r9
 80065f6:	2200      	movs	r2, #0
 80065f8:	f7fa f806 	bl	8000608 <__aeabi_dmul>
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	e7c6      	b.n	8006590 <_dtoa_r+0x510>
 8006602:	4650      	mov	r0, sl
 8006604:	4659      	mov	r1, fp
 8006606:	f7f9 ffff 	bl	8000608 <__aeabi_dmul>
 800660a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800660c:	9d01      	ldr	r5, [sp, #4]
 800660e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006610:	4682      	mov	sl, r0
 8006612:	468b      	mov	fp, r1
 8006614:	4649      	mov	r1, r9
 8006616:	4640      	mov	r0, r8
 8006618:	f7fa faa6 	bl	8000b68 <__aeabi_d2iz>
 800661c:	4606      	mov	r6, r0
 800661e:	f7f9 ff89 	bl	8000534 <__aeabi_i2d>
 8006622:	3630      	adds	r6, #48	; 0x30
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	f7f9 fe34 	bl	8000298 <__aeabi_dsub>
 8006630:	f805 6b01 	strb.w	r6, [r5], #1
 8006634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006636:	429d      	cmp	r5, r3
 8006638:	4680      	mov	r8, r0
 800663a:	4689      	mov	r9, r1
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	d124      	bne.n	800668c <_dtoa_r+0x60c>
 8006642:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <_dtoa_r+0x630>)
 8006644:	4650      	mov	r0, sl
 8006646:	4659      	mov	r1, fp
 8006648:	f7f9 fe28 	bl	800029c <__adddf3>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4640      	mov	r0, r8
 8006652:	4649      	mov	r1, r9
 8006654:	f7fa fa68 	bl	8000b28 <__aeabi_dcmpgt>
 8006658:	2800      	cmp	r0, #0
 800665a:	d173      	bne.n	8006744 <_dtoa_r+0x6c4>
 800665c:	4652      	mov	r2, sl
 800665e:	465b      	mov	r3, fp
 8006660:	4913      	ldr	r1, [pc, #76]	; (80066b0 <_dtoa_r+0x630>)
 8006662:	2000      	movs	r0, #0
 8006664:	f7f9 fe18 	bl	8000298 <__aeabi_dsub>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4640      	mov	r0, r8
 800666e:	4649      	mov	r1, r9
 8006670:	f7fa fa3c 	bl	8000aec <__aeabi_dcmplt>
 8006674:	2800      	cmp	r0, #0
 8006676:	f43f af35 	beq.w	80064e4 <_dtoa_r+0x464>
 800667a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800667c:	1e6b      	subs	r3, r5, #1
 800667e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006680:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006684:	2b30      	cmp	r3, #48	; 0x30
 8006686:	d0f8      	beq.n	800667a <_dtoa_r+0x5fa>
 8006688:	9700      	str	r7, [sp, #0]
 800668a:	e049      	b.n	8006720 <_dtoa_r+0x6a0>
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <_dtoa_r+0x624>)
 800668e:	f7f9 ffbb 	bl	8000608 <__aeabi_dmul>
 8006692:	4680      	mov	r8, r0
 8006694:	4689      	mov	r9, r1
 8006696:	e7bd      	b.n	8006614 <_dtoa_r+0x594>
 8006698:	080085d0 	.word	0x080085d0
 800669c:	080085a8 	.word	0x080085a8
 80066a0:	3ff00000 	.word	0x3ff00000
 80066a4:	40240000 	.word	0x40240000
 80066a8:	401c0000 	.word	0x401c0000
 80066ac:	40140000 	.word	0x40140000
 80066b0:	3fe00000 	.word	0x3fe00000
 80066b4:	9d01      	ldr	r5, [sp, #4]
 80066b6:	4656      	mov	r6, sl
 80066b8:	465f      	mov	r7, fp
 80066ba:	4642      	mov	r2, r8
 80066bc:	464b      	mov	r3, r9
 80066be:	4630      	mov	r0, r6
 80066c0:	4639      	mov	r1, r7
 80066c2:	f7fa f8cb 	bl	800085c <__aeabi_ddiv>
 80066c6:	f7fa fa4f 	bl	8000b68 <__aeabi_d2iz>
 80066ca:	4682      	mov	sl, r0
 80066cc:	f7f9 ff32 	bl	8000534 <__aeabi_i2d>
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	f7f9 ff98 	bl	8000608 <__aeabi_dmul>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80066e4:	f7f9 fdd8 	bl	8000298 <__aeabi_dsub>
 80066e8:	f805 6b01 	strb.w	r6, [r5], #1
 80066ec:	9e01      	ldr	r6, [sp, #4]
 80066ee:	9f03      	ldr	r7, [sp, #12]
 80066f0:	1bae      	subs	r6, r5, r6
 80066f2:	42b7      	cmp	r7, r6
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	d135      	bne.n	8006766 <_dtoa_r+0x6e6>
 80066fa:	f7f9 fdcf 	bl	800029c <__adddf3>
 80066fe:	4642      	mov	r2, r8
 8006700:	464b      	mov	r3, r9
 8006702:	4606      	mov	r6, r0
 8006704:	460f      	mov	r7, r1
 8006706:	f7fa fa0f 	bl	8000b28 <__aeabi_dcmpgt>
 800670a:	b9d0      	cbnz	r0, 8006742 <_dtoa_r+0x6c2>
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f7fa f9e0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006718:	b110      	cbz	r0, 8006720 <_dtoa_r+0x6a0>
 800671a:	f01a 0f01 	tst.w	sl, #1
 800671e:	d110      	bne.n	8006742 <_dtoa_r+0x6c2>
 8006720:	4620      	mov	r0, r4
 8006722:	ee18 1a10 	vmov	r1, s16
 8006726:	f000 faf3 	bl	8006d10 <_Bfree>
 800672a:	2300      	movs	r3, #0
 800672c:	9800      	ldr	r0, [sp, #0]
 800672e:	702b      	strb	r3, [r5, #0]
 8006730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006732:	3001      	adds	r0, #1
 8006734:	6018      	str	r0, [r3, #0]
 8006736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006738:	2b00      	cmp	r3, #0
 800673a:	f43f acf1 	beq.w	8006120 <_dtoa_r+0xa0>
 800673e:	601d      	str	r5, [r3, #0]
 8006740:	e4ee      	b.n	8006120 <_dtoa_r+0xa0>
 8006742:	9f00      	ldr	r7, [sp, #0]
 8006744:	462b      	mov	r3, r5
 8006746:	461d      	mov	r5, r3
 8006748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800674c:	2a39      	cmp	r2, #57	; 0x39
 800674e:	d106      	bne.n	800675e <_dtoa_r+0x6de>
 8006750:	9a01      	ldr	r2, [sp, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d1f7      	bne.n	8006746 <_dtoa_r+0x6c6>
 8006756:	9901      	ldr	r1, [sp, #4]
 8006758:	2230      	movs	r2, #48	; 0x30
 800675a:	3701      	adds	r7, #1
 800675c:	700a      	strb	r2, [r1, #0]
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	3201      	adds	r2, #1
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e790      	b.n	8006688 <_dtoa_r+0x608>
 8006766:	4ba6      	ldr	r3, [pc, #664]	; (8006a00 <_dtoa_r+0x980>)
 8006768:	2200      	movs	r2, #0
 800676a:	f7f9 ff4d 	bl	8000608 <__aeabi_dmul>
 800676e:	2200      	movs	r2, #0
 8006770:	2300      	movs	r3, #0
 8006772:	4606      	mov	r6, r0
 8006774:	460f      	mov	r7, r1
 8006776:	f7fa f9af 	bl	8000ad8 <__aeabi_dcmpeq>
 800677a:	2800      	cmp	r0, #0
 800677c:	d09d      	beq.n	80066ba <_dtoa_r+0x63a>
 800677e:	e7cf      	b.n	8006720 <_dtoa_r+0x6a0>
 8006780:	9a08      	ldr	r2, [sp, #32]
 8006782:	2a00      	cmp	r2, #0
 8006784:	f000 80d7 	beq.w	8006936 <_dtoa_r+0x8b6>
 8006788:	9a06      	ldr	r2, [sp, #24]
 800678a:	2a01      	cmp	r2, #1
 800678c:	f300 80ba 	bgt.w	8006904 <_dtoa_r+0x884>
 8006790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006792:	2a00      	cmp	r2, #0
 8006794:	f000 80b2 	beq.w	80068fc <_dtoa_r+0x87c>
 8006798:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800679c:	9e07      	ldr	r6, [sp, #28]
 800679e:	9d04      	ldr	r5, [sp, #16]
 80067a0:	9a04      	ldr	r2, [sp, #16]
 80067a2:	441a      	add	r2, r3
 80067a4:	9204      	str	r2, [sp, #16]
 80067a6:	9a05      	ldr	r2, [sp, #20]
 80067a8:	2101      	movs	r1, #1
 80067aa:	441a      	add	r2, r3
 80067ac:	4620      	mov	r0, r4
 80067ae:	9205      	str	r2, [sp, #20]
 80067b0:	f000 fb66 	bl	8006e80 <__i2b>
 80067b4:	4607      	mov	r7, r0
 80067b6:	2d00      	cmp	r5, #0
 80067b8:	dd0c      	ble.n	80067d4 <_dtoa_r+0x754>
 80067ba:	9b05      	ldr	r3, [sp, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dd09      	ble.n	80067d4 <_dtoa_r+0x754>
 80067c0:	42ab      	cmp	r3, r5
 80067c2:	9a04      	ldr	r2, [sp, #16]
 80067c4:	bfa8      	it	ge
 80067c6:	462b      	movge	r3, r5
 80067c8:	1ad2      	subs	r2, r2, r3
 80067ca:	9204      	str	r2, [sp, #16]
 80067cc:	9a05      	ldr	r2, [sp, #20]
 80067ce:	1aed      	subs	r5, r5, r3
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	9b07      	ldr	r3, [sp, #28]
 80067d6:	b31b      	cbz	r3, 8006820 <_dtoa_r+0x7a0>
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80af 	beq.w	800693e <_dtoa_r+0x8be>
 80067e0:	2e00      	cmp	r6, #0
 80067e2:	dd13      	ble.n	800680c <_dtoa_r+0x78c>
 80067e4:	4639      	mov	r1, r7
 80067e6:	4632      	mov	r2, r6
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fc09 	bl	8007000 <__pow5mult>
 80067ee:	ee18 2a10 	vmov	r2, s16
 80067f2:	4601      	mov	r1, r0
 80067f4:	4607      	mov	r7, r0
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 fb58 	bl	8006eac <__multiply>
 80067fc:	ee18 1a10 	vmov	r1, s16
 8006800:	4680      	mov	r8, r0
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fa84 	bl	8006d10 <_Bfree>
 8006808:	ee08 8a10 	vmov	s16, r8
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	1b9a      	subs	r2, r3, r6
 8006810:	d006      	beq.n	8006820 <_dtoa_r+0x7a0>
 8006812:	ee18 1a10 	vmov	r1, s16
 8006816:	4620      	mov	r0, r4
 8006818:	f000 fbf2 	bl	8007000 <__pow5mult>
 800681c:	ee08 0a10 	vmov	s16, r0
 8006820:	2101      	movs	r1, #1
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fb2c 	bl	8006e80 <__i2b>
 8006828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682a:	2b00      	cmp	r3, #0
 800682c:	4606      	mov	r6, r0
 800682e:	f340 8088 	ble.w	8006942 <_dtoa_r+0x8c2>
 8006832:	461a      	mov	r2, r3
 8006834:	4601      	mov	r1, r0
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fbe2 	bl	8007000 <__pow5mult>
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	2b01      	cmp	r3, #1
 8006840:	4606      	mov	r6, r0
 8006842:	f340 8081 	ble.w	8006948 <_dtoa_r+0x8c8>
 8006846:	f04f 0800 	mov.w	r8, #0
 800684a:	6933      	ldr	r3, [r6, #16]
 800684c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006850:	6918      	ldr	r0, [r3, #16]
 8006852:	f000 fac5 	bl	8006de0 <__hi0bits>
 8006856:	f1c0 0020 	rsb	r0, r0, #32
 800685a:	9b05      	ldr	r3, [sp, #20]
 800685c:	4418      	add	r0, r3
 800685e:	f010 001f 	ands.w	r0, r0, #31
 8006862:	f000 8092 	beq.w	800698a <_dtoa_r+0x90a>
 8006866:	f1c0 0320 	rsb	r3, r0, #32
 800686a:	2b04      	cmp	r3, #4
 800686c:	f340 808a 	ble.w	8006984 <_dtoa_r+0x904>
 8006870:	f1c0 001c 	rsb	r0, r0, #28
 8006874:	9b04      	ldr	r3, [sp, #16]
 8006876:	4403      	add	r3, r0
 8006878:	9304      	str	r3, [sp, #16]
 800687a:	9b05      	ldr	r3, [sp, #20]
 800687c:	4403      	add	r3, r0
 800687e:	4405      	add	r5, r0
 8006880:	9305      	str	r3, [sp, #20]
 8006882:	9b04      	ldr	r3, [sp, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	dd07      	ble.n	8006898 <_dtoa_r+0x818>
 8006888:	ee18 1a10 	vmov	r1, s16
 800688c:	461a      	mov	r2, r3
 800688e:	4620      	mov	r0, r4
 8006890:	f000 fc10 	bl	80070b4 <__lshift>
 8006894:	ee08 0a10 	vmov	s16, r0
 8006898:	9b05      	ldr	r3, [sp, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	dd05      	ble.n	80068aa <_dtoa_r+0x82a>
 800689e:	4631      	mov	r1, r6
 80068a0:	461a      	mov	r2, r3
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 fc06 	bl	80070b4 <__lshift>
 80068a8:	4606      	mov	r6, r0
 80068aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d06e      	beq.n	800698e <_dtoa_r+0x90e>
 80068b0:	ee18 0a10 	vmov	r0, s16
 80068b4:	4631      	mov	r1, r6
 80068b6:	f000 fc6d 	bl	8007194 <__mcmp>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	da67      	bge.n	800698e <_dtoa_r+0x90e>
 80068be:	9b00      	ldr	r3, [sp, #0]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	ee18 1a10 	vmov	r1, s16
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	220a      	movs	r2, #10
 80068ca:	2300      	movs	r3, #0
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fa41 	bl	8006d54 <__multadd>
 80068d2:	9b08      	ldr	r3, [sp, #32]
 80068d4:	ee08 0a10 	vmov	s16, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 81b1 	beq.w	8006c40 <_dtoa_r+0xbc0>
 80068de:	2300      	movs	r3, #0
 80068e0:	4639      	mov	r1, r7
 80068e2:	220a      	movs	r2, #10
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 fa35 	bl	8006d54 <__multadd>
 80068ea:	9b02      	ldr	r3, [sp, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	4607      	mov	r7, r0
 80068f0:	f300 808e 	bgt.w	8006a10 <_dtoa_r+0x990>
 80068f4:	9b06      	ldr	r3, [sp, #24]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	dc51      	bgt.n	800699e <_dtoa_r+0x91e>
 80068fa:	e089      	b.n	8006a10 <_dtoa_r+0x990>
 80068fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006902:	e74b      	b.n	800679c <_dtoa_r+0x71c>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	1e5e      	subs	r6, r3, #1
 8006908:	9b07      	ldr	r3, [sp, #28]
 800690a:	42b3      	cmp	r3, r6
 800690c:	bfbf      	itttt	lt
 800690e:	9b07      	ldrlt	r3, [sp, #28]
 8006910:	9607      	strlt	r6, [sp, #28]
 8006912:	1af2      	sublt	r2, r6, r3
 8006914:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006916:	bfb6      	itet	lt
 8006918:	189b      	addlt	r3, r3, r2
 800691a:	1b9e      	subge	r6, r3, r6
 800691c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800691e:	9b03      	ldr	r3, [sp, #12]
 8006920:	bfb8      	it	lt
 8006922:	2600      	movlt	r6, #0
 8006924:	2b00      	cmp	r3, #0
 8006926:	bfb7      	itett	lt
 8006928:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800692c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006930:	1a9d      	sublt	r5, r3, r2
 8006932:	2300      	movlt	r3, #0
 8006934:	e734      	b.n	80067a0 <_dtoa_r+0x720>
 8006936:	9e07      	ldr	r6, [sp, #28]
 8006938:	9d04      	ldr	r5, [sp, #16]
 800693a:	9f08      	ldr	r7, [sp, #32]
 800693c:	e73b      	b.n	80067b6 <_dtoa_r+0x736>
 800693e:	9a07      	ldr	r2, [sp, #28]
 8006940:	e767      	b.n	8006812 <_dtoa_r+0x792>
 8006942:	9b06      	ldr	r3, [sp, #24]
 8006944:	2b01      	cmp	r3, #1
 8006946:	dc18      	bgt.n	800697a <_dtoa_r+0x8fa>
 8006948:	f1ba 0f00 	cmp.w	sl, #0
 800694c:	d115      	bne.n	800697a <_dtoa_r+0x8fa>
 800694e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006952:	b993      	cbnz	r3, 800697a <_dtoa_r+0x8fa>
 8006954:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006958:	0d1b      	lsrs	r3, r3, #20
 800695a:	051b      	lsls	r3, r3, #20
 800695c:	b183      	cbz	r3, 8006980 <_dtoa_r+0x900>
 800695e:	9b04      	ldr	r3, [sp, #16]
 8006960:	3301      	adds	r3, #1
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	9b05      	ldr	r3, [sp, #20]
 8006966:	3301      	adds	r3, #1
 8006968:	9305      	str	r3, [sp, #20]
 800696a:	f04f 0801 	mov.w	r8, #1
 800696e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	f47f af6a 	bne.w	800684a <_dtoa_r+0x7ca>
 8006976:	2001      	movs	r0, #1
 8006978:	e76f      	b.n	800685a <_dtoa_r+0x7da>
 800697a:	f04f 0800 	mov.w	r8, #0
 800697e:	e7f6      	b.n	800696e <_dtoa_r+0x8ee>
 8006980:	4698      	mov	r8, r3
 8006982:	e7f4      	b.n	800696e <_dtoa_r+0x8ee>
 8006984:	f43f af7d 	beq.w	8006882 <_dtoa_r+0x802>
 8006988:	4618      	mov	r0, r3
 800698a:	301c      	adds	r0, #28
 800698c:	e772      	b.n	8006874 <_dtoa_r+0x7f4>
 800698e:	9b03      	ldr	r3, [sp, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dc37      	bgt.n	8006a04 <_dtoa_r+0x984>
 8006994:	9b06      	ldr	r3, [sp, #24]
 8006996:	2b02      	cmp	r3, #2
 8006998:	dd34      	ble.n	8006a04 <_dtoa_r+0x984>
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	9302      	str	r3, [sp, #8]
 800699e:	9b02      	ldr	r3, [sp, #8]
 80069a0:	b96b      	cbnz	r3, 80069be <_dtoa_r+0x93e>
 80069a2:	4631      	mov	r1, r6
 80069a4:	2205      	movs	r2, #5
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f9d4 	bl	8006d54 <__multadd>
 80069ac:	4601      	mov	r1, r0
 80069ae:	4606      	mov	r6, r0
 80069b0:	ee18 0a10 	vmov	r0, s16
 80069b4:	f000 fbee 	bl	8007194 <__mcmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f73f adbb 	bgt.w	8006534 <_dtoa_r+0x4b4>
 80069be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c0:	9d01      	ldr	r5, [sp, #4]
 80069c2:	43db      	mvns	r3, r3
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	f04f 0800 	mov.w	r8, #0
 80069ca:	4631      	mov	r1, r6
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 f99f 	bl	8006d10 <_Bfree>
 80069d2:	2f00      	cmp	r7, #0
 80069d4:	f43f aea4 	beq.w	8006720 <_dtoa_r+0x6a0>
 80069d8:	f1b8 0f00 	cmp.w	r8, #0
 80069dc:	d005      	beq.n	80069ea <_dtoa_r+0x96a>
 80069de:	45b8      	cmp	r8, r7
 80069e0:	d003      	beq.n	80069ea <_dtoa_r+0x96a>
 80069e2:	4641      	mov	r1, r8
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 f993 	bl	8006d10 <_Bfree>
 80069ea:	4639      	mov	r1, r7
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 f98f 	bl	8006d10 <_Bfree>
 80069f2:	e695      	b.n	8006720 <_dtoa_r+0x6a0>
 80069f4:	2600      	movs	r6, #0
 80069f6:	4637      	mov	r7, r6
 80069f8:	e7e1      	b.n	80069be <_dtoa_r+0x93e>
 80069fa:	9700      	str	r7, [sp, #0]
 80069fc:	4637      	mov	r7, r6
 80069fe:	e599      	b.n	8006534 <_dtoa_r+0x4b4>
 8006a00:	40240000 	.word	0x40240000
 8006a04:	9b08      	ldr	r3, [sp, #32]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 80ca 	beq.w	8006ba0 <_dtoa_r+0xb20>
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	9302      	str	r3, [sp, #8]
 8006a10:	2d00      	cmp	r5, #0
 8006a12:	dd05      	ble.n	8006a20 <_dtoa_r+0x9a0>
 8006a14:	4639      	mov	r1, r7
 8006a16:	462a      	mov	r2, r5
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 fb4b 	bl	80070b4 <__lshift>
 8006a1e:	4607      	mov	r7, r0
 8006a20:	f1b8 0f00 	cmp.w	r8, #0
 8006a24:	d05b      	beq.n	8006ade <_dtoa_r+0xa5e>
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 f931 	bl	8006c90 <_Balloc>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	b928      	cbnz	r0, 8006a3e <_dtoa_r+0x9be>
 8006a32:	4b87      	ldr	r3, [pc, #540]	; (8006c50 <_dtoa_r+0xbd0>)
 8006a34:	4602      	mov	r2, r0
 8006a36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a3a:	f7ff bb3b 	b.w	80060b4 <_dtoa_r+0x34>
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	3202      	adds	r2, #2
 8006a42:	0092      	lsls	r2, r2, #2
 8006a44:	f107 010c 	add.w	r1, r7, #12
 8006a48:	300c      	adds	r0, #12
 8006a4a:	f000 f913 	bl	8006c74 <memcpy>
 8006a4e:	2201      	movs	r2, #1
 8006a50:	4629      	mov	r1, r5
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 fb2e 	bl	80070b4 <__lshift>
 8006a58:	9b01      	ldr	r3, [sp, #4]
 8006a5a:	f103 0901 	add.w	r9, r3, #1
 8006a5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006a62:	4413      	add	r3, r2
 8006a64:	9305      	str	r3, [sp, #20]
 8006a66:	f00a 0301 	and.w	r3, sl, #1
 8006a6a:	46b8      	mov	r8, r7
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	4607      	mov	r7, r0
 8006a70:	4631      	mov	r1, r6
 8006a72:	ee18 0a10 	vmov	r0, s16
 8006a76:	f7ff fa75 	bl	8005f64 <quorem>
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	9002      	str	r0, [sp, #8]
 8006a7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a82:	ee18 0a10 	vmov	r0, s16
 8006a86:	f000 fb85 	bl	8007194 <__mcmp>
 8006a8a:	463a      	mov	r2, r7
 8006a8c:	9003      	str	r0, [sp, #12]
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fb9b 	bl	80071cc <__mdiff>
 8006a96:	68c2      	ldr	r2, [r0, #12]
 8006a98:	f109 3bff 	add.w	fp, r9, #4294967295
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	bb02      	cbnz	r2, 8006ae2 <_dtoa_r+0xa62>
 8006aa0:	4601      	mov	r1, r0
 8006aa2:	ee18 0a10 	vmov	r0, s16
 8006aa6:	f000 fb75 	bl	8007194 <__mcmp>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	4629      	mov	r1, r5
 8006aae:	4620      	mov	r0, r4
 8006ab0:	9207      	str	r2, [sp, #28]
 8006ab2:	f000 f92d 	bl	8006d10 <_Bfree>
 8006ab6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006aba:	ea43 0102 	orr.w	r1, r3, r2
 8006abe:	9b04      	ldr	r3, [sp, #16]
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	464d      	mov	r5, r9
 8006ac4:	d10f      	bne.n	8006ae6 <_dtoa_r+0xa66>
 8006ac6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006aca:	d02a      	beq.n	8006b22 <_dtoa_r+0xaa2>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	dd02      	ble.n	8006ad8 <_dtoa_r+0xa58>
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ad8:	f88b a000 	strb.w	sl, [fp]
 8006adc:	e775      	b.n	80069ca <_dtoa_r+0x94a>
 8006ade:	4638      	mov	r0, r7
 8006ae0:	e7ba      	b.n	8006a58 <_dtoa_r+0x9d8>
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	e7e2      	b.n	8006aac <_dtoa_r+0xa2c>
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	db04      	blt.n	8006af6 <_dtoa_r+0xa76>
 8006aec:	9906      	ldr	r1, [sp, #24]
 8006aee:	430b      	orrs	r3, r1
 8006af0:	9904      	ldr	r1, [sp, #16]
 8006af2:	430b      	orrs	r3, r1
 8006af4:	d122      	bne.n	8006b3c <_dtoa_r+0xabc>
 8006af6:	2a00      	cmp	r2, #0
 8006af8:	ddee      	ble.n	8006ad8 <_dtoa_r+0xa58>
 8006afa:	ee18 1a10 	vmov	r1, s16
 8006afe:	2201      	movs	r2, #1
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fad7 	bl	80070b4 <__lshift>
 8006b06:	4631      	mov	r1, r6
 8006b08:	ee08 0a10 	vmov	s16, r0
 8006b0c:	f000 fb42 	bl	8007194 <__mcmp>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	dc03      	bgt.n	8006b1c <_dtoa_r+0xa9c>
 8006b14:	d1e0      	bne.n	8006ad8 <_dtoa_r+0xa58>
 8006b16:	f01a 0f01 	tst.w	sl, #1
 8006b1a:	d0dd      	beq.n	8006ad8 <_dtoa_r+0xa58>
 8006b1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b20:	d1d7      	bne.n	8006ad2 <_dtoa_r+0xa52>
 8006b22:	2339      	movs	r3, #57	; 0x39
 8006b24:	f88b 3000 	strb.w	r3, [fp]
 8006b28:	462b      	mov	r3, r5
 8006b2a:	461d      	mov	r5, r3
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b32:	2a39      	cmp	r2, #57	; 0x39
 8006b34:	d071      	beq.n	8006c1a <_dtoa_r+0xb9a>
 8006b36:	3201      	adds	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	e746      	b.n	80069ca <_dtoa_r+0x94a>
 8006b3c:	2a00      	cmp	r2, #0
 8006b3e:	dd07      	ble.n	8006b50 <_dtoa_r+0xad0>
 8006b40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b44:	d0ed      	beq.n	8006b22 <_dtoa_r+0xaa2>
 8006b46:	f10a 0301 	add.w	r3, sl, #1
 8006b4a:	f88b 3000 	strb.w	r3, [fp]
 8006b4e:	e73c      	b.n	80069ca <_dtoa_r+0x94a>
 8006b50:	9b05      	ldr	r3, [sp, #20]
 8006b52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b56:	4599      	cmp	r9, r3
 8006b58:	d047      	beq.n	8006bea <_dtoa_r+0xb6a>
 8006b5a:	ee18 1a10 	vmov	r1, s16
 8006b5e:	2300      	movs	r3, #0
 8006b60:	220a      	movs	r2, #10
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f8f6 	bl	8006d54 <__multadd>
 8006b68:	45b8      	cmp	r8, r7
 8006b6a:	ee08 0a10 	vmov	s16, r0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	f04f 020a 	mov.w	r2, #10
 8006b76:	4641      	mov	r1, r8
 8006b78:	4620      	mov	r0, r4
 8006b7a:	d106      	bne.n	8006b8a <_dtoa_r+0xb0a>
 8006b7c:	f000 f8ea 	bl	8006d54 <__multadd>
 8006b80:	4680      	mov	r8, r0
 8006b82:	4607      	mov	r7, r0
 8006b84:	f109 0901 	add.w	r9, r9, #1
 8006b88:	e772      	b.n	8006a70 <_dtoa_r+0x9f0>
 8006b8a:	f000 f8e3 	bl	8006d54 <__multadd>
 8006b8e:	4639      	mov	r1, r7
 8006b90:	4680      	mov	r8, r0
 8006b92:	2300      	movs	r3, #0
 8006b94:	220a      	movs	r2, #10
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 f8dc 	bl	8006d54 <__multadd>
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	e7f1      	b.n	8006b84 <_dtoa_r+0xb04>
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	9302      	str	r3, [sp, #8]
 8006ba4:	9d01      	ldr	r5, [sp, #4]
 8006ba6:	ee18 0a10 	vmov	r0, s16
 8006baa:	4631      	mov	r1, r6
 8006bac:	f7ff f9da 	bl	8005f64 <quorem>
 8006bb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006bb4:	9b01      	ldr	r3, [sp, #4]
 8006bb6:	f805 ab01 	strb.w	sl, [r5], #1
 8006bba:	1aea      	subs	r2, r5, r3
 8006bbc:	9b02      	ldr	r3, [sp, #8]
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	dd09      	ble.n	8006bd6 <_dtoa_r+0xb56>
 8006bc2:	ee18 1a10 	vmov	r1, s16
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	220a      	movs	r2, #10
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 f8c2 	bl	8006d54 <__multadd>
 8006bd0:	ee08 0a10 	vmov	s16, r0
 8006bd4:	e7e7      	b.n	8006ba6 <_dtoa_r+0xb26>
 8006bd6:	9b02      	ldr	r3, [sp, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bfc8      	it	gt
 8006bdc:	461d      	movgt	r5, r3
 8006bde:	9b01      	ldr	r3, [sp, #4]
 8006be0:	bfd8      	it	le
 8006be2:	2501      	movle	r5, #1
 8006be4:	441d      	add	r5, r3
 8006be6:	f04f 0800 	mov.w	r8, #0
 8006bea:	ee18 1a10 	vmov	r1, s16
 8006bee:	2201      	movs	r2, #1
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f000 fa5f 	bl	80070b4 <__lshift>
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	ee08 0a10 	vmov	s16, r0
 8006bfc:	f000 faca 	bl	8007194 <__mcmp>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	dc91      	bgt.n	8006b28 <_dtoa_r+0xaa8>
 8006c04:	d102      	bne.n	8006c0c <_dtoa_r+0xb8c>
 8006c06:	f01a 0f01 	tst.w	sl, #1
 8006c0a:	d18d      	bne.n	8006b28 <_dtoa_r+0xaa8>
 8006c0c:	462b      	mov	r3, r5
 8006c0e:	461d      	mov	r5, r3
 8006c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c14:	2a30      	cmp	r2, #48	; 0x30
 8006c16:	d0fa      	beq.n	8006c0e <_dtoa_r+0xb8e>
 8006c18:	e6d7      	b.n	80069ca <_dtoa_r+0x94a>
 8006c1a:	9a01      	ldr	r2, [sp, #4]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d184      	bne.n	8006b2a <_dtoa_r+0xaaa>
 8006c20:	9b00      	ldr	r3, [sp, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2331      	movs	r3, #49	; 0x31
 8006c28:	7013      	strb	r3, [r2, #0]
 8006c2a:	e6ce      	b.n	80069ca <_dtoa_r+0x94a>
 8006c2c:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <_dtoa_r+0xbd4>)
 8006c2e:	f7ff ba95 	b.w	800615c <_dtoa_r+0xdc>
 8006c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f47f aa6e 	bne.w	8006116 <_dtoa_r+0x96>
 8006c3a:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <_dtoa_r+0xbd8>)
 8006c3c:	f7ff ba8e 	b.w	800615c <_dtoa_r+0xdc>
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dcae      	bgt.n	8006ba4 <_dtoa_r+0xb24>
 8006c46:	9b06      	ldr	r3, [sp, #24]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	f73f aea8 	bgt.w	800699e <_dtoa_r+0x91e>
 8006c4e:	e7a9      	b.n	8006ba4 <_dtoa_r+0xb24>
 8006c50:	0800853b 	.word	0x0800853b
 8006c54:	08008498 	.word	0x08008498
 8006c58:	080084bc 	.word	0x080084bc

08006c5c <_localeconv_r>:
 8006c5c:	4800      	ldr	r0, [pc, #0]	; (8006c60 <_localeconv_r+0x4>)
 8006c5e:	4770      	bx	lr
 8006c60:	20000160 	.word	0x20000160

08006c64 <malloc>:
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <malloc+0xc>)
 8006c66:	4601      	mov	r1, r0
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	f000 bc17 	b.w	800749c <_malloc_r>
 8006c6e:	bf00      	nop
 8006c70:	2000000c 	.word	0x2000000c

08006c74 <memcpy>:
 8006c74:	440a      	add	r2, r1
 8006c76:	4291      	cmp	r1, r2
 8006c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c7c:	d100      	bne.n	8006c80 <memcpy+0xc>
 8006c7e:	4770      	bx	lr
 8006c80:	b510      	push	{r4, lr}
 8006c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c8a:	4291      	cmp	r1, r2
 8006c8c:	d1f9      	bne.n	8006c82 <memcpy+0xe>
 8006c8e:	bd10      	pop	{r4, pc}

08006c90 <_Balloc>:
 8006c90:	b570      	push	{r4, r5, r6, lr}
 8006c92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c94:	4604      	mov	r4, r0
 8006c96:	460d      	mov	r5, r1
 8006c98:	b976      	cbnz	r6, 8006cb8 <_Balloc+0x28>
 8006c9a:	2010      	movs	r0, #16
 8006c9c:	f7ff ffe2 	bl	8006c64 <malloc>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ca4:	b920      	cbnz	r0, 8006cb0 <_Balloc+0x20>
 8006ca6:	4b18      	ldr	r3, [pc, #96]	; (8006d08 <_Balloc+0x78>)
 8006ca8:	4818      	ldr	r0, [pc, #96]	; (8006d0c <_Balloc+0x7c>)
 8006caa:	2166      	movs	r1, #102	; 0x66
 8006cac:	f000 fdd6 	bl	800785c <__assert_func>
 8006cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cb4:	6006      	str	r6, [r0, #0]
 8006cb6:	60c6      	str	r6, [r0, #12]
 8006cb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006cba:	68f3      	ldr	r3, [r6, #12]
 8006cbc:	b183      	cbz	r3, 8006ce0 <_Balloc+0x50>
 8006cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cc6:	b9b8      	cbnz	r0, 8006cf8 <_Balloc+0x68>
 8006cc8:	2101      	movs	r1, #1
 8006cca:	fa01 f605 	lsl.w	r6, r1, r5
 8006cce:	1d72      	adds	r2, r6, #5
 8006cd0:	0092      	lsls	r2, r2, #2
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fb60 	bl	8007398 <_calloc_r>
 8006cd8:	b160      	cbz	r0, 8006cf4 <_Balloc+0x64>
 8006cda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cde:	e00e      	b.n	8006cfe <_Balloc+0x6e>
 8006ce0:	2221      	movs	r2, #33	; 0x21
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 fb57 	bl	8007398 <_calloc_r>
 8006cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cec:	60f0      	str	r0, [r6, #12]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e4      	bne.n	8006cbe <_Balloc+0x2e>
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	6802      	ldr	r2, [r0, #0]
 8006cfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d04:	e7f7      	b.n	8006cf6 <_Balloc+0x66>
 8006d06:	bf00      	nop
 8006d08:	080084c9 	.word	0x080084c9
 8006d0c:	0800854c 	.word	0x0800854c

08006d10 <_Bfree>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d14:	4605      	mov	r5, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	b976      	cbnz	r6, 8006d38 <_Bfree+0x28>
 8006d1a:	2010      	movs	r0, #16
 8006d1c:	f7ff ffa2 	bl	8006c64 <malloc>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6268      	str	r0, [r5, #36]	; 0x24
 8006d24:	b920      	cbnz	r0, 8006d30 <_Bfree+0x20>
 8006d26:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <_Bfree+0x3c>)
 8006d28:	4809      	ldr	r0, [pc, #36]	; (8006d50 <_Bfree+0x40>)
 8006d2a:	218a      	movs	r1, #138	; 0x8a
 8006d2c:	f000 fd96 	bl	800785c <__assert_func>
 8006d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d34:	6006      	str	r6, [r0, #0]
 8006d36:	60c6      	str	r6, [r0, #12]
 8006d38:	b13c      	cbz	r4, 8006d4a <_Bfree+0x3a>
 8006d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d3c:	6862      	ldr	r2, [r4, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d44:	6021      	str	r1, [r4, #0]
 8006d46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	080084c9 	.word	0x080084c9
 8006d50:	0800854c 	.word	0x0800854c

08006d54 <__multadd>:
 8006d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d58:	690d      	ldr	r5, [r1, #16]
 8006d5a:	4607      	mov	r7, r0
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	461e      	mov	r6, r3
 8006d60:	f101 0c14 	add.w	ip, r1, #20
 8006d64:	2000      	movs	r0, #0
 8006d66:	f8dc 3000 	ldr.w	r3, [ip]
 8006d6a:	b299      	uxth	r1, r3
 8006d6c:	fb02 6101 	mla	r1, r2, r1, r6
 8006d70:	0c1e      	lsrs	r6, r3, #16
 8006d72:	0c0b      	lsrs	r3, r1, #16
 8006d74:	fb02 3306 	mla	r3, r2, r6, r3
 8006d78:	b289      	uxth	r1, r1
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d80:	4285      	cmp	r5, r0
 8006d82:	f84c 1b04 	str.w	r1, [ip], #4
 8006d86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d8a:	dcec      	bgt.n	8006d66 <__multadd+0x12>
 8006d8c:	b30e      	cbz	r6, 8006dd2 <__multadd+0x7e>
 8006d8e:	68a3      	ldr	r3, [r4, #8]
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	dc19      	bgt.n	8006dc8 <__multadd+0x74>
 8006d94:	6861      	ldr	r1, [r4, #4]
 8006d96:	4638      	mov	r0, r7
 8006d98:	3101      	adds	r1, #1
 8006d9a:	f7ff ff79 	bl	8006c90 <_Balloc>
 8006d9e:	4680      	mov	r8, r0
 8006da0:	b928      	cbnz	r0, 8006dae <__multadd+0x5a>
 8006da2:	4602      	mov	r2, r0
 8006da4:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <__multadd+0x84>)
 8006da6:	480d      	ldr	r0, [pc, #52]	; (8006ddc <__multadd+0x88>)
 8006da8:	21b5      	movs	r1, #181	; 0xb5
 8006daa:	f000 fd57 	bl	800785c <__assert_func>
 8006dae:	6922      	ldr	r2, [r4, #16]
 8006db0:	3202      	adds	r2, #2
 8006db2:	f104 010c 	add.w	r1, r4, #12
 8006db6:	0092      	lsls	r2, r2, #2
 8006db8:	300c      	adds	r0, #12
 8006dba:	f7ff ff5b 	bl	8006c74 <memcpy>
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff ffa5 	bl	8006d10 <_Bfree>
 8006dc6:	4644      	mov	r4, r8
 8006dc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dcc:	3501      	adds	r5, #1
 8006dce:	615e      	str	r6, [r3, #20]
 8006dd0:	6125      	str	r5, [r4, #16]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd8:	0800853b 	.word	0x0800853b
 8006ddc:	0800854c 	.word	0x0800854c

08006de0 <__hi0bits>:
 8006de0:	0c03      	lsrs	r3, r0, #16
 8006de2:	041b      	lsls	r3, r3, #16
 8006de4:	b9d3      	cbnz	r3, 8006e1c <__hi0bits+0x3c>
 8006de6:	0400      	lsls	r0, r0, #16
 8006de8:	2310      	movs	r3, #16
 8006dea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006dee:	bf04      	itt	eq
 8006df0:	0200      	lsleq	r0, r0, #8
 8006df2:	3308      	addeq	r3, #8
 8006df4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006df8:	bf04      	itt	eq
 8006dfa:	0100      	lsleq	r0, r0, #4
 8006dfc:	3304      	addeq	r3, #4
 8006dfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e02:	bf04      	itt	eq
 8006e04:	0080      	lsleq	r0, r0, #2
 8006e06:	3302      	addeq	r3, #2
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	db05      	blt.n	8006e18 <__hi0bits+0x38>
 8006e0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e10:	f103 0301 	add.w	r3, r3, #1
 8006e14:	bf08      	it	eq
 8006e16:	2320      	moveq	r3, #32
 8006e18:	4618      	mov	r0, r3
 8006e1a:	4770      	bx	lr
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e7e4      	b.n	8006dea <__hi0bits+0xa>

08006e20 <__lo0bits>:
 8006e20:	6803      	ldr	r3, [r0, #0]
 8006e22:	f013 0207 	ands.w	r2, r3, #7
 8006e26:	4601      	mov	r1, r0
 8006e28:	d00b      	beq.n	8006e42 <__lo0bits+0x22>
 8006e2a:	07da      	lsls	r2, r3, #31
 8006e2c:	d423      	bmi.n	8006e76 <__lo0bits+0x56>
 8006e2e:	0798      	lsls	r0, r3, #30
 8006e30:	bf49      	itett	mi
 8006e32:	085b      	lsrmi	r3, r3, #1
 8006e34:	089b      	lsrpl	r3, r3, #2
 8006e36:	2001      	movmi	r0, #1
 8006e38:	600b      	strmi	r3, [r1, #0]
 8006e3a:	bf5c      	itt	pl
 8006e3c:	600b      	strpl	r3, [r1, #0]
 8006e3e:	2002      	movpl	r0, #2
 8006e40:	4770      	bx	lr
 8006e42:	b298      	uxth	r0, r3
 8006e44:	b9a8      	cbnz	r0, 8006e72 <__lo0bits+0x52>
 8006e46:	0c1b      	lsrs	r3, r3, #16
 8006e48:	2010      	movs	r0, #16
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	b90a      	cbnz	r2, 8006e52 <__lo0bits+0x32>
 8006e4e:	3008      	adds	r0, #8
 8006e50:	0a1b      	lsrs	r3, r3, #8
 8006e52:	071a      	lsls	r2, r3, #28
 8006e54:	bf04      	itt	eq
 8006e56:	091b      	lsreq	r3, r3, #4
 8006e58:	3004      	addeq	r0, #4
 8006e5a:	079a      	lsls	r2, r3, #30
 8006e5c:	bf04      	itt	eq
 8006e5e:	089b      	lsreq	r3, r3, #2
 8006e60:	3002      	addeq	r0, #2
 8006e62:	07da      	lsls	r2, r3, #31
 8006e64:	d403      	bmi.n	8006e6e <__lo0bits+0x4e>
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	f100 0001 	add.w	r0, r0, #1
 8006e6c:	d005      	beq.n	8006e7a <__lo0bits+0x5a>
 8006e6e:	600b      	str	r3, [r1, #0]
 8006e70:	4770      	bx	lr
 8006e72:	4610      	mov	r0, r2
 8006e74:	e7e9      	b.n	8006e4a <__lo0bits+0x2a>
 8006e76:	2000      	movs	r0, #0
 8006e78:	4770      	bx	lr
 8006e7a:	2020      	movs	r0, #32
 8006e7c:	4770      	bx	lr
	...

08006e80 <__i2b>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	460c      	mov	r4, r1
 8006e84:	2101      	movs	r1, #1
 8006e86:	f7ff ff03 	bl	8006c90 <_Balloc>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	b928      	cbnz	r0, 8006e9a <__i2b+0x1a>
 8006e8e:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <__i2b+0x24>)
 8006e90:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <__i2b+0x28>)
 8006e92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e96:	f000 fce1 	bl	800785c <__assert_func>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	6144      	str	r4, [r0, #20]
 8006e9e:	6103      	str	r3, [r0, #16]
 8006ea0:	bd10      	pop	{r4, pc}
 8006ea2:	bf00      	nop
 8006ea4:	0800853b 	.word	0x0800853b
 8006ea8:	0800854c 	.word	0x0800854c

08006eac <__multiply>:
 8006eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	4691      	mov	r9, r2
 8006eb2:	690a      	ldr	r2, [r1, #16]
 8006eb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	bfb8      	it	lt
 8006ebc:	460b      	movlt	r3, r1
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	bfbc      	itt	lt
 8006ec2:	464c      	movlt	r4, r9
 8006ec4:	4699      	movlt	r9, r3
 8006ec6:	6927      	ldr	r7, [r4, #16]
 8006ec8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ecc:	68a3      	ldr	r3, [r4, #8]
 8006ece:	6861      	ldr	r1, [r4, #4]
 8006ed0:	eb07 060a 	add.w	r6, r7, sl
 8006ed4:	42b3      	cmp	r3, r6
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	bfb8      	it	lt
 8006eda:	3101      	addlt	r1, #1
 8006edc:	f7ff fed8 	bl	8006c90 <_Balloc>
 8006ee0:	b930      	cbnz	r0, 8006ef0 <__multiply+0x44>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	4b44      	ldr	r3, [pc, #272]	; (8006ff8 <__multiply+0x14c>)
 8006ee6:	4845      	ldr	r0, [pc, #276]	; (8006ffc <__multiply+0x150>)
 8006ee8:	f240 115d 	movw	r1, #349	; 0x15d
 8006eec:	f000 fcb6 	bl	800785c <__assert_func>
 8006ef0:	f100 0514 	add.w	r5, r0, #20
 8006ef4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ef8:	462b      	mov	r3, r5
 8006efa:	2200      	movs	r2, #0
 8006efc:	4543      	cmp	r3, r8
 8006efe:	d321      	bcc.n	8006f44 <__multiply+0x98>
 8006f00:	f104 0314 	add.w	r3, r4, #20
 8006f04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f08:	f109 0314 	add.w	r3, r9, #20
 8006f0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f10:	9202      	str	r2, [sp, #8]
 8006f12:	1b3a      	subs	r2, r7, r4
 8006f14:	3a15      	subs	r2, #21
 8006f16:	f022 0203 	bic.w	r2, r2, #3
 8006f1a:	3204      	adds	r2, #4
 8006f1c:	f104 0115 	add.w	r1, r4, #21
 8006f20:	428f      	cmp	r7, r1
 8006f22:	bf38      	it	cc
 8006f24:	2204      	movcc	r2, #4
 8006f26:	9201      	str	r2, [sp, #4]
 8006f28:	9a02      	ldr	r2, [sp, #8]
 8006f2a:	9303      	str	r3, [sp, #12]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d80c      	bhi.n	8006f4a <__multiply+0x9e>
 8006f30:	2e00      	cmp	r6, #0
 8006f32:	dd03      	ble.n	8006f3c <__multiply+0x90>
 8006f34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d05a      	beq.n	8006ff2 <__multiply+0x146>
 8006f3c:	6106      	str	r6, [r0, #16]
 8006f3e:	b005      	add	sp, #20
 8006f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f44:	f843 2b04 	str.w	r2, [r3], #4
 8006f48:	e7d8      	b.n	8006efc <__multiply+0x50>
 8006f4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f4e:	f1ba 0f00 	cmp.w	sl, #0
 8006f52:	d024      	beq.n	8006f9e <__multiply+0xf2>
 8006f54:	f104 0e14 	add.w	lr, r4, #20
 8006f58:	46a9      	mov	r9, r5
 8006f5a:	f04f 0c00 	mov.w	ip, #0
 8006f5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f62:	f8d9 1000 	ldr.w	r1, [r9]
 8006f66:	fa1f fb82 	uxth.w	fp, r2
 8006f6a:	b289      	uxth	r1, r1
 8006f6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f74:	f8d9 2000 	ldr.w	r2, [r9]
 8006f78:	4461      	add	r1, ip
 8006f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f86:	b289      	uxth	r1, r1
 8006f88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f8c:	4577      	cmp	r7, lr
 8006f8e:	f849 1b04 	str.w	r1, [r9], #4
 8006f92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f96:	d8e2      	bhi.n	8006f5e <__multiply+0xb2>
 8006f98:	9a01      	ldr	r2, [sp, #4]
 8006f9a:	f845 c002 	str.w	ip, [r5, r2]
 8006f9e:	9a03      	ldr	r2, [sp, #12]
 8006fa0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	f1b9 0f00 	cmp.w	r9, #0
 8006faa:	d020      	beq.n	8006fee <__multiply+0x142>
 8006fac:	6829      	ldr	r1, [r5, #0]
 8006fae:	f104 0c14 	add.w	ip, r4, #20
 8006fb2:	46ae      	mov	lr, r5
 8006fb4:	f04f 0a00 	mov.w	sl, #0
 8006fb8:	f8bc b000 	ldrh.w	fp, [ip]
 8006fbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006fc0:	fb09 220b 	mla	r2, r9, fp, r2
 8006fc4:	4492      	add	sl, r2
 8006fc6:	b289      	uxth	r1, r1
 8006fc8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006fcc:	f84e 1b04 	str.w	r1, [lr], #4
 8006fd0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006fd4:	f8be 1000 	ldrh.w	r1, [lr]
 8006fd8:	0c12      	lsrs	r2, r2, #16
 8006fda:	fb09 1102 	mla	r1, r9, r2, r1
 8006fde:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006fe2:	4567      	cmp	r7, ip
 8006fe4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fe8:	d8e6      	bhi.n	8006fb8 <__multiply+0x10c>
 8006fea:	9a01      	ldr	r2, [sp, #4]
 8006fec:	50a9      	str	r1, [r5, r2]
 8006fee:	3504      	adds	r5, #4
 8006ff0:	e79a      	b.n	8006f28 <__multiply+0x7c>
 8006ff2:	3e01      	subs	r6, #1
 8006ff4:	e79c      	b.n	8006f30 <__multiply+0x84>
 8006ff6:	bf00      	nop
 8006ff8:	0800853b 	.word	0x0800853b
 8006ffc:	0800854c 	.word	0x0800854c

08007000 <__pow5mult>:
 8007000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007004:	4615      	mov	r5, r2
 8007006:	f012 0203 	ands.w	r2, r2, #3
 800700a:	4606      	mov	r6, r0
 800700c:	460f      	mov	r7, r1
 800700e:	d007      	beq.n	8007020 <__pow5mult+0x20>
 8007010:	4c25      	ldr	r4, [pc, #148]	; (80070a8 <__pow5mult+0xa8>)
 8007012:	3a01      	subs	r2, #1
 8007014:	2300      	movs	r3, #0
 8007016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800701a:	f7ff fe9b 	bl	8006d54 <__multadd>
 800701e:	4607      	mov	r7, r0
 8007020:	10ad      	asrs	r5, r5, #2
 8007022:	d03d      	beq.n	80070a0 <__pow5mult+0xa0>
 8007024:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007026:	b97c      	cbnz	r4, 8007048 <__pow5mult+0x48>
 8007028:	2010      	movs	r0, #16
 800702a:	f7ff fe1b 	bl	8006c64 <malloc>
 800702e:	4602      	mov	r2, r0
 8007030:	6270      	str	r0, [r6, #36]	; 0x24
 8007032:	b928      	cbnz	r0, 8007040 <__pow5mult+0x40>
 8007034:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <__pow5mult+0xac>)
 8007036:	481e      	ldr	r0, [pc, #120]	; (80070b0 <__pow5mult+0xb0>)
 8007038:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800703c:	f000 fc0e 	bl	800785c <__assert_func>
 8007040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007044:	6004      	str	r4, [r0, #0]
 8007046:	60c4      	str	r4, [r0, #12]
 8007048:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800704c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007050:	b94c      	cbnz	r4, 8007066 <__pow5mult+0x66>
 8007052:	f240 2171 	movw	r1, #625	; 0x271
 8007056:	4630      	mov	r0, r6
 8007058:	f7ff ff12 	bl	8006e80 <__i2b>
 800705c:	2300      	movs	r3, #0
 800705e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007062:	4604      	mov	r4, r0
 8007064:	6003      	str	r3, [r0, #0]
 8007066:	f04f 0900 	mov.w	r9, #0
 800706a:	07eb      	lsls	r3, r5, #31
 800706c:	d50a      	bpl.n	8007084 <__pow5mult+0x84>
 800706e:	4639      	mov	r1, r7
 8007070:	4622      	mov	r2, r4
 8007072:	4630      	mov	r0, r6
 8007074:	f7ff ff1a 	bl	8006eac <__multiply>
 8007078:	4639      	mov	r1, r7
 800707a:	4680      	mov	r8, r0
 800707c:	4630      	mov	r0, r6
 800707e:	f7ff fe47 	bl	8006d10 <_Bfree>
 8007082:	4647      	mov	r7, r8
 8007084:	106d      	asrs	r5, r5, #1
 8007086:	d00b      	beq.n	80070a0 <__pow5mult+0xa0>
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	b938      	cbnz	r0, 800709c <__pow5mult+0x9c>
 800708c:	4622      	mov	r2, r4
 800708e:	4621      	mov	r1, r4
 8007090:	4630      	mov	r0, r6
 8007092:	f7ff ff0b 	bl	8006eac <__multiply>
 8007096:	6020      	str	r0, [r4, #0]
 8007098:	f8c0 9000 	str.w	r9, [r0]
 800709c:	4604      	mov	r4, r0
 800709e:	e7e4      	b.n	800706a <__pow5mult+0x6a>
 80070a0:	4638      	mov	r0, r7
 80070a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a6:	bf00      	nop
 80070a8:	08008698 	.word	0x08008698
 80070ac:	080084c9 	.word	0x080084c9
 80070b0:	0800854c 	.word	0x0800854c

080070b4 <__lshift>:
 80070b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	6849      	ldr	r1, [r1, #4]
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070c2:	68a3      	ldr	r3, [r4, #8]
 80070c4:	4607      	mov	r7, r0
 80070c6:	4691      	mov	r9, r2
 80070c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070cc:	f108 0601 	add.w	r6, r8, #1
 80070d0:	42b3      	cmp	r3, r6
 80070d2:	db0b      	blt.n	80070ec <__lshift+0x38>
 80070d4:	4638      	mov	r0, r7
 80070d6:	f7ff fddb 	bl	8006c90 <_Balloc>
 80070da:	4605      	mov	r5, r0
 80070dc:	b948      	cbnz	r0, 80070f2 <__lshift+0x3e>
 80070de:	4602      	mov	r2, r0
 80070e0:	4b2a      	ldr	r3, [pc, #168]	; (800718c <__lshift+0xd8>)
 80070e2:	482b      	ldr	r0, [pc, #172]	; (8007190 <__lshift+0xdc>)
 80070e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80070e8:	f000 fbb8 	bl	800785c <__assert_func>
 80070ec:	3101      	adds	r1, #1
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	e7ee      	b.n	80070d0 <__lshift+0x1c>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f100 0114 	add.w	r1, r0, #20
 80070f8:	f100 0210 	add.w	r2, r0, #16
 80070fc:	4618      	mov	r0, r3
 80070fe:	4553      	cmp	r3, sl
 8007100:	db37      	blt.n	8007172 <__lshift+0xbe>
 8007102:	6920      	ldr	r0, [r4, #16]
 8007104:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007108:	f104 0314 	add.w	r3, r4, #20
 800710c:	f019 091f 	ands.w	r9, r9, #31
 8007110:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007114:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007118:	d02f      	beq.n	800717a <__lshift+0xc6>
 800711a:	f1c9 0e20 	rsb	lr, r9, #32
 800711e:	468a      	mov	sl, r1
 8007120:	f04f 0c00 	mov.w	ip, #0
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	fa02 f209 	lsl.w	r2, r2, r9
 800712a:	ea42 020c 	orr.w	r2, r2, ip
 800712e:	f84a 2b04 	str.w	r2, [sl], #4
 8007132:	f853 2b04 	ldr.w	r2, [r3], #4
 8007136:	4298      	cmp	r0, r3
 8007138:	fa22 fc0e 	lsr.w	ip, r2, lr
 800713c:	d8f2      	bhi.n	8007124 <__lshift+0x70>
 800713e:	1b03      	subs	r3, r0, r4
 8007140:	3b15      	subs	r3, #21
 8007142:	f023 0303 	bic.w	r3, r3, #3
 8007146:	3304      	adds	r3, #4
 8007148:	f104 0215 	add.w	r2, r4, #21
 800714c:	4290      	cmp	r0, r2
 800714e:	bf38      	it	cc
 8007150:	2304      	movcc	r3, #4
 8007152:	f841 c003 	str.w	ip, [r1, r3]
 8007156:	f1bc 0f00 	cmp.w	ip, #0
 800715a:	d001      	beq.n	8007160 <__lshift+0xac>
 800715c:	f108 0602 	add.w	r6, r8, #2
 8007160:	3e01      	subs	r6, #1
 8007162:	4638      	mov	r0, r7
 8007164:	612e      	str	r6, [r5, #16]
 8007166:	4621      	mov	r1, r4
 8007168:	f7ff fdd2 	bl	8006d10 <_Bfree>
 800716c:	4628      	mov	r0, r5
 800716e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007172:	f842 0f04 	str.w	r0, [r2, #4]!
 8007176:	3301      	adds	r3, #1
 8007178:	e7c1      	b.n	80070fe <__lshift+0x4a>
 800717a:	3904      	subs	r1, #4
 800717c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007180:	f841 2f04 	str.w	r2, [r1, #4]!
 8007184:	4298      	cmp	r0, r3
 8007186:	d8f9      	bhi.n	800717c <__lshift+0xc8>
 8007188:	e7ea      	b.n	8007160 <__lshift+0xac>
 800718a:	bf00      	nop
 800718c:	0800853b 	.word	0x0800853b
 8007190:	0800854c 	.word	0x0800854c

08007194 <__mcmp>:
 8007194:	b530      	push	{r4, r5, lr}
 8007196:	6902      	ldr	r2, [r0, #16]
 8007198:	690c      	ldr	r4, [r1, #16]
 800719a:	1b12      	subs	r2, r2, r4
 800719c:	d10e      	bne.n	80071bc <__mcmp+0x28>
 800719e:	f100 0314 	add.w	r3, r0, #20
 80071a2:	3114      	adds	r1, #20
 80071a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80071a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80071b4:	42a5      	cmp	r5, r4
 80071b6:	d003      	beq.n	80071c0 <__mcmp+0x2c>
 80071b8:	d305      	bcc.n	80071c6 <__mcmp+0x32>
 80071ba:	2201      	movs	r2, #1
 80071bc:	4610      	mov	r0, r2
 80071be:	bd30      	pop	{r4, r5, pc}
 80071c0:	4283      	cmp	r3, r0
 80071c2:	d3f3      	bcc.n	80071ac <__mcmp+0x18>
 80071c4:	e7fa      	b.n	80071bc <__mcmp+0x28>
 80071c6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ca:	e7f7      	b.n	80071bc <__mcmp+0x28>

080071cc <__mdiff>:
 80071cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d0:	460c      	mov	r4, r1
 80071d2:	4606      	mov	r6, r0
 80071d4:	4611      	mov	r1, r2
 80071d6:	4620      	mov	r0, r4
 80071d8:	4690      	mov	r8, r2
 80071da:	f7ff ffdb 	bl	8007194 <__mcmp>
 80071de:	1e05      	subs	r5, r0, #0
 80071e0:	d110      	bne.n	8007204 <__mdiff+0x38>
 80071e2:	4629      	mov	r1, r5
 80071e4:	4630      	mov	r0, r6
 80071e6:	f7ff fd53 	bl	8006c90 <_Balloc>
 80071ea:	b930      	cbnz	r0, 80071fa <__mdiff+0x2e>
 80071ec:	4b3a      	ldr	r3, [pc, #232]	; (80072d8 <__mdiff+0x10c>)
 80071ee:	4602      	mov	r2, r0
 80071f0:	f240 2132 	movw	r1, #562	; 0x232
 80071f4:	4839      	ldr	r0, [pc, #228]	; (80072dc <__mdiff+0x110>)
 80071f6:	f000 fb31 	bl	800785c <__assert_func>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007204:	bfa4      	itt	ge
 8007206:	4643      	movge	r3, r8
 8007208:	46a0      	movge	r8, r4
 800720a:	4630      	mov	r0, r6
 800720c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007210:	bfa6      	itte	ge
 8007212:	461c      	movge	r4, r3
 8007214:	2500      	movge	r5, #0
 8007216:	2501      	movlt	r5, #1
 8007218:	f7ff fd3a 	bl	8006c90 <_Balloc>
 800721c:	b920      	cbnz	r0, 8007228 <__mdiff+0x5c>
 800721e:	4b2e      	ldr	r3, [pc, #184]	; (80072d8 <__mdiff+0x10c>)
 8007220:	4602      	mov	r2, r0
 8007222:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007226:	e7e5      	b.n	80071f4 <__mdiff+0x28>
 8007228:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800722c:	6926      	ldr	r6, [r4, #16]
 800722e:	60c5      	str	r5, [r0, #12]
 8007230:	f104 0914 	add.w	r9, r4, #20
 8007234:	f108 0514 	add.w	r5, r8, #20
 8007238:	f100 0e14 	add.w	lr, r0, #20
 800723c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007240:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007244:	f108 0210 	add.w	r2, r8, #16
 8007248:	46f2      	mov	sl, lr
 800724a:	2100      	movs	r1, #0
 800724c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007250:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007254:	fa1f f883 	uxth.w	r8, r3
 8007258:	fa11 f18b 	uxtah	r1, r1, fp
 800725c:	0c1b      	lsrs	r3, r3, #16
 800725e:	eba1 0808 	sub.w	r8, r1, r8
 8007262:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007266:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800726a:	fa1f f888 	uxth.w	r8, r8
 800726e:	1419      	asrs	r1, r3, #16
 8007270:	454e      	cmp	r6, r9
 8007272:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007276:	f84a 3b04 	str.w	r3, [sl], #4
 800727a:	d8e7      	bhi.n	800724c <__mdiff+0x80>
 800727c:	1b33      	subs	r3, r6, r4
 800727e:	3b15      	subs	r3, #21
 8007280:	f023 0303 	bic.w	r3, r3, #3
 8007284:	3304      	adds	r3, #4
 8007286:	3415      	adds	r4, #21
 8007288:	42a6      	cmp	r6, r4
 800728a:	bf38      	it	cc
 800728c:	2304      	movcc	r3, #4
 800728e:	441d      	add	r5, r3
 8007290:	4473      	add	r3, lr
 8007292:	469e      	mov	lr, r3
 8007294:	462e      	mov	r6, r5
 8007296:	4566      	cmp	r6, ip
 8007298:	d30e      	bcc.n	80072b8 <__mdiff+0xec>
 800729a:	f10c 0203 	add.w	r2, ip, #3
 800729e:	1b52      	subs	r2, r2, r5
 80072a0:	f022 0203 	bic.w	r2, r2, #3
 80072a4:	3d03      	subs	r5, #3
 80072a6:	45ac      	cmp	ip, r5
 80072a8:	bf38      	it	cc
 80072aa:	2200      	movcc	r2, #0
 80072ac:	441a      	add	r2, r3
 80072ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80072b2:	b17b      	cbz	r3, 80072d4 <__mdiff+0x108>
 80072b4:	6107      	str	r7, [r0, #16]
 80072b6:	e7a3      	b.n	8007200 <__mdiff+0x34>
 80072b8:	f856 8b04 	ldr.w	r8, [r6], #4
 80072bc:	fa11 f288 	uxtah	r2, r1, r8
 80072c0:	1414      	asrs	r4, r2, #16
 80072c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072c6:	b292      	uxth	r2, r2
 80072c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072cc:	f84e 2b04 	str.w	r2, [lr], #4
 80072d0:	1421      	asrs	r1, r4, #16
 80072d2:	e7e0      	b.n	8007296 <__mdiff+0xca>
 80072d4:	3f01      	subs	r7, #1
 80072d6:	e7ea      	b.n	80072ae <__mdiff+0xe2>
 80072d8:	0800853b 	.word	0x0800853b
 80072dc:	0800854c 	.word	0x0800854c

080072e0 <__d2b>:
 80072e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072e4:	4689      	mov	r9, r1
 80072e6:	2101      	movs	r1, #1
 80072e8:	ec57 6b10 	vmov	r6, r7, d0
 80072ec:	4690      	mov	r8, r2
 80072ee:	f7ff fccf 	bl	8006c90 <_Balloc>
 80072f2:	4604      	mov	r4, r0
 80072f4:	b930      	cbnz	r0, 8007304 <__d2b+0x24>
 80072f6:	4602      	mov	r2, r0
 80072f8:	4b25      	ldr	r3, [pc, #148]	; (8007390 <__d2b+0xb0>)
 80072fa:	4826      	ldr	r0, [pc, #152]	; (8007394 <__d2b+0xb4>)
 80072fc:	f240 310a 	movw	r1, #778	; 0x30a
 8007300:	f000 faac 	bl	800785c <__assert_func>
 8007304:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800730c:	bb35      	cbnz	r5, 800735c <__d2b+0x7c>
 800730e:	2e00      	cmp	r6, #0
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	d028      	beq.n	8007366 <__d2b+0x86>
 8007314:	4668      	mov	r0, sp
 8007316:	9600      	str	r6, [sp, #0]
 8007318:	f7ff fd82 	bl	8006e20 <__lo0bits>
 800731c:	9900      	ldr	r1, [sp, #0]
 800731e:	b300      	cbz	r0, 8007362 <__d2b+0x82>
 8007320:	9a01      	ldr	r2, [sp, #4]
 8007322:	f1c0 0320 	rsb	r3, r0, #32
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	430b      	orrs	r3, r1
 800732c:	40c2      	lsrs	r2, r0
 800732e:	6163      	str	r3, [r4, #20]
 8007330:	9201      	str	r2, [sp, #4]
 8007332:	9b01      	ldr	r3, [sp, #4]
 8007334:	61a3      	str	r3, [r4, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	bf14      	ite	ne
 800733a:	2202      	movne	r2, #2
 800733c:	2201      	moveq	r2, #1
 800733e:	6122      	str	r2, [r4, #16]
 8007340:	b1d5      	cbz	r5, 8007378 <__d2b+0x98>
 8007342:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007346:	4405      	add	r5, r0
 8007348:	f8c9 5000 	str.w	r5, [r9]
 800734c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007350:	f8c8 0000 	str.w	r0, [r8]
 8007354:	4620      	mov	r0, r4
 8007356:	b003      	add	sp, #12
 8007358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800735c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007360:	e7d5      	b.n	800730e <__d2b+0x2e>
 8007362:	6161      	str	r1, [r4, #20]
 8007364:	e7e5      	b.n	8007332 <__d2b+0x52>
 8007366:	a801      	add	r0, sp, #4
 8007368:	f7ff fd5a 	bl	8006e20 <__lo0bits>
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	6163      	str	r3, [r4, #20]
 8007370:	2201      	movs	r2, #1
 8007372:	6122      	str	r2, [r4, #16]
 8007374:	3020      	adds	r0, #32
 8007376:	e7e3      	b.n	8007340 <__d2b+0x60>
 8007378:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800737c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007380:	f8c9 0000 	str.w	r0, [r9]
 8007384:	6918      	ldr	r0, [r3, #16]
 8007386:	f7ff fd2b 	bl	8006de0 <__hi0bits>
 800738a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800738e:	e7df      	b.n	8007350 <__d2b+0x70>
 8007390:	0800853b 	.word	0x0800853b
 8007394:	0800854c 	.word	0x0800854c

08007398 <_calloc_r>:
 8007398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800739a:	fba1 2402 	umull	r2, r4, r1, r2
 800739e:	b94c      	cbnz	r4, 80073b4 <_calloc_r+0x1c>
 80073a0:	4611      	mov	r1, r2
 80073a2:	9201      	str	r2, [sp, #4]
 80073a4:	f000 f87a 	bl	800749c <_malloc_r>
 80073a8:	9a01      	ldr	r2, [sp, #4]
 80073aa:	4605      	mov	r5, r0
 80073ac:	b930      	cbnz	r0, 80073bc <_calloc_r+0x24>
 80073ae:	4628      	mov	r0, r5
 80073b0:	b003      	add	sp, #12
 80073b2:	bd30      	pop	{r4, r5, pc}
 80073b4:	220c      	movs	r2, #12
 80073b6:	6002      	str	r2, [r0, #0]
 80073b8:	2500      	movs	r5, #0
 80073ba:	e7f8      	b.n	80073ae <_calloc_r+0x16>
 80073bc:	4621      	mov	r1, r4
 80073be:	f7fe f92b 	bl	8005618 <memset>
 80073c2:	e7f4      	b.n	80073ae <_calloc_r+0x16>

080073c4 <_free_r>:
 80073c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073c6:	2900      	cmp	r1, #0
 80073c8:	d044      	beq.n	8007454 <_free_r+0x90>
 80073ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ce:	9001      	str	r0, [sp, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f1a1 0404 	sub.w	r4, r1, #4
 80073d6:	bfb8      	it	lt
 80073d8:	18e4      	addlt	r4, r4, r3
 80073da:	f000 fa9b 	bl	8007914 <__malloc_lock>
 80073de:	4a1e      	ldr	r2, [pc, #120]	; (8007458 <_free_r+0x94>)
 80073e0:	9801      	ldr	r0, [sp, #4]
 80073e2:	6813      	ldr	r3, [r2, #0]
 80073e4:	b933      	cbnz	r3, 80073f4 <_free_r+0x30>
 80073e6:	6063      	str	r3, [r4, #4]
 80073e8:	6014      	str	r4, [r2, #0]
 80073ea:	b003      	add	sp, #12
 80073ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073f0:	f000 ba96 	b.w	8007920 <__malloc_unlock>
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	d908      	bls.n	800740a <_free_r+0x46>
 80073f8:	6825      	ldr	r5, [r4, #0]
 80073fa:	1961      	adds	r1, r4, r5
 80073fc:	428b      	cmp	r3, r1
 80073fe:	bf01      	itttt	eq
 8007400:	6819      	ldreq	r1, [r3, #0]
 8007402:	685b      	ldreq	r3, [r3, #4]
 8007404:	1949      	addeq	r1, r1, r5
 8007406:	6021      	streq	r1, [r4, #0]
 8007408:	e7ed      	b.n	80073e6 <_free_r+0x22>
 800740a:	461a      	mov	r2, r3
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	b10b      	cbz	r3, 8007414 <_free_r+0x50>
 8007410:	42a3      	cmp	r3, r4
 8007412:	d9fa      	bls.n	800740a <_free_r+0x46>
 8007414:	6811      	ldr	r1, [r2, #0]
 8007416:	1855      	adds	r5, r2, r1
 8007418:	42a5      	cmp	r5, r4
 800741a:	d10b      	bne.n	8007434 <_free_r+0x70>
 800741c:	6824      	ldr	r4, [r4, #0]
 800741e:	4421      	add	r1, r4
 8007420:	1854      	adds	r4, r2, r1
 8007422:	42a3      	cmp	r3, r4
 8007424:	6011      	str	r1, [r2, #0]
 8007426:	d1e0      	bne.n	80073ea <_free_r+0x26>
 8007428:	681c      	ldr	r4, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	6053      	str	r3, [r2, #4]
 800742e:	4421      	add	r1, r4
 8007430:	6011      	str	r1, [r2, #0]
 8007432:	e7da      	b.n	80073ea <_free_r+0x26>
 8007434:	d902      	bls.n	800743c <_free_r+0x78>
 8007436:	230c      	movs	r3, #12
 8007438:	6003      	str	r3, [r0, #0]
 800743a:	e7d6      	b.n	80073ea <_free_r+0x26>
 800743c:	6825      	ldr	r5, [r4, #0]
 800743e:	1961      	adds	r1, r4, r5
 8007440:	428b      	cmp	r3, r1
 8007442:	bf04      	itt	eq
 8007444:	6819      	ldreq	r1, [r3, #0]
 8007446:	685b      	ldreq	r3, [r3, #4]
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	bf04      	itt	eq
 800744c:	1949      	addeq	r1, r1, r5
 800744e:	6021      	streq	r1, [r4, #0]
 8007450:	6054      	str	r4, [r2, #4]
 8007452:	e7ca      	b.n	80073ea <_free_r+0x26>
 8007454:	b003      	add	sp, #12
 8007456:	bd30      	pop	{r4, r5, pc}
 8007458:	200003d0 	.word	0x200003d0

0800745c <sbrk_aligned>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	4e0e      	ldr	r6, [pc, #56]	; (8007498 <sbrk_aligned+0x3c>)
 8007460:	460c      	mov	r4, r1
 8007462:	6831      	ldr	r1, [r6, #0]
 8007464:	4605      	mov	r5, r0
 8007466:	b911      	cbnz	r1, 800746e <sbrk_aligned+0x12>
 8007468:	f000 f9e8 	bl	800783c <_sbrk_r>
 800746c:	6030      	str	r0, [r6, #0]
 800746e:	4621      	mov	r1, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f000 f9e3 	bl	800783c <_sbrk_r>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d00a      	beq.n	8007490 <sbrk_aligned+0x34>
 800747a:	1cc4      	adds	r4, r0, #3
 800747c:	f024 0403 	bic.w	r4, r4, #3
 8007480:	42a0      	cmp	r0, r4
 8007482:	d007      	beq.n	8007494 <sbrk_aligned+0x38>
 8007484:	1a21      	subs	r1, r4, r0
 8007486:	4628      	mov	r0, r5
 8007488:	f000 f9d8 	bl	800783c <_sbrk_r>
 800748c:	3001      	adds	r0, #1
 800748e:	d101      	bne.n	8007494 <sbrk_aligned+0x38>
 8007490:	f04f 34ff 	mov.w	r4, #4294967295
 8007494:	4620      	mov	r0, r4
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	200003d4 	.word	0x200003d4

0800749c <_malloc_r>:
 800749c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a0:	1ccd      	adds	r5, r1, #3
 80074a2:	f025 0503 	bic.w	r5, r5, #3
 80074a6:	3508      	adds	r5, #8
 80074a8:	2d0c      	cmp	r5, #12
 80074aa:	bf38      	it	cc
 80074ac:	250c      	movcc	r5, #12
 80074ae:	2d00      	cmp	r5, #0
 80074b0:	4607      	mov	r7, r0
 80074b2:	db01      	blt.n	80074b8 <_malloc_r+0x1c>
 80074b4:	42a9      	cmp	r1, r5
 80074b6:	d905      	bls.n	80074c4 <_malloc_r+0x28>
 80074b8:	230c      	movs	r3, #12
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	2600      	movs	r6, #0
 80074be:	4630      	mov	r0, r6
 80074c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c4:	4e2e      	ldr	r6, [pc, #184]	; (8007580 <_malloc_r+0xe4>)
 80074c6:	f000 fa25 	bl	8007914 <__malloc_lock>
 80074ca:	6833      	ldr	r3, [r6, #0]
 80074cc:	461c      	mov	r4, r3
 80074ce:	bb34      	cbnz	r4, 800751e <_malloc_r+0x82>
 80074d0:	4629      	mov	r1, r5
 80074d2:	4638      	mov	r0, r7
 80074d4:	f7ff ffc2 	bl	800745c <sbrk_aligned>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	4604      	mov	r4, r0
 80074dc:	d14d      	bne.n	800757a <_malloc_r+0xde>
 80074de:	6834      	ldr	r4, [r6, #0]
 80074e0:	4626      	mov	r6, r4
 80074e2:	2e00      	cmp	r6, #0
 80074e4:	d140      	bne.n	8007568 <_malloc_r+0xcc>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	4631      	mov	r1, r6
 80074ea:	4638      	mov	r0, r7
 80074ec:	eb04 0803 	add.w	r8, r4, r3
 80074f0:	f000 f9a4 	bl	800783c <_sbrk_r>
 80074f4:	4580      	cmp	r8, r0
 80074f6:	d13a      	bne.n	800756e <_malloc_r+0xd2>
 80074f8:	6821      	ldr	r1, [r4, #0]
 80074fa:	3503      	adds	r5, #3
 80074fc:	1a6d      	subs	r5, r5, r1
 80074fe:	f025 0503 	bic.w	r5, r5, #3
 8007502:	3508      	adds	r5, #8
 8007504:	2d0c      	cmp	r5, #12
 8007506:	bf38      	it	cc
 8007508:	250c      	movcc	r5, #12
 800750a:	4629      	mov	r1, r5
 800750c:	4638      	mov	r0, r7
 800750e:	f7ff ffa5 	bl	800745c <sbrk_aligned>
 8007512:	3001      	adds	r0, #1
 8007514:	d02b      	beq.n	800756e <_malloc_r+0xd2>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	442b      	add	r3, r5
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	e00e      	b.n	800753c <_malloc_r+0xa0>
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	1b52      	subs	r2, r2, r5
 8007522:	d41e      	bmi.n	8007562 <_malloc_r+0xc6>
 8007524:	2a0b      	cmp	r2, #11
 8007526:	d916      	bls.n	8007556 <_malloc_r+0xba>
 8007528:	1961      	adds	r1, r4, r5
 800752a:	42a3      	cmp	r3, r4
 800752c:	6025      	str	r5, [r4, #0]
 800752e:	bf18      	it	ne
 8007530:	6059      	strne	r1, [r3, #4]
 8007532:	6863      	ldr	r3, [r4, #4]
 8007534:	bf08      	it	eq
 8007536:	6031      	streq	r1, [r6, #0]
 8007538:	5162      	str	r2, [r4, r5]
 800753a:	604b      	str	r3, [r1, #4]
 800753c:	4638      	mov	r0, r7
 800753e:	f104 060b 	add.w	r6, r4, #11
 8007542:	f000 f9ed 	bl	8007920 <__malloc_unlock>
 8007546:	f026 0607 	bic.w	r6, r6, #7
 800754a:	1d23      	adds	r3, r4, #4
 800754c:	1af2      	subs	r2, r6, r3
 800754e:	d0b6      	beq.n	80074be <_malloc_r+0x22>
 8007550:	1b9b      	subs	r3, r3, r6
 8007552:	50a3      	str	r3, [r4, r2]
 8007554:	e7b3      	b.n	80074be <_malloc_r+0x22>
 8007556:	6862      	ldr	r2, [r4, #4]
 8007558:	42a3      	cmp	r3, r4
 800755a:	bf0c      	ite	eq
 800755c:	6032      	streq	r2, [r6, #0]
 800755e:	605a      	strne	r2, [r3, #4]
 8007560:	e7ec      	b.n	800753c <_malloc_r+0xa0>
 8007562:	4623      	mov	r3, r4
 8007564:	6864      	ldr	r4, [r4, #4]
 8007566:	e7b2      	b.n	80074ce <_malloc_r+0x32>
 8007568:	4634      	mov	r4, r6
 800756a:	6876      	ldr	r6, [r6, #4]
 800756c:	e7b9      	b.n	80074e2 <_malloc_r+0x46>
 800756e:	230c      	movs	r3, #12
 8007570:	603b      	str	r3, [r7, #0]
 8007572:	4638      	mov	r0, r7
 8007574:	f000 f9d4 	bl	8007920 <__malloc_unlock>
 8007578:	e7a1      	b.n	80074be <_malloc_r+0x22>
 800757a:	6025      	str	r5, [r4, #0]
 800757c:	e7de      	b.n	800753c <_malloc_r+0xa0>
 800757e:	bf00      	nop
 8007580:	200003d0 	.word	0x200003d0

08007584 <__ssputs_r>:
 8007584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007588:	688e      	ldr	r6, [r1, #8]
 800758a:	429e      	cmp	r6, r3
 800758c:	4682      	mov	sl, r0
 800758e:	460c      	mov	r4, r1
 8007590:	4690      	mov	r8, r2
 8007592:	461f      	mov	r7, r3
 8007594:	d838      	bhi.n	8007608 <__ssputs_r+0x84>
 8007596:	898a      	ldrh	r2, [r1, #12]
 8007598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800759c:	d032      	beq.n	8007604 <__ssputs_r+0x80>
 800759e:	6825      	ldr	r5, [r4, #0]
 80075a0:	6909      	ldr	r1, [r1, #16]
 80075a2:	eba5 0901 	sub.w	r9, r5, r1
 80075a6:	6965      	ldr	r5, [r4, #20]
 80075a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075b0:	3301      	adds	r3, #1
 80075b2:	444b      	add	r3, r9
 80075b4:	106d      	asrs	r5, r5, #1
 80075b6:	429d      	cmp	r5, r3
 80075b8:	bf38      	it	cc
 80075ba:	461d      	movcc	r5, r3
 80075bc:	0553      	lsls	r3, r2, #21
 80075be:	d531      	bpl.n	8007624 <__ssputs_r+0xa0>
 80075c0:	4629      	mov	r1, r5
 80075c2:	f7ff ff6b 	bl	800749c <_malloc_r>
 80075c6:	4606      	mov	r6, r0
 80075c8:	b950      	cbnz	r0, 80075e0 <__ssputs_r+0x5c>
 80075ca:	230c      	movs	r3, #12
 80075cc:	f8ca 3000 	str.w	r3, [sl]
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e0:	6921      	ldr	r1, [r4, #16]
 80075e2:	464a      	mov	r2, r9
 80075e4:	f7ff fb46 	bl	8006c74 <memcpy>
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	6126      	str	r6, [r4, #16]
 80075f6:	6165      	str	r5, [r4, #20]
 80075f8:	444e      	add	r6, r9
 80075fa:	eba5 0509 	sub.w	r5, r5, r9
 80075fe:	6026      	str	r6, [r4, #0]
 8007600:	60a5      	str	r5, [r4, #8]
 8007602:	463e      	mov	r6, r7
 8007604:	42be      	cmp	r6, r7
 8007606:	d900      	bls.n	800760a <__ssputs_r+0x86>
 8007608:	463e      	mov	r6, r7
 800760a:	6820      	ldr	r0, [r4, #0]
 800760c:	4632      	mov	r2, r6
 800760e:	4641      	mov	r1, r8
 8007610:	f000 f966 	bl	80078e0 <memmove>
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	1b9b      	subs	r3, r3, r6
 8007618:	60a3      	str	r3, [r4, #8]
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	4433      	add	r3, r6
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	2000      	movs	r0, #0
 8007622:	e7db      	b.n	80075dc <__ssputs_r+0x58>
 8007624:	462a      	mov	r2, r5
 8007626:	f000 f981 	bl	800792c <_realloc_r>
 800762a:	4606      	mov	r6, r0
 800762c:	2800      	cmp	r0, #0
 800762e:	d1e1      	bne.n	80075f4 <__ssputs_r+0x70>
 8007630:	6921      	ldr	r1, [r4, #16]
 8007632:	4650      	mov	r0, sl
 8007634:	f7ff fec6 	bl	80073c4 <_free_r>
 8007638:	e7c7      	b.n	80075ca <__ssputs_r+0x46>
	...

0800763c <_svfiprintf_r>:
 800763c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	4698      	mov	r8, r3
 8007642:	898b      	ldrh	r3, [r1, #12]
 8007644:	061b      	lsls	r3, r3, #24
 8007646:	b09d      	sub	sp, #116	; 0x74
 8007648:	4607      	mov	r7, r0
 800764a:	460d      	mov	r5, r1
 800764c:	4614      	mov	r4, r2
 800764e:	d50e      	bpl.n	800766e <_svfiprintf_r+0x32>
 8007650:	690b      	ldr	r3, [r1, #16]
 8007652:	b963      	cbnz	r3, 800766e <_svfiprintf_r+0x32>
 8007654:	2140      	movs	r1, #64	; 0x40
 8007656:	f7ff ff21 	bl	800749c <_malloc_r>
 800765a:	6028      	str	r0, [r5, #0]
 800765c:	6128      	str	r0, [r5, #16]
 800765e:	b920      	cbnz	r0, 800766a <_svfiprintf_r+0x2e>
 8007660:	230c      	movs	r3, #12
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	f04f 30ff 	mov.w	r0, #4294967295
 8007668:	e0d1      	b.n	800780e <_svfiprintf_r+0x1d2>
 800766a:	2340      	movs	r3, #64	; 0x40
 800766c:	616b      	str	r3, [r5, #20]
 800766e:	2300      	movs	r3, #0
 8007670:	9309      	str	r3, [sp, #36]	; 0x24
 8007672:	2320      	movs	r3, #32
 8007674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007678:	f8cd 800c 	str.w	r8, [sp, #12]
 800767c:	2330      	movs	r3, #48	; 0x30
 800767e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007828 <_svfiprintf_r+0x1ec>
 8007682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007686:	f04f 0901 	mov.w	r9, #1
 800768a:	4623      	mov	r3, r4
 800768c:	469a      	mov	sl, r3
 800768e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007692:	b10a      	cbz	r2, 8007698 <_svfiprintf_r+0x5c>
 8007694:	2a25      	cmp	r2, #37	; 0x25
 8007696:	d1f9      	bne.n	800768c <_svfiprintf_r+0x50>
 8007698:	ebba 0b04 	subs.w	fp, sl, r4
 800769c:	d00b      	beq.n	80076b6 <_svfiprintf_r+0x7a>
 800769e:	465b      	mov	r3, fp
 80076a0:	4622      	mov	r2, r4
 80076a2:	4629      	mov	r1, r5
 80076a4:	4638      	mov	r0, r7
 80076a6:	f7ff ff6d 	bl	8007584 <__ssputs_r>
 80076aa:	3001      	adds	r0, #1
 80076ac:	f000 80aa 	beq.w	8007804 <_svfiprintf_r+0x1c8>
 80076b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b2:	445a      	add	r2, fp
 80076b4:	9209      	str	r2, [sp, #36]	; 0x24
 80076b6:	f89a 3000 	ldrb.w	r3, [sl]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 80a2 	beq.w	8007804 <_svfiprintf_r+0x1c8>
 80076c0:	2300      	movs	r3, #0
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ca:	f10a 0a01 	add.w	sl, sl, #1
 80076ce:	9304      	str	r3, [sp, #16]
 80076d0:	9307      	str	r3, [sp, #28]
 80076d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076d6:	931a      	str	r3, [sp, #104]	; 0x68
 80076d8:	4654      	mov	r4, sl
 80076da:	2205      	movs	r2, #5
 80076dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e0:	4851      	ldr	r0, [pc, #324]	; (8007828 <_svfiprintf_r+0x1ec>)
 80076e2:	f7f8 fd85 	bl	80001f0 <memchr>
 80076e6:	9a04      	ldr	r2, [sp, #16]
 80076e8:	b9d8      	cbnz	r0, 8007722 <_svfiprintf_r+0xe6>
 80076ea:	06d0      	lsls	r0, r2, #27
 80076ec:	bf44      	itt	mi
 80076ee:	2320      	movmi	r3, #32
 80076f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076f4:	0711      	lsls	r1, r2, #28
 80076f6:	bf44      	itt	mi
 80076f8:	232b      	movmi	r3, #43	; 0x2b
 80076fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007702:	2b2a      	cmp	r3, #42	; 0x2a
 8007704:	d015      	beq.n	8007732 <_svfiprintf_r+0xf6>
 8007706:	9a07      	ldr	r2, [sp, #28]
 8007708:	4654      	mov	r4, sl
 800770a:	2000      	movs	r0, #0
 800770c:	f04f 0c0a 	mov.w	ip, #10
 8007710:	4621      	mov	r1, r4
 8007712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007716:	3b30      	subs	r3, #48	; 0x30
 8007718:	2b09      	cmp	r3, #9
 800771a:	d94e      	bls.n	80077ba <_svfiprintf_r+0x17e>
 800771c:	b1b0      	cbz	r0, 800774c <_svfiprintf_r+0x110>
 800771e:	9207      	str	r2, [sp, #28]
 8007720:	e014      	b.n	800774c <_svfiprintf_r+0x110>
 8007722:	eba0 0308 	sub.w	r3, r0, r8
 8007726:	fa09 f303 	lsl.w	r3, r9, r3
 800772a:	4313      	orrs	r3, r2
 800772c:	9304      	str	r3, [sp, #16]
 800772e:	46a2      	mov	sl, r4
 8007730:	e7d2      	b.n	80076d8 <_svfiprintf_r+0x9c>
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	1d19      	adds	r1, r3, #4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	9103      	str	r1, [sp, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	bfbb      	ittet	lt
 800773e:	425b      	neglt	r3, r3
 8007740:	f042 0202 	orrlt.w	r2, r2, #2
 8007744:	9307      	strge	r3, [sp, #28]
 8007746:	9307      	strlt	r3, [sp, #28]
 8007748:	bfb8      	it	lt
 800774a:	9204      	strlt	r2, [sp, #16]
 800774c:	7823      	ldrb	r3, [r4, #0]
 800774e:	2b2e      	cmp	r3, #46	; 0x2e
 8007750:	d10c      	bne.n	800776c <_svfiprintf_r+0x130>
 8007752:	7863      	ldrb	r3, [r4, #1]
 8007754:	2b2a      	cmp	r3, #42	; 0x2a
 8007756:	d135      	bne.n	80077c4 <_svfiprintf_r+0x188>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	1d1a      	adds	r2, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	9203      	str	r2, [sp, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	bfb8      	it	lt
 8007764:	f04f 33ff 	movlt.w	r3, #4294967295
 8007768:	3402      	adds	r4, #2
 800776a:	9305      	str	r3, [sp, #20]
 800776c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007838 <_svfiprintf_r+0x1fc>
 8007770:	7821      	ldrb	r1, [r4, #0]
 8007772:	2203      	movs	r2, #3
 8007774:	4650      	mov	r0, sl
 8007776:	f7f8 fd3b 	bl	80001f0 <memchr>
 800777a:	b140      	cbz	r0, 800778e <_svfiprintf_r+0x152>
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	eba0 000a 	sub.w	r0, r0, sl
 8007782:	fa03 f000 	lsl.w	r0, r3, r0
 8007786:	9b04      	ldr	r3, [sp, #16]
 8007788:	4303      	orrs	r3, r0
 800778a:	3401      	adds	r4, #1
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007792:	4826      	ldr	r0, [pc, #152]	; (800782c <_svfiprintf_r+0x1f0>)
 8007794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007798:	2206      	movs	r2, #6
 800779a:	f7f8 fd29 	bl	80001f0 <memchr>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d038      	beq.n	8007814 <_svfiprintf_r+0x1d8>
 80077a2:	4b23      	ldr	r3, [pc, #140]	; (8007830 <_svfiprintf_r+0x1f4>)
 80077a4:	bb1b      	cbnz	r3, 80077ee <_svfiprintf_r+0x1b2>
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	3307      	adds	r3, #7
 80077aa:	f023 0307 	bic.w	r3, r3, #7
 80077ae:	3308      	adds	r3, #8
 80077b0:	9303      	str	r3, [sp, #12]
 80077b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b4:	4433      	add	r3, r6
 80077b6:	9309      	str	r3, [sp, #36]	; 0x24
 80077b8:	e767      	b.n	800768a <_svfiprintf_r+0x4e>
 80077ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80077be:	460c      	mov	r4, r1
 80077c0:	2001      	movs	r0, #1
 80077c2:	e7a5      	b.n	8007710 <_svfiprintf_r+0xd4>
 80077c4:	2300      	movs	r3, #0
 80077c6:	3401      	adds	r4, #1
 80077c8:	9305      	str	r3, [sp, #20]
 80077ca:	4619      	mov	r1, r3
 80077cc:	f04f 0c0a 	mov.w	ip, #10
 80077d0:	4620      	mov	r0, r4
 80077d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077d6:	3a30      	subs	r2, #48	; 0x30
 80077d8:	2a09      	cmp	r2, #9
 80077da:	d903      	bls.n	80077e4 <_svfiprintf_r+0x1a8>
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0c5      	beq.n	800776c <_svfiprintf_r+0x130>
 80077e0:	9105      	str	r1, [sp, #20]
 80077e2:	e7c3      	b.n	800776c <_svfiprintf_r+0x130>
 80077e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e8:	4604      	mov	r4, r0
 80077ea:	2301      	movs	r3, #1
 80077ec:	e7f0      	b.n	80077d0 <_svfiprintf_r+0x194>
 80077ee:	ab03      	add	r3, sp, #12
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	462a      	mov	r2, r5
 80077f4:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <_svfiprintf_r+0x1f8>)
 80077f6:	a904      	add	r1, sp, #16
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7fd ffb5 	bl	8005768 <_printf_float>
 80077fe:	1c42      	adds	r2, r0, #1
 8007800:	4606      	mov	r6, r0
 8007802:	d1d6      	bne.n	80077b2 <_svfiprintf_r+0x176>
 8007804:	89ab      	ldrh	r3, [r5, #12]
 8007806:	065b      	lsls	r3, r3, #25
 8007808:	f53f af2c 	bmi.w	8007664 <_svfiprintf_r+0x28>
 800780c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800780e:	b01d      	add	sp, #116	; 0x74
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	ab03      	add	r3, sp, #12
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	462a      	mov	r2, r5
 800781a:	4b06      	ldr	r3, [pc, #24]	; (8007834 <_svfiprintf_r+0x1f8>)
 800781c:	a904      	add	r1, sp, #16
 800781e:	4638      	mov	r0, r7
 8007820:	f7fe fa46 	bl	8005cb0 <_printf_i>
 8007824:	e7eb      	b.n	80077fe <_svfiprintf_r+0x1c2>
 8007826:	bf00      	nop
 8007828:	080086a4 	.word	0x080086a4
 800782c:	080086ae 	.word	0x080086ae
 8007830:	08005769 	.word	0x08005769
 8007834:	08007585 	.word	0x08007585
 8007838:	080086aa 	.word	0x080086aa

0800783c <_sbrk_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4d06      	ldr	r5, [pc, #24]	; (8007858 <_sbrk_r+0x1c>)
 8007840:	2300      	movs	r3, #0
 8007842:	4604      	mov	r4, r0
 8007844:	4608      	mov	r0, r1
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	f7f9 fe40 	bl	80014cc <_sbrk>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d102      	bne.n	8007856 <_sbrk_r+0x1a>
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	b103      	cbz	r3, 8007856 <_sbrk_r+0x1a>
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	200003d8 	.word	0x200003d8

0800785c <__assert_func>:
 800785c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800785e:	4614      	mov	r4, r2
 8007860:	461a      	mov	r2, r3
 8007862:	4b09      	ldr	r3, [pc, #36]	; (8007888 <__assert_func+0x2c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4605      	mov	r5, r0
 8007868:	68d8      	ldr	r0, [r3, #12]
 800786a:	b14c      	cbz	r4, 8007880 <__assert_func+0x24>
 800786c:	4b07      	ldr	r3, [pc, #28]	; (800788c <__assert_func+0x30>)
 800786e:	9100      	str	r1, [sp, #0]
 8007870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007874:	4906      	ldr	r1, [pc, #24]	; (8007890 <__assert_func+0x34>)
 8007876:	462b      	mov	r3, r5
 8007878:	f000 f80e 	bl	8007898 <fiprintf>
 800787c:	f000 faac 	bl	8007dd8 <abort>
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <__assert_func+0x38>)
 8007882:	461c      	mov	r4, r3
 8007884:	e7f3      	b.n	800786e <__assert_func+0x12>
 8007886:	bf00      	nop
 8007888:	2000000c 	.word	0x2000000c
 800788c:	080086b5 	.word	0x080086b5
 8007890:	080086c2 	.word	0x080086c2
 8007894:	080086f0 	.word	0x080086f0

08007898 <fiprintf>:
 8007898:	b40e      	push	{r1, r2, r3}
 800789a:	b503      	push	{r0, r1, lr}
 800789c:	4601      	mov	r1, r0
 800789e:	ab03      	add	r3, sp, #12
 80078a0:	4805      	ldr	r0, [pc, #20]	; (80078b8 <fiprintf+0x20>)
 80078a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a6:	6800      	ldr	r0, [r0, #0]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	f000 f897 	bl	80079dc <_vfiprintf_r>
 80078ae:	b002      	add	sp, #8
 80078b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b4:	b003      	add	sp, #12
 80078b6:	4770      	bx	lr
 80078b8:	2000000c 	.word	0x2000000c

080078bc <__ascii_mbtowc>:
 80078bc:	b082      	sub	sp, #8
 80078be:	b901      	cbnz	r1, 80078c2 <__ascii_mbtowc+0x6>
 80078c0:	a901      	add	r1, sp, #4
 80078c2:	b142      	cbz	r2, 80078d6 <__ascii_mbtowc+0x1a>
 80078c4:	b14b      	cbz	r3, 80078da <__ascii_mbtowc+0x1e>
 80078c6:	7813      	ldrb	r3, [r2, #0]
 80078c8:	600b      	str	r3, [r1, #0]
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	1e10      	subs	r0, r2, #0
 80078ce:	bf18      	it	ne
 80078d0:	2001      	movne	r0, #1
 80078d2:	b002      	add	sp, #8
 80078d4:	4770      	bx	lr
 80078d6:	4610      	mov	r0, r2
 80078d8:	e7fb      	b.n	80078d2 <__ascii_mbtowc+0x16>
 80078da:	f06f 0001 	mvn.w	r0, #1
 80078de:	e7f8      	b.n	80078d2 <__ascii_mbtowc+0x16>

080078e0 <memmove>:
 80078e0:	4288      	cmp	r0, r1
 80078e2:	b510      	push	{r4, lr}
 80078e4:	eb01 0402 	add.w	r4, r1, r2
 80078e8:	d902      	bls.n	80078f0 <memmove+0x10>
 80078ea:	4284      	cmp	r4, r0
 80078ec:	4623      	mov	r3, r4
 80078ee:	d807      	bhi.n	8007900 <memmove+0x20>
 80078f0:	1e43      	subs	r3, r0, #1
 80078f2:	42a1      	cmp	r1, r4
 80078f4:	d008      	beq.n	8007908 <memmove+0x28>
 80078f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078fe:	e7f8      	b.n	80078f2 <memmove+0x12>
 8007900:	4402      	add	r2, r0
 8007902:	4601      	mov	r1, r0
 8007904:	428a      	cmp	r2, r1
 8007906:	d100      	bne.n	800790a <memmove+0x2a>
 8007908:	bd10      	pop	{r4, pc}
 800790a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800790e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007912:	e7f7      	b.n	8007904 <memmove+0x24>

08007914 <__malloc_lock>:
 8007914:	4801      	ldr	r0, [pc, #4]	; (800791c <__malloc_lock+0x8>)
 8007916:	f000 bc1f 	b.w	8008158 <__retarget_lock_acquire_recursive>
 800791a:	bf00      	nop
 800791c:	200003dc 	.word	0x200003dc

08007920 <__malloc_unlock>:
 8007920:	4801      	ldr	r0, [pc, #4]	; (8007928 <__malloc_unlock+0x8>)
 8007922:	f000 bc1a 	b.w	800815a <__retarget_lock_release_recursive>
 8007926:	bf00      	nop
 8007928:	200003dc 	.word	0x200003dc

0800792c <_realloc_r>:
 800792c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007930:	4680      	mov	r8, r0
 8007932:	4614      	mov	r4, r2
 8007934:	460e      	mov	r6, r1
 8007936:	b921      	cbnz	r1, 8007942 <_realloc_r+0x16>
 8007938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800793c:	4611      	mov	r1, r2
 800793e:	f7ff bdad 	b.w	800749c <_malloc_r>
 8007942:	b92a      	cbnz	r2, 8007950 <_realloc_r+0x24>
 8007944:	f7ff fd3e 	bl	80073c4 <_free_r>
 8007948:	4625      	mov	r5, r4
 800794a:	4628      	mov	r0, r5
 800794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007950:	f000 fc6a 	bl	8008228 <_malloc_usable_size_r>
 8007954:	4284      	cmp	r4, r0
 8007956:	4607      	mov	r7, r0
 8007958:	d802      	bhi.n	8007960 <_realloc_r+0x34>
 800795a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800795e:	d812      	bhi.n	8007986 <_realloc_r+0x5a>
 8007960:	4621      	mov	r1, r4
 8007962:	4640      	mov	r0, r8
 8007964:	f7ff fd9a 	bl	800749c <_malloc_r>
 8007968:	4605      	mov	r5, r0
 800796a:	2800      	cmp	r0, #0
 800796c:	d0ed      	beq.n	800794a <_realloc_r+0x1e>
 800796e:	42bc      	cmp	r4, r7
 8007970:	4622      	mov	r2, r4
 8007972:	4631      	mov	r1, r6
 8007974:	bf28      	it	cs
 8007976:	463a      	movcs	r2, r7
 8007978:	f7ff f97c 	bl	8006c74 <memcpy>
 800797c:	4631      	mov	r1, r6
 800797e:	4640      	mov	r0, r8
 8007980:	f7ff fd20 	bl	80073c4 <_free_r>
 8007984:	e7e1      	b.n	800794a <_realloc_r+0x1e>
 8007986:	4635      	mov	r5, r6
 8007988:	e7df      	b.n	800794a <_realloc_r+0x1e>

0800798a <__sfputc_r>:
 800798a:	6893      	ldr	r3, [r2, #8]
 800798c:	3b01      	subs	r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	b410      	push	{r4}
 8007992:	6093      	str	r3, [r2, #8]
 8007994:	da08      	bge.n	80079a8 <__sfputc_r+0x1e>
 8007996:	6994      	ldr	r4, [r2, #24]
 8007998:	42a3      	cmp	r3, r4
 800799a:	db01      	blt.n	80079a0 <__sfputc_r+0x16>
 800799c:	290a      	cmp	r1, #10
 800799e:	d103      	bne.n	80079a8 <__sfputc_r+0x1e>
 80079a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079a4:	f000 b94a 	b.w	8007c3c <__swbuf_r>
 80079a8:	6813      	ldr	r3, [r2, #0]
 80079aa:	1c58      	adds	r0, r3, #1
 80079ac:	6010      	str	r0, [r2, #0]
 80079ae:	7019      	strb	r1, [r3, #0]
 80079b0:	4608      	mov	r0, r1
 80079b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <__sfputs_r>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	4606      	mov	r6, r0
 80079bc:	460f      	mov	r7, r1
 80079be:	4614      	mov	r4, r2
 80079c0:	18d5      	adds	r5, r2, r3
 80079c2:	42ac      	cmp	r4, r5
 80079c4:	d101      	bne.n	80079ca <__sfputs_r+0x12>
 80079c6:	2000      	movs	r0, #0
 80079c8:	e007      	b.n	80079da <__sfputs_r+0x22>
 80079ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ce:	463a      	mov	r2, r7
 80079d0:	4630      	mov	r0, r6
 80079d2:	f7ff ffda 	bl	800798a <__sfputc_r>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	d1f3      	bne.n	80079c2 <__sfputs_r+0xa>
 80079da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079dc <_vfiprintf_r>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	460d      	mov	r5, r1
 80079e2:	b09d      	sub	sp, #116	; 0x74
 80079e4:	4614      	mov	r4, r2
 80079e6:	4698      	mov	r8, r3
 80079e8:	4606      	mov	r6, r0
 80079ea:	b118      	cbz	r0, 80079f4 <_vfiprintf_r+0x18>
 80079ec:	6983      	ldr	r3, [r0, #24]
 80079ee:	b90b      	cbnz	r3, 80079f4 <_vfiprintf_r+0x18>
 80079f0:	f000 fb14 	bl	800801c <__sinit>
 80079f4:	4b89      	ldr	r3, [pc, #548]	; (8007c1c <_vfiprintf_r+0x240>)
 80079f6:	429d      	cmp	r5, r3
 80079f8:	d11b      	bne.n	8007a32 <_vfiprintf_r+0x56>
 80079fa:	6875      	ldr	r5, [r6, #4]
 80079fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079fe:	07d9      	lsls	r1, r3, #31
 8007a00:	d405      	bmi.n	8007a0e <_vfiprintf_r+0x32>
 8007a02:	89ab      	ldrh	r3, [r5, #12]
 8007a04:	059a      	lsls	r2, r3, #22
 8007a06:	d402      	bmi.n	8007a0e <_vfiprintf_r+0x32>
 8007a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a0a:	f000 fba5 	bl	8008158 <__retarget_lock_acquire_recursive>
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	071b      	lsls	r3, r3, #28
 8007a12:	d501      	bpl.n	8007a18 <_vfiprintf_r+0x3c>
 8007a14:	692b      	ldr	r3, [r5, #16]
 8007a16:	b9eb      	cbnz	r3, 8007a54 <_vfiprintf_r+0x78>
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f000 f96e 	bl	8007cfc <__swsetup_r>
 8007a20:	b1c0      	cbz	r0, 8007a54 <_vfiprintf_r+0x78>
 8007a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a24:	07dc      	lsls	r4, r3, #31
 8007a26:	d50e      	bpl.n	8007a46 <_vfiprintf_r+0x6a>
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2c:	b01d      	add	sp, #116	; 0x74
 8007a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a32:	4b7b      	ldr	r3, [pc, #492]	; (8007c20 <_vfiprintf_r+0x244>)
 8007a34:	429d      	cmp	r5, r3
 8007a36:	d101      	bne.n	8007a3c <_vfiprintf_r+0x60>
 8007a38:	68b5      	ldr	r5, [r6, #8]
 8007a3a:	e7df      	b.n	80079fc <_vfiprintf_r+0x20>
 8007a3c:	4b79      	ldr	r3, [pc, #484]	; (8007c24 <_vfiprintf_r+0x248>)
 8007a3e:	429d      	cmp	r5, r3
 8007a40:	bf08      	it	eq
 8007a42:	68f5      	ldreq	r5, [r6, #12]
 8007a44:	e7da      	b.n	80079fc <_vfiprintf_r+0x20>
 8007a46:	89ab      	ldrh	r3, [r5, #12]
 8007a48:	0598      	lsls	r0, r3, #22
 8007a4a:	d4ed      	bmi.n	8007a28 <_vfiprintf_r+0x4c>
 8007a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a4e:	f000 fb84 	bl	800815a <__retarget_lock_release_recursive>
 8007a52:	e7e9      	b.n	8007a28 <_vfiprintf_r+0x4c>
 8007a54:	2300      	movs	r3, #0
 8007a56:	9309      	str	r3, [sp, #36]	; 0x24
 8007a58:	2320      	movs	r3, #32
 8007a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a62:	2330      	movs	r3, #48	; 0x30
 8007a64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c28 <_vfiprintf_r+0x24c>
 8007a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a6c:	f04f 0901 	mov.w	r9, #1
 8007a70:	4623      	mov	r3, r4
 8007a72:	469a      	mov	sl, r3
 8007a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a78:	b10a      	cbz	r2, 8007a7e <_vfiprintf_r+0xa2>
 8007a7a:	2a25      	cmp	r2, #37	; 0x25
 8007a7c:	d1f9      	bne.n	8007a72 <_vfiprintf_r+0x96>
 8007a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a82:	d00b      	beq.n	8007a9c <_vfiprintf_r+0xc0>
 8007a84:	465b      	mov	r3, fp
 8007a86:	4622      	mov	r2, r4
 8007a88:	4629      	mov	r1, r5
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f7ff ff94 	bl	80079b8 <__sfputs_r>
 8007a90:	3001      	adds	r0, #1
 8007a92:	f000 80aa 	beq.w	8007bea <_vfiprintf_r+0x20e>
 8007a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a98:	445a      	add	r2, fp
 8007a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80a2 	beq.w	8007bea <_vfiprintf_r+0x20e>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ab0:	f10a 0a01 	add.w	sl, sl, #1
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	9307      	str	r3, [sp, #28]
 8007ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007abc:	931a      	str	r3, [sp, #104]	; 0x68
 8007abe:	4654      	mov	r4, sl
 8007ac0:	2205      	movs	r2, #5
 8007ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac6:	4858      	ldr	r0, [pc, #352]	; (8007c28 <_vfiprintf_r+0x24c>)
 8007ac8:	f7f8 fb92 	bl	80001f0 <memchr>
 8007acc:	9a04      	ldr	r2, [sp, #16]
 8007ace:	b9d8      	cbnz	r0, 8007b08 <_vfiprintf_r+0x12c>
 8007ad0:	06d1      	lsls	r1, r2, #27
 8007ad2:	bf44      	itt	mi
 8007ad4:	2320      	movmi	r3, #32
 8007ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ada:	0713      	lsls	r3, r2, #28
 8007adc:	bf44      	itt	mi
 8007ade:	232b      	movmi	r3, #43	; 0x2b
 8007ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aea:	d015      	beq.n	8007b18 <_vfiprintf_r+0x13c>
 8007aec:	9a07      	ldr	r2, [sp, #28]
 8007aee:	4654      	mov	r4, sl
 8007af0:	2000      	movs	r0, #0
 8007af2:	f04f 0c0a 	mov.w	ip, #10
 8007af6:	4621      	mov	r1, r4
 8007af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007afc:	3b30      	subs	r3, #48	; 0x30
 8007afe:	2b09      	cmp	r3, #9
 8007b00:	d94e      	bls.n	8007ba0 <_vfiprintf_r+0x1c4>
 8007b02:	b1b0      	cbz	r0, 8007b32 <_vfiprintf_r+0x156>
 8007b04:	9207      	str	r2, [sp, #28]
 8007b06:	e014      	b.n	8007b32 <_vfiprintf_r+0x156>
 8007b08:	eba0 0308 	sub.w	r3, r0, r8
 8007b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b10:	4313      	orrs	r3, r2
 8007b12:	9304      	str	r3, [sp, #16]
 8007b14:	46a2      	mov	sl, r4
 8007b16:	e7d2      	b.n	8007abe <_vfiprintf_r+0xe2>
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	1d19      	adds	r1, r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	9103      	str	r1, [sp, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bfbb      	ittet	lt
 8007b24:	425b      	neglt	r3, r3
 8007b26:	f042 0202 	orrlt.w	r2, r2, #2
 8007b2a:	9307      	strge	r3, [sp, #28]
 8007b2c:	9307      	strlt	r3, [sp, #28]
 8007b2e:	bfb8      	it	lt
 8007b30:	9204      	strlt	r2, [sp, #16]
 8007b32:	7823      	ldrb	r3, [r4, #0]
 8007b34:	2b2e      	cmp	r3, #46	; 0x2e
 8007b36:	d10c      	bne.n	8007b52 <_vfiprintf_r+0x176>
 8007b38:	7863      	ldrb	r3, [r4, #1]
 8007b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b3c:	d135      	bne.n	8007baa <_vfiprintf_r+0x1ce>
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	1d1a      	adds	r2, r3, #4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	9203      	str	r2, [sp, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfb8      	it	lt
 8007b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b4e:	3402      	adds	r4, #2
 8007b50:	9305      	str	r3, [sp, #20]
 8007b52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c38 <_vfiprintf_r+0x25c>
 8007b56:	7821      	ldrb	r1, [r4, #0]
 8007b58:	2203      	movs	r2, #3
 8007b5a:	4650      	mov	r0, sl
 8007b5c:	f7f8 fb48 	bl	80001f0 <memchr>
 8007b60:	b140      	cbz	r0, 8007b74 <_vfiprintf_r+0x198>
 8007b62:	2340      	movs	r3, #64	; 0x40
 8007b64:	eba0 000a 	sub.w	r0, r0, sl
 8007b68:	fa03 f000 	lsl.w	r0, r3, r0
 8007b6c:	9b04      	ldr	r3, [sp, #16]
 8007b6e:	4303      	orrs	r3, r0
 8007b70:	3401      	adds	r4, #1
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b78:	482c      	ldr	r0, [pc, #176]	; (8007c2c <_vfiprintf_r+0x250>)
 8007b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b7e:	2206      	movs	r2, #6
 8007b80:	f7f8 fb36 	bl	80001f0 <memchr>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d03f      	beq.n	8007c08 <_vfiprintf_r+0x22c>
 8007b88:	4b29      	ldr	r3, [pc, #164]	; (8007c30 <_vfiprintf_r+0x254>)
 8007b8a:	bb1b      	cbnz	r3, 8007bd4 <_vfiprintf_r+0x1f8>
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	3307      	adds	r3, #7
 8007b90:	f023 0307 	bic.w	r3, r3, #7
 8007b94:	3308      	adds	r3, #8
 8007b96:	9303      	str	r3, [sp, #12]
 8007b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b9a:	443b      	add	r3, r7
 8007b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b9e:	e767      	b.n	8007a70 <_vfiprintf_r+0x94>
 8007ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	2001      	movs	r0, #1
 8007ba8:	e7a5      	b.n	8007af6 <_vfiprintf_r+0x11a>
 8007baa:	2300      	movs	r3, #0
 8007bac:	3401      	adds	r4, #1
 8007bae:	9305      	str	r3, [sp, #20]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f04f 0c0a 	mov.w	ip, #10
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bbc:	3a30      	subs	r2, #48	; 0x30
 8007bbe:	2a09      	cmp	r2, #9
 8007bc0:	d903      	bls.n	8007bca <_vfiprintf_r+0x1ee>
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0c5      	beq.n	8007b52 <_vfiprintf_r+0x176>
 8007bc6:	9105      	str	r1, [sp, #20]
 8007bc8:	e7c3      	b.n	8007b52 <_vfiprintf_r+0x176>
 8007bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bce:	4604      	mov	r4, r0
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e7f0      	b.n	8007bb6 <_vfiprintf_r+0x1da>
 8007bd4:	ab03      	add	r3, sp, #12
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	462a      	mov	r2, r5
 8007bda:	4b16      	ldr	r3, [pc, #88]	; (8007c34 <_vfiprintf_r+0x258>)
 8007bdc:	a904      	add	r1, sp, #16
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7fd fdc2 	bl	8005768 <_printf_float>
 8007be4:	4607      	mov	r7, r0
 8007be6:	1c78      	adds	r0, r7, #1
 8007be8:	d1d6      	bne.n	8007b98 <_vfiprintf_r+0x1bc>
 8007bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bec:	07d9      	lsls	r1, r3, #31
 8007bee:	d405      	bmi.n	8007bfc <_vfiprintf_r+0x220>
 8007bf0:	89ab      	ldrh	r3, [r5, #12]
 8007bf2:	059a      	lsls	r2, r3, #22
 8007bf4:	d402      	bmi.n	8007bfc <_vfiprintf_r+0x220>
 8007bf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bf8:	f000 faaf 	bl	800815a <__retarget_lock_release_recursive>
 8007bfc:	89ab      	ldrh	r3, [r5, #12]
 8007bfe:	065b      	lsls	r3, r3, #25
 8007c00:	f53f af12 	bmi.w	8007a28 <_vfiprintf_r+0x4c>
 8007c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c06:	e711      	b.n	8007a2c <_vfiprintf_r+0x50>
 8007c08:	ab03      	add	r3, sp, #12
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <_vfiprintf_r+0x258>)
 8007c10:	a904      	add	r1, sp, #16
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7fe f84c 	bl	8005cb0 <_printf_i>
 8007c18:	e7e4      	b.n	8007be4 <_vfiprintf_r+0x208>
 8007c1a:	bf00      	nop
 8007c1c:	0800881c 	.word	0x0800881c
 8007c20:	0800883c 	.word	0x0800883c
 8007c24:	080087fc 	.word	0x080087fc
 8007c28:	080086a4 	.word	0x080086a4
 8007c2c:	080086ae 	.word	0x080086ae
 8007c30:	08005769 	.word	0x08005769
 8007c34:	080079b9 	.word	0x080079b9
 8007c38:	080086aa 	.word	0x080086aa

08007c3c <__swbuf_r>:
 8007c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3e:	460e      	mov	r6, r1
 8007c40:	4614      	mov	r4, r2
 8007c42:	4605      	mov	r5, r0
 8007c44:	b118      	cbz	r0, 8007c4e <__swbuf_r+0x12>
 8007c46:	6983      	ldr	r3, [r0, #24]
 8007c48:	b90b      	cbnz	r3, 8007c4e <__swbuf_r+0x12>
 8007c4a:	f000 f9e7 	bl	800801c <__sinit>
 8007c4e:	4b21      	ldr	r3, [pc, #132]	; (8007cd4 <__swbuf_r+0x98>)
 8007c50:	429c      	cmp	r4, r3
 8007c52:	d12b      	bne.n	8007cac <__swbuf_r+0x70>
 8007c54:	686c      	ldr	r4, [r5, #4]
 8007c56:	69a3      	ldr	r3, [r4, #24]
 8007c58:	60a3      	str	r3, [r4, #8]
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	071a      	lsls	r2, r3, #28
 8007c5e:	d52f      	bpl.n	8007cc0 <__swbuf_r+0x84>
 8007c60:	6923      	ldr	r3, [r4, #16]
 8007c62:	b36b      	cbz	r3, 8007cc0 <__swbuf_r+0x84>
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	6820      	ldr	r0, [r4, #0]
 8007c68:	1ac0      	subs	r0, r0, r3
 8007c6a:	6963      	ldr	r3, [r4, #20]
 8007c6c:	b2f6      	uxtb	r6, r6
 8007c6e:	4283      	cmp	r3, r0
 8007c70:	4637      	mov	r7, r6
 8007c72:	dc04      	bgt.n	8007c7e <__swbuf_r+0x42>
 8007c74:	4621      	mov	r1, r4
 8007c76:	4628      	mov	r0, r5
 8007c78:	f000 f93c 	bl	8007ef4 <_fflush_r>
 8007c7c:	bb30      	cbnz	r0, 8007ccc <__swbuf_r+0x90>
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	60a3      	str	r3, [r4, #8]
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	701e      	strb	r6, [r3, #0]
 8007c8c:	6963      	ldr	r3, [r4, #20]
 8007c8e:	3001      	adds	r0, #1
 8007c90:	4283      	cmp	r3, r0
 8007c92:	d004      	beq.n	8007c9e <__swbuf_r+0x62>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	07db      	lsls	r3, r3, #31
 8007c98:	d506      	bpl.n	8007ca8 <__swbuf_r+0x6c>
 8007c9a:	2e0a      	cmp	r6, #10
 8007c9c:	d104      	bne.n	8007ca8 <__swbuf_r+0x6c>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 f927 	bl	8007ef4 <_fflush_r>
 8007ca6:	b988      	cbnz	r0, 8007ccc <__swbuf_r+0x90>
 8007ca8:	4638      	mov	r0, r7
 8007caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <__swbuf_r+0x9c>)
 8007cae:	429c      	cmp	r4, r3
 8007cb0:	d101      	bne.n	8007cb6 <__swbuf_r+0x7a>
 8007cb2:	68ac      	ldr	r4, [r5, #8]
 8007cb4:	e7cf      	b.n	8007c56 <__swbuf_r+0x1a>
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <__swbuf_r+0xa0>)
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	bf08      	it	eq
 8007cbc:	68ec      	ldreq	r4, [r5, #12]
 8007cbe:	e7ca      	b.n	8007c56 <__swbuf_r+0x1a>
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 f81a 	bl	8007cfc <__swsetup_r>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d0cb      	beq.n	8007c64 <__swbuf_r+0x28>
 8007ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8007cd0:	e7ea      	b.n	8007ca8 <__swbuf_r+0x6c>
 8007cd2:	bf00      	nop
 8007cd4:	0800881c 	.word	0x0800881c
 8007cd8:	0800883c 	.word	0x0800883c
 8007cdc:	080087fc 	.word	0x080087fc

08007ce0 <__ascii_wctomb>:
 8007ce0:	b149      	cbz	r1, 8007cf6 <__ascii_wctomb+0x16>
 8007ce2:	2aff      	cmp	r2, #255	; 0xff
 8007ce4:	bf85      	ittet	hi
 8007ce6:	238a      	movhi	r3, #138	; 0x8a
 8007ce8:	6003      	strhi	r3, [r0, #0]
 8007cea:	700a      	strbls	r2, [r1, #0]
 8007cec:	f04f 30ff 	movhi.w	r0, #4294967295
 8007cf0:	bf98      	it	ls
 8007cf2:	2001      	movls	r0, #1
 8007cf4:	4770      	bx	lr
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4770      	bx	lr
	...

08007cfc <__swsetup_r>:
 8007cfc:	4b32      	ldr	r3, [pc, #200]	; (8007dc8 <__swsetup_r+0xcc>)
 8007cfe:	b570      	push	{r4, r5, r6, lr}
 8007d00:	681d      	ldr	r5, [r3, #0]
 8007d02:	4606      	mov	r6, r0
 8007d04:	460c      	mov	r4, r1
 8007d06:	b125      	cbz	r5, 8007d12 <__swsetup_r+0x16>
 8007d08:	69ab      	ldr	r3, [r5, #24]
 8007d0a:	b913      	cbnz	r3, 8007d12 <__swsetup_r+0x16>
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f000 f985 	bl	800801c <__sinit>
 8007d12:	4b2e      	ldr	r3, [pc, #184]	; (8007dcc <__swsetup_r+0xd0>)
 8007d14:	429c      	cmp	r4, r3
 8007d16:	d10f      	bne.n	8007d38 <__swsetup_r+0x3c>
 8007d18:	686c      	ldr	r4, [r5, #4]
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d20:	0719      	lsls	r1, r3, #28
 8007d22:	d42c      	bmi.n	8007d7e <__swsetup_r+0x82>
 8007d24:	06dd      	lsls	r5, r3, #27
 8007d26:	d411      	bmi.n	8007d4c <__swsetup_r+0x50>
 8007d28:	2309      	movs	r3, #9
 8007d2a:	6033      	str	r3, [r6, #0]
 8007d2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d30:	81a3      	strh	r3, [r4, #12]
 8007d32:	f04f 30ff 	mov.w	r0, #4294967295
 8007d36:	e03e      	b.n	8007db6 <__swsetup_r+0xba>
 8007d38:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <__swsetup_r+0xd4>)
 8007d3a:	429c      	cmp	r4, r3
 8007d3c:	d101      	bne.n	8007d42 <__swsetup_r+0x46>
 8007d3e:	68ac      	ldr	r4, [r5, #8]
 8007d40:	e7eb      	b.n	8007d1a <__swsetup_r+0x1e>
 8007d42:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <__swsetup_r+0xd8>)
 8007d44:	429c      	cmp	r4, r3
 8007d46:	bf08      	it	eq
 8007d48:	68ec      	ldreq	r4, [r5, #12]
 8007d4a:	e7e6      	b.n	8007d1a <__swsetup_r+0x1e>
 8007d4c:	0758      	lsls	r0, r3, #29
 8007d4e:	d512      	bpl.n	8007d76 <__swsetup_r+0x7a>
 8007d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d52:	b141      	cbz	r1, 8007d66 <__swsetup_r+0x6a>
 8007d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d58:	4299      	cmp	r1, r3
 8007d5a:	d002      	beq.n	8007d62 <__swsetup_r+0x66>
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff fb31 	bl	80073c4 <_free_r>
 8007d62:	2300      	movs	r3, #0
 8007d64:	6363      	str	r3, [r4, #52]	; 0x34
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	6063      	str	r3, [r4, #4]
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	f043 0308 	orr.w	r3, r3, #8
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	b94b      	cbnz	r3, 8007d96 <__swsetup_r+0x9a>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8c:	d003      	beq.n	8007d96 <__swsetup_r+0x9a>
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4630      	mov	r0, r6
 8007d92:	f000 fa09 	bl	80081a8 <__smakebuf_r>
 8007d96:	89a0      	ldrh	r0, [r4, #12]
 8007d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d9c:	f010 0301 	ands.w	r3, r0, #1
 8007da0:	d00a      	beq.n	8007db8 <__swsetup_r+0xbc>
 8007da2:	2300      	movs	r3, #0
 8007da4:	60a3      	str	r3, [r4, #8]
 8007da6:	6963      	ldr	r3, [r4, #20]
 8007da8:	425b      	negs	r3, r3
 8007daa:	61a3      	str	r3, [r4, #24]
 8007dac:	6923      	ldr	r3, [r4, #16]
 8007dae:	b943      	cbnz	r3, 8007dc2 <__swsetup_r+0xc6>
 8007db0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007db4:	d1ba      	bne.n	8007d2c <__swsetup_r+0x30>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	0781      	lsls	r1, r0, #30
 8007dba:	bf58      	it	pl
 8007dbc:	6963      	ldrpl	r3, [r4, #20]
 8007dbe:	60a3      	str	r3, [r4, #8]
 8007dc0:	e7f4      	b.n	8007dac <__swsetup_r+0xb0>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e7f7      	b.n	8007db6 <__swsetup_r+0xba>
 8007dc6:	bf00      	nop
 8007dc8:	2000000c 	.word	0x2000000c
 8007dcc:	0800881c 	.word	0x0800881c
 8007dd0:	0800883c 	.word	0x0800883c
 8007dd4:	080087fc 	.word	0x080087fc

08007dd8 <abort>:
 8007dd8:	b508      	push	{r3, lr}
 8007dda:	2006      	movs	r0, #6
 8007ddc:	f000 fa54 	bl	8008288 <raise>
 8007de0:	2001      	movs	r0, #1
 8007de2:	f7f9 fafb 	bl	80013dc <_exit>
	...

08007de8 <__sflush_r>:
 8007de8:	898a      	ldrh	r2, [r1, #12]
 8007dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dee:	4605      	mov	r5, r0
 8007df0:	0710      	lsls	r0, r2, #28
 8007df2:	460c      	mov	r4, r1
 8007df4:	d458      	bmi.n	8007ea8 <__sflush_r+0xc0>
 8007df6:	684b      	ldr	r3, [r1, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	dc05      	bgt.n	8007e08 <__sflush_r+0x20>
 8007dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	dc02      	bgt.n	8007e08 <__sflush_r+0x20>
 8007e02:	2000      	movs	r0, #0
 8007e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e0a:	2e00      	cmp	r6, #0
 8007e0c:	d0f9      	beq.n	8007e02 <__sflush_r+0x1a>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e14:	682f      	ldr	r7, [r5, #0]
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	d032      	beq.n	8007e80 <__sflush_r+0x98>
 8007e1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	075a      	lsls	r2, r3, #29
 8007e20:	d505      	bpl.n	8007e2e <__sflush_r+0x46>
 8007e22:	6863      	ldr	r3, [r4, #4]
 8007e24:	1ac0      	subs	r0, r0, r3
 8007e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e28:	b10b      	cbz	r3, 8007e2e <__sflush_r+0x46>
 8007e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e2c:	1ac0      	subs	r0, r0, r3
 8007e2e:	2300      	movs	r3, #0
 8007e30:	4602      	mov	r2, r0
 8007e32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e34:	6a21      	ldr	r1, [r4, #32]
 8007e36:	4628      	mov	r0, r5
 8007e38:	47b0      	blx	r6
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	d106      	bne.n	8007e4e <__sflush_r+0x66>
 8007e40:	6829      	ldr	r1, [r5, #0]
 8007e42:	291d      	cmp	r1, #29
 8007e44:	d82c      	bhi.n	8007ea0 <__sflush_r+0xb8>
 8007e46:	4a2a      	ldr	r2, [pc, #168]	; (8007ef0 <__sflush_r+0x108>)
 8007e48:	40ca      	lsrs	r2, r1
 8007e4a:	07d6      	lsls	r6, r2, #31
 8007e4c:	d528      	bpl.n	8007ea0 <__sflush_r+0xb8>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	6062      	str	r2, [r4, #4]
 8007e52:	04d9      	lsls	r1, r3, #19
 8007e54:	6922      	ldr	r2, [r4, #16]
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	d504      	bpl.n	8007e64 <__sflush_r+0x7c>
 8007e5a:	1c42      	adds	r2, r0, #1
 8007e5c:	d101      	bne.n	8007e62 <__sflush_r+0x7a>
 8007e5e:	682b      	ldr	r3, [r5, #0]
 8007e60:	b903      	cbnz	r3, 8007e64 <__sflush_r+0x7c>
 8007e62:	6560      	str	r0, [r4, #84]	; 0x54
 8007e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e66:	602f      	str	r7, [r5, #0]
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	d0ca      	beq.n	8007e02 <__sflush_r+0x1a>
 8007e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e70:	4299      	cmp	r1, r3
 8007e72:	d002      	beq.n	8007e7a <__sflush_r+0x92>
 8007e74:	4628      	mov	r0, r5
 8007e76:	f7ff faa5 	bl	80073c4 <_free_r>
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8007e7e:	e7c1      	b.n	8007e04 <__sflush_r+0x1c>
 8007e80:	6a21      	ldr	r1, [r4, #32]
 8007e82:	2301      	movs	r3, #1
 8007e84:	4628      	mov	r0, r5
 8007e86:	47b0      	blx	r6
 8007e88:	1c41      	adds	r1, r0, #1
 8007e8a:	d1c7      	bne.n	8007e1c <__sflush_r+0x34>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0c4      	beq.n	8007e1c <__sflush_r+0x34>
 8007e92:	2b1d      	cmp	r3, #29
 8007e94:	d001      	beq.n	8007e9a <__sflush_r+0xb2>
 8007e96:	2b16      	cmp	r3, #22
 8007e98:	d101      	bne.n	8007e9e <__sflush_r+0xb6>
 8007e9a:	602f      	str	r7, [r5, #0]
 8007e9c:	e7b1      	b.n	8007e02 <__sflush_r+0x1a>
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea4:	81a3      	strh	r3, [r4, #12]
 8007ea6:	e7ad      	b.n	8007e04 <__sflush_r+0x1c>
 8007ea8:	690f      	ldr	r7, [r1, #16]
 8007eaa:	2f00      	cmp	r7, #0
 8007eac:	d0a9      	beq.n	8007e02 <__sflush_r+0x1a>
 8007eae:	0793      	lsls	r3, r2, #30
 8007eb0:	680e      	ldr	r6, [r1, #0]
 8007eb2:	bf08      	it	eq
 8007eb4:	694b      	ldreq	r3, [r1, #20]
 8007eb6:	600f      	str	r7, [r1, #0]
 8007eb8:	bf18      	it	ne
 8007eba:	2300      	movne	r3, #0
 8007ebc:	eba6 0807 	sub.w	r8, r6, r7
 8007ec0:	608b      	str	r3, [r1, #8]
 8007ec2:	f1b8 0f00 	cmp.w	r8, #0
 8007ec6:	dd9c      	ble.n	8007e02 <__sflush_r+0x1a>
 8007ec8:	6a21      	ldr	r1, [r4, #32]
 8007eca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ecc:	4643      	mov	r3, r8
 8007ece:	463a      	mov	r2, r7
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	47b0      	blx	r6
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	dc06      	bgt.n	8007ee6 <__sflush_r+0xfe>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee4:	e78e      	b.n	8007e04 <__sflush_r+0x1c>
 8007ee6:	4407      	add	r7, r0
 8007ee8:	eba8 0800 	sub.w	r8, r8, r0
 8007eec:	e7e9      	b.n	8007ec2 <__sflush_r+0xda>
 8007eee:	bf00      	nop
 8007ef0:	20400001 	.word	0x20400001

08007ef4 <_fflush_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	690b      	ldr	r3, [r1, #16]
 8007ef8:	4605      	mov	r5, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	b913      	cbnz	r3, 8007f04 <_fflush_r+0x10>
 8007efe:	2500      	movs	r5, #0
 8007f00:	4628      	mov	r0, r5
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	b118      	cbz	r0, 8007f0e <_fflush_r+0x1a>
 8007f06:	6983      	ldr	r3, [r0, #24]
 8007f08:	b90b      	cbnz	r3, 8007f0e <_fflush_r+0x1a>
 8007f0a:	f000 f887 	bl	800801c <__sinit>
 8007f0e:	4b14      	ldr	r3, [pc, #80]	; (8007f60 <_fflush_r+0x6c>)
 8007f10:	429c      	cmp	r4, r3
 8007f12:	d11b      	bne.n	8007f4c <_fflush_r+0x58>
 8007f14:	686c      	ldr	r4, [r5, #4]
 8007f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0ef      	beq.n	8007efe <_fflush_r+0xa>
 8007f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f20:	07d0      	lsls	r0, r2, #31
 8007f22:	d404      	bmi.n	8007f2e <_fflush_r+0x3a>
 8007f24:	0599      	lsls	r1, r3, #22
 8007f26:	d402      	bmi.n	8007f2e <_fflush_r+0x3a>
 8007f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f2a:	f000 f915 	bl	8008158 <__retarget_lock_acquire_recursive>
 8007f2e:	4628      	mov	r0, r5
 8007f30:	4621      	mov	r1, r4
 8007f32:	f7ff ff59 	bl	8007de8 <__sflush_r>
 8007f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f38:	07da      	lsls	r2, r3, #31
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	d4e0      	bmi.n	8007f00 <_fflush_r+0xc>
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	059b      	lsls	r3, r3, #22
 8007f42:	d4dd      	bmi.n	8007f00 <_fflush_r+0xc>
 8007f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f46:	f000 f908 	bl	800815a <__retarget_lock_release_recursive>
 8007f4a:	e7d9      	b.n	8007f00 <_fflush_r+0xc>
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <_fflush_r+0x70>)
 8007f4e:	429c      	cmp	r4, r3
 8007f50:	d101      	bne.n	8007f56 <_fflush_r+0x62>
 8007f52:	68ac      	ldr	r4, [r5, #8]
 8007f54:	e7df      	b.n	8007f16 <_fflush_r+0x22>
 8007f56:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <_fflush_r+0x74>)
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	bf08      	it	eq
 8007f5c:	68ec      	ldreq	r4, [r5, #12]
 8007f5e:	e7da      	b.n	8007f16 <_fflush_r+0x22>
 8007f60:	0800881c 	.word	0x0800881c
 8007f64:	0800883c 	.word	0x0800883c
 8007f68:	080087fc 	.word	0x080087fc

08007f6c <std>:
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	4604      	mov	r4, r0
 8007f72:	e9c0 3300 	strd	r3, r3, [r0]
 8007f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f7a:	6083      	str	r3, [r0, #8]
 8007f7c:	8181      	strh	r1, [r0, #12]
 8007f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f80:	81c2      	strh	r2, [r0, #14]
 8007f82:	6183      	str	r3, [r0, #24]
 8007f84:	4619      	mov	r1, r3
 8007f86:	2208      	movs	r2, #8
 8007f88:	305c      	adds	r0, #92	; 0x5c
 8007f8a:	f7fd fb45 	bl	8005618 <memset>
 8007f8e:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <std+0x38>)
 8007f90:	6263      	str	r3, [r4, #36]	; 0x24
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <std+0x3c>)
 8007f94:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <std+0x40>)
 8007f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <std+0x44>)
 8007f9c:	6224      	str	r4, [r4, #32]
 8007f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8007fa0:	bd10      	pop	{r4, pc}
 8007fa2:	bf00      	nop
 8007fa4:	080082c1 	.word	0x080082c1
 8007fa8:	080082e3 	.word	0x080082e3
 8007fac:	0800831b 	.word	0x0800831b
 8007fb0:	0800833f 	.word	0x0800833f

08007fb4 <_cleanup_r>:
 8007fb4:	4901      	ldr	r1, [pc, #4]	; (8007fbc <_cleanup_r+0x8>)
 8007fb6:	f000 b8af 	b.w	8008118 <_fwalk_reent>
 8007fba:	bf00      	nop
 8007fbc:	08007ef5 	.word	0x08007ef5

08007fc0 <__sfmoreglue>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	2268      	movs	r2, #104	; 0x68
 8007fc4:	1e4d      	subs	r5, r1, #1
 8007fc6:	4355      	muls	r5, r2
 8007fc8:	460e      	mov	r6, r1
 8007fca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fce:	f7ff fa65 	bl	800749c <_malloc_r>
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	b140      	cbz	r0, 8007fe8 <__sfmoreglue+0x28>
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	e9c0 1600 	strd	r1, r6, [r0]
 8007fdc:	300c      	adds	r0, #12
 8007fde:	60a0      	str	r0, [r4, #8]
 8007fe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fe4:	f7fd fb18 	bl	8005618 <memset>
 8007fe8:	4620      	mov	r0, r4
 8007fea:	bd70      	pop	{r4, r5, r6, pc}

08007fec <__sfp_lock_acquire>:
 8007fec:	4801      	ldr	r0, [pc, #4]	; (8007ff4 <__sfp_lock_acquire+0x8>)
 8007fee:	f000 b8b3 	b.w	8008158 <__retarget_lock_acquire_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	200003dd 	.word	0x200003dd

08007ff8 <__sfp_lock_release>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__sfp_lock_release+0x8>)
 8007ffa:	f000 b8ae 	b.w	800815a <__retarget_lock_release_recursive>
 8007ffe:	bf00      	nop
 8008000:	200003dd 	.word	0x200003dd

08008004 <__sinit_lock_acquire>:
 8008004:	4801      	ldr	r0, [pc, #4]	; (800800c <__sinit_lock_acquire+0x8>)
 8008006:	f000 b8a7 	b.w	8008158 <__retarget_lock_acquire_recursive>
 800800a:	bf00      	nop
 800800c:	200003de 	.word	0x200003de

08008010 <__sinit_lock_release>:
 8008010:	4801      	ldr	r0, [pc, #4]	; (8008018 <__sinit_lock_release+0x8>)
 8008012:	f000 b8a2 	b.w	800815a <__retarget_lock_release_recursive>
 8008016:	bf00      	nop
 8008018:	200003de 	.word	0x200003de

0800801c <__sinit>:
 800801c:	b510      	push	{r4, lr}
 800801e:	4604      	mov	r4, r0
 8008020:	f7ff fff0 	bl	8008004 <__sinit_lock_acquire>
 8008024:	69a3      	ldr	r3, [r4, #24]
 8008026:	b11b      	cbz	r3, 8008030 <__sinit+0x14>
 8008028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800802c:	f7ff bff0 	b.w	8008010 <__sinit_lock_release>
 8008030:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008034:	6523      	str	r3, [r4, #80]	; 0x50
 8008036:	4b13      	ldr	r3, [pc, #76]	; (8008084 <__sinit+0x68>)
 8008038:	4a13      	ldr	r2, [pc, #76]	; (8008088 <__sinit+0x6c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	62a2      	str	r2, [r4, #40]	; 0x28
 800803e:	42a3      	cmp	r3, r4
 8008040:	bf04      	itt	eq
 8008042:	2301      	moveq	r3, #1
 8008044:	61a3      	streq	r3, [r4, #24]
 8008046:	4620      	mov	r0, r4
 8008048:	f000 f820 	bl	800808c <__sfp>
 800804c:	6060      	str	r0, [r4, #4]
 800804e:	4620      	mov	r0, r4
 8008050:	f000 f81c 	bl	800808c <__sfp>
 8008054:	60a0      	str	r0, [r4, #8]
 8008056:	4620      	mov	r0, r4
 8008058:	f000 f818 	bl	800808c <__sfp>
 800805c:	2200      	movs	r2, #0
 800805e:	60e0      	str	r0, [r4, #12]
 8008060:	2104      	movs	r1, #4
 8008062:	6860      	ldr	r0, [r4, #4]
 8008064:	f7ff ff82 	bl	8007f6c <std>
 8008068:	68a0      	ldr	r0, [r4, #8]
 800806a:	2201      	movs	r2, #1
 800806c:	2109      	movs	r1, #9
 800806e:	f7ff ff7d 	bl	8007f6c <std>
 8008072:	68e0      	ldr	r0, [r4, #12]
 8008074:	2202      	movs	r2, #2
 8008076:	2112      	movs	r1, #18
 8008078:	f7ff ff78 	bl	8007f6c <std>
 800807c:	2301      	movs	r3, #1
 800807e:	61a3      	str	r3, [r4, #24]
 8008080:	e7d2      	b.n	8008028 <__sinit+0xc>
 8008082:	bf00      	nop
 8008084:	08008484 	.word	0x08008484
 8008088:	08007fb5 	.word	0x08007fb5

0800808c <__sfp>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	4607      	mov	r7, r0
 8008090:	f7ff ffac 	bl	8007fec <__sfp_lock_acquire>
 8008094:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <__sfp+0x84>)
 8008096:	681e      	ldr	r6, [r3, #0]
 8008098:	69b3      	ldr	r3, [r6, #24]
 800809a:	b913      	cbnz	r3, 80080a2 <__sfp+0x16>
 800809c:	4630      	mov	r0, r6
 800809e:	f7ff ffbd 	bl	800801c <__sinit>
 80080a2:	3648      	adds	r6, #72	; 0x48
 80080a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	d503      	bpl.n	80080b4 <__sfp+0x28>
 80080ac:	6833      	ldr	r3, [r6, #0]
 80080ae:	b30b      	cbz	r3, 80080f4 <__sfp+0x68>
 80080b0:	6836      	ldr	r6, [r6, #0]
 80080b2:	e7f7      	b.n	80080a4 <__sfp+0x18>
 80080b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080b8:	b9d5      	cbnz	r5, 80080f0 <__sfp+0x64>
 80080ba:	4b16      	ldr	r3, [pc, #88]	; (8008114 <__sfp+0x88>)
 80080bc:	60e3      	str	r3, [r4, #12]
 80080be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080c2:	6665      	str	r5, [r4, #100]	; 0x64
 80080c4:	f000 f847 	bl	8008156 <__retarget_lock_init_recursive>
 80080c8:	f7ff ff96 	bl	8007ff8 <__sfp_lock_release>
 80080cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080d4:	6025      	str	r5, [r4, #0]
 80080d6:	61a5      	str	r5, [r4, #24]
 80080d8:	2208      	movs	r2, #8
 80080da:	4629      	mov	r1, r5
 80080dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080e0:	f7fd fa9a 	bl	8005618 <memset>
 80080e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080ec:	4620      	mov	r0, r4
 80080ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f0:	3468      	adds	r4, #104	; 0x68
 80080f2:	e7d9      	b.n	80080a8 <__sfp+0x1c>
 80080f4:	2104      	movs	r1, #4
 80080f6:	4638      	mov	r0, r7
 80080f8:	f7ff ff62 	bl	8007fc0 <__sfmoreglue>
 80080fc:	4604      	mov	r4, r0
 80080fe:	6030      	str	r0, [r6, #0]
 8008100:	2800      	cmp	r0, #0
 8008102:	d1d5      	bne.n	80080b0 <__sfp+0x24>
 8008104:	f7ff ff78 	bl	8007ff8 <__sfp_lock_release>
 8008108:	230c      	movs	r3, #12
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	e7ee      	b.n	80080ec <__sfp+0x60>
 800810e:	bf00      	nop
 8008110:	08008484 	.word	0x08008484
 8008114:	ffff0001 	.word	0xffff0001

08008118 <_fwalk_reent>:
 8008118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800811c:	4606      	mov	r6, r0
 800811e:	4688      	mov	r8, r1
 8008120:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008124:	2700      	movs	r7, #0
 8008126:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800812a:	f1b9 0901 	subs.w	r9, r9, #1
 800812e:	d505      	bpl.n	800813c <_fwalk_reent+0x24>
 8008130:	6824      	ldr	r4, [r4, #0]
 8008132:	2c00      	cmp	r4, #0
 8008134:	d1f7      	bne.n	8008126 <_fwalk_reent+0xe>
 8008136:	4638      	mov	r0, r7
 8008138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813c:	89ab      	ldrh	r3, [r5, #12]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d907      	bls.n	8008152 <_fwalk_reent+0x3a>
 8008142:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008146:	3301      	adds	r3, #1
 8008148:	d003      	beq.n	8008152 <_fwalk_reent+0x3a>
 800814a:	4629      	mov	r1, r5
 800814c:	4630      	mov	r0, r6
 800814e:	47c0      	blx	r8
 8008150:	4307      	orrs	r7, r0
 8008152:	3568      	adds	r5, #104	; 0x68
 8008154:	e7e9      	b.n	800812a <_fwalk_reent+0x12>

08008156 <__retarget_lock_init_recursive>:
 8008156:	4770      	bx	lr

08008158 <__retarget_lock_acquire_recursive>:
 8008158:	4770      	bx	lr

0800815a <__retarget_lock_release_recursive>:
 800815a:	4770      	bx	lr

0800815c <__swhatbuf_r>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	460e      	mov	r6, r1
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	2900      	cmp	r1, #0
 8008166:	b096      	sub	sp, #88	; 0x58
 8008168:	4614      	mov	r4, r2
 800816a:	461d      	mov	r5, r3
 800816c:	da08      	bge.n	8008180 <__swhatbuf_r+0x24>
 800816e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	602a      	str	r2, [r5, #0]
 8008176:	061a      	lsls	r2, r3, #24
 8008178:	d410      	bmi.n	800819c <__swhatbuf_r+0x40>
 800817a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800817e:	e00e      	b.n	800819e <__swhatbuf_r+0x42>
 8008180:	466a      	mov	r2, sp
 8008182:	f000 f903 	bl	800838c <_fstat_r>
 8008186:	2800      	cmp	r0, #0
 8008188:	dbf1      	blt.n	800816e <__swhatbuf_r+0x12>
 800818a:	9a01      	ldr	r2, [sp, #4]
 800818c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008190:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008194:	425a      	negs	r2, r3
 8008196:	415a      	adcs	r2, r3
 8008198:	602a      	str	r2, [r5, #0]
 800819a:	e7ee      	b.n	800817a <__swhatbuf_r+0x1e>
 800819c:	2340      	movs	r3, #64	; 0x40
 800819e:	2000      	movs	r0, #0
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	b016      	add	sp, #88	; 0x58
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080081a8 <__smakebuf_r>:
 80081a8:	898b      	ldrh	r3, [r1, #12]
 80081aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081ac:	079d      	lsls	r5, r3, #30
 80081ae:	4606      	mov	r6, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	d507      	bpl.n	80081c4 <__smakebuf_r+0x1c>
 80081b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	6123      	str	r3, [r4, #16]
 80081bc:	2301      	movs	r3, #1
 80081be:	6163      	str	r3, [r4, #20]
 80081c0:	b002      	add	sp, #8
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	ab01      	add	r3, sp, #4
 80081c6:	466a      	mov	r2, sp
 80081c8:	f7ff ffc8 	bl	800815c <__swhatbuf_r>
 80081cc:	9900      	ldr	r1, [sp, #0]
 80081ce:	4605      	mov	r5, r0
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7ff f963 	bl	800749c <_malloc_r>
 80081d6:	b948      	cbnz	r0, 80081ec <__smakebuf_r+0x44>
 80081d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081dc:	059a      	lsls	r2, r3, #22
 80081de:	d4ef      	bmi.n	80081c0 <__smakebuf_r+0x18>
 80081e0:	f023 0303 	bic.w	r3, r3, #3
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	e7e3      	b.n	80081b4 <__smakebuf_r+0xc>
 80081ec:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <__smakebuf_r+0x7c>)
 80081ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	6020      	str	r0, [r4, #0]
 80081f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	6163      	str	r3, [r4, #20]
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	6120      	str	r0, [r4, #16]
 8008202:	b15b      	cbz	r3, 800821c <__smakebuf_r+0x74>
 8008204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008208:	4630      	mov	r0, r6
 800820a:	f000 f8d1 	bl	80083b0 <_isatty_r>
 800820e:	b128      	cbz	r0, 800821c <__smakebuf_r+0x74>
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	89a0      	ldrh	r0, [r4, #12]
 800821e:	4305      	orrs	r5, r0
 8008220:	81a5      	strh	r5, [r4, #12]
 8008222:	e7cd      	b.n	80081c0 <__smakebuf_r+0x18>
 8008224:	08007fb5 	.word	0x08007fb5

08008228 <_malloc_usable_size_r>:
 8008228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800822c:	1f18      	subs	r0, r3, #4
 800822e:	2b00      	cmp	r3, #0
 8008230:	bfbc      	itt	lt
 8008232:	580b      	ldrlt	r3, [r1, r0]
 8008234:	18c0      	addlt	r0, r0, r3
 8008236:	4770      	bx	lr

08008238 <_raise_r>:
 8008238:	291f      	cmp	r1, #31
 800823a:	b538      	push	{r3, r4, r5, lr}
 800823c:	4604      	mov	r4, r0
 800823e:	460d      	mov	r5, r1
 8008240:	d904      	bls.n	800824c <_raise_r+0x14>
 8008242:	2316      	movs	r3, #22
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	f04f 30ff 	mov.w	r0, #4294967295
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800824e:	b112      	cbz	r2, 8008256 <_raise_r+0x1e>
 8008250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008254:	b94b      	cbnz	r3, 800826a <_raise_r+0x32>
 8008256:	4620      	mov	r0, r4
 8008258:	f000 f830 	bl	80082bc <_getpid_r>
 800825c:	462a      	mov	r2, r5
 800825e:	4601      	mov	r1, r0
 8008260:	4620      	mov	r0, r4
 8008262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008266:	f000 b817 	b.w	8008298 <_kill_r>
 800826a:	2b01      	cmp	r3, #1
 800826c:	d00a      	beq.n	8008284 <_raise_r+0x4c>
 800826e:	1c59      	adds	r1, r3, #1
 8008270:	d103      	bne.n	800827a <_raise_r+0x42>
 8008272:	2316      	movs	r3, #22
 8008274:	6003      	str	r3, [r0, #0]
 8008276:	2001      	movs	r0, #1
 8008278:	e7e7      	b.n	800824a <_raise_r+0x12>
 800827a:	2400      	movs	r4, #0
 800827c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008280:	4628      	mov	r0, r5
 8008282:	4798      	blx	r3
 8008284:	2000      	movs	r0, #0
 8008286:	e7e0      	b.n	800824a <_raise_r+0x12>

08008288 <raise>:
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <raise+0xc>)
 800828a:	4601      	mov	r1, r0
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	f7ff bfd3 	b.w	8008238 <_raise_r>
 8008292:	bf00      	nop
 8008294:	2000000c 	.word	0x2000000c

08008298 <_kill_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4d07      	ldr	r5, [pc, #28]	; (80082b8 <_kill_r+0x20>)
 800829c:	2300      	movs	r3, #0
 800829e:	4604      	mov	r4, r0
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	602b      	str	r3, [r5, #0]
 80082a6:	f7f9 f889 	bl	80013bc <_kill>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	d102      	bne.n	80082b4 <_kill_r+0x1c>
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	b103      	cbz	r3, 80082b4 <_kill_r+0x1c>
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	bd38      	pop	{r3, r4, r5, pc}
 80082b6:	bf00      	nop
 80082b8:	200003d8 	.word	0x200003d8

080082bc <_getpid_r>:
 80082bc:	f7f9 b876 	b.w	80013ac <_getpid>

080082c0 <__sread>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	f000 f894 	bl	80083f4 <_read_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	bfab      	itete	ge
 80082d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082d2:	89a3      	ldrhlt	r3, [r4, #12]
 80082d4:	181b      	addge	r3, r3, r0
 80082d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082da:	bfac      	ite	ge
 80082dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80082de:	81a3      	strhlt	r3, [r4, #12]
 80082e0:	bd10      	pop	{r4, pc}

080082e2 <__swrite>:
 80082e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e6:	461f      	mov	r7, r3
 80082e8:	898b      	ldrh	r3, [r1, #12]
 80082ea:	05db      	lsls	r3, r3, #23
 80082ec:	4605      	mov	r5, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	4616      	mov	r6, r2
 80082f2:	d505      	bpl.n	8008300 <__swrite+0x1e>
 80082f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f8:	2302      	movs	r3, #2
 80082fa:	2200      	movs	r2, #0
 80082fc:	f000 f868 	bl	80083d0 <_lseek_r>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	4632      	mov	r2, r6
 800830e:	463b      	mov	r3, r7
 8008310:	4628      	mov	r0, r5
 8008312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	f000 b817 	b.w	8008348 <_write_r>

0800831a <__sseek>:
 800831a:	b510      	push	{r4, lr}
 800831c:	460c      	mov	r4, r1
 800831e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008322:	f000 f855 	bl	80083d0 <_lseek_r>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	bf15      	itete	ne
 800832c:	6560      	strne	r0, [r4, #84]	; 0x54
 800832e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008336:	81a3      	strheq	r3, [r4, #12]
 8008338:	bf18      	it	ne
 800833a:	81a3      	strhne	r3, [r4, #12]
 800833c:	bd10      	pop	{r4, pc}

0800833e <__sclose>:
 800833e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008342:	f000 b813 	b.w	800836c <_close_r>
	...

08008348 <_write_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d07      	ldr	r5, [pc, #28]	; (8008368 <_write_r+0x20>)
 800834c:	4604      	mov	r4, r0
 800834e:	4608      	mov	r0, r1
 8008350:	4611      	mov	r1, r2
 8008352:	2200      	movs	r2, #0
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f7f9 f867 	bl	800142a <_write>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_write_r+0x1e>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_write_r+0x1e>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	200003d8 	.word	0x200003d8

0800836c <_close_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d06      	ldr	r5, [pc, #24]	; (8008388 <_close_r+0x1c>)
 8008370:	2300      	movs	r3, #0
 8008372:	4604      	mov	r4, r0
 8008374:	4608      	mov	r0, r1
 8008376:	602b      	str	r3, [r5, #0]
 8008378:	f7f9 f873 	bl	8001462 <_close>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d102      	bne.n	8008386 <_close_r+0x1a>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b103      	cbz	r3, 8008386 <_close_r+0x1a>
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	200003d8 	.word	0x200003d8

0800838c <_fstat_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4d07      	ldr	r5, [pc, #28]	; (80083ac <_fstat_r+0x20>)
 8008390:	2300      	movs	r3, #0
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	4611      	mov	r1, r2
 8008398:	602b      	str	r3, [r5, #0]
 800839a:	f7f9 f86e 	bl	800147a <_fstat>
 800839e:	1c43      	adds	r3, r0, #1
 80083a0:	d102      	bne.n	80083a8 <_fstat_r+0x1c>
 80083a2:	682b      	ldr	r3, [r5, #0]
 80083a4:	b103      	cbz	r3, 80083a8 <_fstat_r+0x1c>
 80083a6:	6023      	str	r3, [r4, #0]
 80083a8:	bd38      	pop	{r3, r4, r5, pc}
 80083aa:	bf00      	nop
 80083ac:	200003d8 	.word	0x200003d8

080083b0 <_isatty_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d06      	ldr	r5, [pc, #24]	; (80083cc <_isatty_r+0x1c>)
 80083b4:	2300      	movs	r3, #0
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	f7f9 f86d 	bl	800149a <_isatty>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_isatty_r+0x1a>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_isatty_r+0x1a>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	200003d8 	.word	0x200003d8

080083d0 <_lseek_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d07      	ldr	r5, [pc, #28]	; (80083f0 <_lseek_r+0x20>)
 80083d4:	4604      	mov	r4, r0
 80083d6:	4608      	mov	r0, r1
 80083d8:	4611      	mov	r1, r2
 80083da:	2200      	movs	r2, #0
 80083dc:	602a      	str	r2, [r5, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	f7f9 f866 	bl	80014b0 <_lseek>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_lseek_r+0x1e>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_lseek_r+0x1e>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	200003d8 	.word	0x200003d8

080083f4 <_read_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4d07      	ldr	r5, [pc, #28]	; (8008414 <_read_r+0x20>)
 80083f8:	4604      	mov	r4, r0
 80083fa:	4608      	mov	r0, r1
 80083fc:	4611      	mov	r1, r2
 80083fe:	2200      	movs	r2, #0
 8008400:	602a      	str	r2, [r5, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	f7f8 fff4 	bl	80013f0 <_read>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_read_r+0x1e>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_read_r+0x1e>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	200003d8 	.word	0x200003d8

08008418 <_init>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr

08008424 <_fini>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr
