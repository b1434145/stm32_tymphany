
FIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000487c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a48  08004a48  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004a48  08004a48  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a48  08004a48  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000017c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001042f  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024bc  00000000  00000000  00030483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00032940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  000338c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022098  00000000  00000000  00034728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fff  00000000  00000000  000567c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d343c  00000000  00000000  000697bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013cbfb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041a0  00000000  00000000  0013cc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080049f8 	.word	0x080049f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080049f8 	.word	0x080049f8

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fc12 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f84c 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f9e2 	bl	80005a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e4:	f000 f9c2 	bl	800056c <MX_DMA_Init>
  MX_ADC1_Init();
 80001e8:	f000 f8ac 	bl	8000344 <MX_ADC1_Init>
  MX_DAC1_Init();
 80001ec:	f000 f91a 	bl	8000424 <MX_DAC1_Init>
  MX_TIM2_Init();
 80001f0:	f000 f942 	bl	8000478 <MX_TIM2_Init>
  MX_USART2_Init();
 80001f4:	f000 f98e 	bl	8000514 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 80001f8:	2100      	movs	r1, #0
 80001fa:	4818      	ldr	r0, [pc, #96]	; (800025c <main+0x88>)
 80001fc:	f001 fdf6 	bl	8001dec <HAL_DAC_Start>
  HAL_TIM_Base_Start(&htim2);
 8000200:	4817      	ldr	r0, [pc, #92]	; (8000260 <main+0x8c>)
 8000202:	f003 fec9 	bl	8003f98 <HAL_TIM_Base_Start>
//	  HAL_USART_Transmit(&husart2, "Hello", 6, HAL_MAX_DELAY);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  arm_fir_init_f32(&S, num_taps, (float32_t*)&firCoeffs[0], (float32_t*)&fir_state_f32[0], block_size);
	  __HAL_TIM_SET_COUNTER(&htim2,0);
 8000206:	4b16      	ldr	r3, [pc, #88]	; (8000260 <main+0x8c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2200      	movs	r2, #0
 800020c:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_result_dma, adc_channel_count); //set adc
 800020e:	2301      	movs	r3, #1
 8000210:	461a      	mov	r2, r3
 8000212:	4914      	ldr	r1, [pc, #80]	; (8000264 <main+0x90>)
 8000214:	4814      	ldr	r0, [pc, #80]	; (8000268 <main+0x94>)
 8000216:	f000 fe67 	bl	8000ee8 <HAL_ADC_Start_DMA>
	  while(adc_conversion_complete == 0) {
 800021a:	bf00      	nop
 800021c:	4b13      	ldr	r3, [pc, #76]	; (800026c <main+0x98>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0fb      	beq.n	800021c <main+0x48>

	  }
	  adc_conversion_complete = 0;
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <main+0x98>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
	  x[order-1] = adc_result_dma[0];
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <main+0x90>)
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	b29a      	uxth	r2, r3
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <main+0x9c>)
 8000232:	815a      	strh	r2, [r3, #10]

	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)y);
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <main+0xa0>)
 8000236:	edd3 7a00 	vldr	s15, [r3]
 800023a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800023e:	ee17 3a90 	vmov	r3, s15
 8000242:	2200      	movs	r2, #0
 8000244:	2100      	movs	r1, #0
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <main+0x88>)
 8000248:	f001 fdab 	bl	8001da2 <HAL_DAC_SetValue>
	  while(__HAL_TIM_GET_COUNTER(&htim2) < 1){
 800024c:	bf00      	nop
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <main+0x8c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0fa      	beq.n	800024e <main+0x7a>
	  __HAL_TIM_SET_COUNTER(&htim2,0);
 8000258:	e7d5      	b.n	8000206 <main+0x32>
 800025a:	bf00      	nop
 800025c:	200000d4 	.word	0x200000d4
 8000260:	200000e8 	.word	0x200000e8
 8000264:	20000184 	.word	0x20000184
 8000268:	20000040 	.word	0x20000040
 800026c:	20000188 	.word	0x20000188
 8000270:	2000018c 	.word	0x2000018c
 8000274:	20000198 	.word	0x20000198

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b0a6      	sub	sp, #152	; 0x98
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f004 fbae 	bl	80049e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2258      	movs	r2, #88	; 0x58
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f004 fba0 	bl	80049e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	2302      	movs	r3, #2
 80002aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b0:	2310      	movs	r3, #16
 80002b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 f95e 	bl	8002598 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e2:	f000 f9cf 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	2302      	movs	r3, #2
 80002ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f003 f99c 	bl	8003640 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030e:	f000 f9b9 	bl	8000684 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <SystemClock_Config+0xc8>)
 8000314:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800031a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000320:	2300      	movs	r3, #0
 8000322:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fbc0 	bl	8003aac <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000332:	f000 f9a7 	bl	8000684 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3798      	adds	r7, #152	; 0x98
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	00100082 	.word	0x00100082

08000344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08a      	sub	sp, #40	; 0x28
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800034a:	f107 031c 	add.w	r3, r7, #28
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
 8000364:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000366:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000368:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000374:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037a:	4b29      	ldr	r3, [pc, #164]	; (8000420 <MX_ADC1_Init+0xdc>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000380:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000382:	2200      	movs	r2, #0
 8000384:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000386:	4b26      	ldr	r3, [pc, #152]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000388:	2200      	movs	r2, #0
 800038a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038e:	4b24      	ldr	r3, [pc, #144]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000390:	2200      	movs	r2, #0
 8000392:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000396:	2201      	movs	r2, #1
 8000398:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <MX_ADC1_Init+0xdc>)
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003a0:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ae:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003b0:	2204      	movs	r2, #4
 80003b2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003bc:	2200      	movs	r2, #0
 80003be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c0:	4817      	ldr	r0, [pc, #92]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003c2:	f000 fb97 	bl	8000af4 <HAL_ADC_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003cc:	f000 f95a 	bl	8000684 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003d4:	f107 031c 	add.w	r3, r7, #28
 80003d8:	4619      	mov	r1, r3
 80003da:	4811      	ldr	r0, [pc, #68]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003dc:	f001 f98c 	bl	80016f8 <HAL_ADCEx_MultiModeConfigChannel>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003e6:	f000 f94d 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ea:	2301      	movs	r3, #1
 80003ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ee:	2301      	movs	r3, #1
 80003f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000408:	f000 fe8a 	bl	8001120 <HAL_ADC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000412:	f000 f937 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	3728      	adds	r7, #40	; 0x28
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000040 	.word	0x20000040

08000424 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_DAC1_Init+0x4c>)
 8000436:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <MX_DAC1_Init+0x50>)
 8000438:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800043a:	480d      	ldr	r0, [pc, #52]	; (8000470 <MX_DAC1_Init+0x4c>)
 800043c:	f001 fc8f 	bl	8001d5e <HAL_DAC_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000446:	f000 f91d 	bl	8000684 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800044a:	2300      	movs	r3, #0
 800044c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	4619      	mov	r1, r3
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_DAC1_Init+0x4c>)
 800045a:	f001 fd12 	bl	8001e82 <HAL_DAC_ConfigChannel>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000464:	f000 f90e 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	200000d4 	.word	0x200000d4
 8000474:	40007400 	.word	0x40007400

08000478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MX_TIM2_Init+0x98>)
 8000498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800049c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1499;
 800049e:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <MX_TIM2_Init+0x98>)
 80004a0:	f240 52db 	movw	r2, #1499	; 0x5db
 80004a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_TIM2_Init+0x98>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80004ac:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_TIM2_Init+0x98>)
 80004ae:	f04f 32ff 	mov.w	r2, #4294967295
 80004b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MX_TIM2_Init+0x98>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <MX_TIM2_Init+0x98>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004c0:	4813      	ldr	r0, [pc, #76]	; (8000510 <MX_TIM2_Init+0x98>)
 80004c2:	f003 fd11 	bl	8003ee8 <HAL_TIM_Base_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004cc:	f000 f8da 	bl	8000684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4619      	mov	r1, r3
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <MX_TIM2_Init+0x98>)
 80004de:	f003 fdc3 	bl	8004068 <HAL_TIM_ConfigClockSource>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80004e8:	f000 f8cc 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ec:	2300      	movs	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_TIM2_Init+0x98>)
 80004fa:	f003 ffb7 	bl	800446c <HAL_TIMEx_MasterConfigSynchronization>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000504:	f000 f8be 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200000e8 	.word	0x200000e8

08000514 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_USART2_Init+0x50>)
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <MX_USART2_Init+0x54>)
 800051c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 38400;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART2_Init+0x50>)
 8000520:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000524:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_USART2_Init+0x50>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <MX_USART2_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_USART2_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MX_USART2_Init+0x50>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_USART2_Init+0x50>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <MX_USART2_Init+0x50>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART2_Init+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <MX_USART2_Init+0x50>)
 8000552:	f004 f817 	bl	8004584 <HAL_USART_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 800055c:	f000 f892 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000134 	.word	0x20000134
 8000568:	40004400 	.word	0x40004400

0800056c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_DMA_Init+0x38>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <MX_DMA_Init+0x38>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_DMA_Init+0x38>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	200b      	movs	r0, #11
 8000590:	f001 fbaf 	bl	8001cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000594:	200b      	movs	r0, #11
 8000596:	f001 fbc8 	bl	8001d2a <HAL_NVIC_EnableIRQ>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_GPIO_Init+0x44>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <MX_GPIO_Init+0x44>)
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_GPIO_Init+0x44>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_GPIO_Init+0x44>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <MX_GPIO_Init+0x44>)
 80005cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_GPIO_Init+0x44>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	adc_conversion_complete = 1;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <HAL_ADC_ConvCpltCallback+0x84>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
	y = 0;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <HAL_ADC_ConvCpltCallback+0x88>)
 8000600:	f04f 0200 	mov.w	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < order; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	81fb      	strh	r3, [r7, #14]
 800060a:	e028      	b.n	800065e <HAL_ADC_ConvCpltCallback+0x6e>
		y = y + x[i] * cof[order-i-1];
 800060c:	89fb      	ldrh	r3, [r7, #14]
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000614:	ee07 3a90 	vmov	s15, r3
 8000618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	f1c3 0305 	rsb	r3, r3, #5
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <HAL_ADC_ConvCpltCallback+0x90>)
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	edd3 7a00 	vldr	s15, [r3]
 800062c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_ADC_ConvCpltCallback+0x88>)
 8000632:	edd3 7a00 	vldr	s15, [r3]
 8000636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_ADC_ConvCpltCallback+0x88>)
 800063c:	edc3 7a00 	vstr	s15, [r3]
		if(i != order-1) {
 8000640:	89fb      	ldrh	r3, [r7, #14]
 8000642:	2b05      	cmp	r3, #5
 8000644:	d008      	beq.n	8000658 <HAL_ADC_ConvCpltCallback+0x68>
			x[i] = x[i+1];
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	490b      	ldr	r1, [pc, #44]	; (800067c <HAL_ADC_ConvCpltCallback+0x8c>)
 800064e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000654:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < order; i++) {
 8000658:	89fb      	ldrh	r3, [r7, #14]
 800065a:	3301      	adds	r3, #1
 800065c:	81fb      	strh	r3, [r7, #14]
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	2b05      	cmp	r3, #5
 8000662:	d9d3      	bls.n	800060c <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
//	signal_in = (float32_t)adc_result_dma[0];
//	arm_fir_f32(&S, &signal_in, &signal_out, block_size);
//	dac_value[0] = (uint16_t)signal_out; //signal_out;
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000188 	.word	0x20000188
 8000678:	20000198 	.word	0x20000198
 800067c:	2000018c 	.word	0x2000018c
 8000680:	20000000 	.word	0x20000000

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_MspInit+0x44>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_MspInit+0x44>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x44>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_MspInit+0x44>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_MspInit+0x44>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006f8:	d14c      	bne.n	8000794 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <HAL_ADC_MspInit+0xc4>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a27      	ldr	r2, [pc, #156]	; (800079c <HAL_ADC_MspInit+0xc4>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <HAL_ADC_MspInit+0xc4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <HAL_ADC_MspInit+0xc4>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <HAL_ADC_MspInit+0xc4>)
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <HAL_ADC_MspInit+0xc4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800072a:	2301      	movs	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	2303      	movs	r3, #3
 8000730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f001 fda0 	bl	8002284 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <HAL_ADC_MspInit+0xcc>)
 8000748:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 800075e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000762:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 8000766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 800077a:	f001 fbcf 	bl	8001f1c <HAL_DMA_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000784:	f7ff ff7e 	bl	8000684 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 800078c:	639a      	str	r2, [r3, #56]	; 0x38
 800078e:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_ADC_MspInit+0xc8>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	20000090 	.word	0x20000090
 80007a4:	40020008 	.word	0x40020008

080007a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a15      	ldr	r2, [pc, #84]	; (800081c <HAL_DAC_MspInit+0x74>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d124      	bne.n	8000814 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_DAC_MspInit+0x78>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <HAL_DAC_MspInit+0x78>)
 80007d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_DAC_MspInit+0x78>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_DAC_MspInit+0x78>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_DAC_MspInit+0x78>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_DAC_MspInit+0x78>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007fa:	2310      	movs	r3, #16
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fe:	2303      	movs	r3, #3
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f001 fd38 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40007400 	.word	0x40007400
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000834:	d10b      	bne.n	800084e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_TIM_Base_MspInit+0x38>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_TIM_Base_MspInit+0x38>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_TIM_Base_MspInit+0x38>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <HAL_USART_MspInit+0xb4>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d144      	bne.n	800090c <HAL_USART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <HAL_USART_MspInit+0xb8>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a24      	ldr	r2, [pc, #144]	; (8000918 <HAL_USART_MspInit+0xb8>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <HAL_USART_MspInit+0xb8>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <HAL_USART_MspInit+0xb8>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <HAL_USART_MspInit+0xb8>)
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_USART_MspInit+0xb8>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <HAL_USART_MspInit+0xb8>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <HAL_USART_MspInit+0xb8>)
 80008b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_USART_MspInit+0xb8>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PB5     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ca:	230c      	movs	r3, #12
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008da:	2307      	movs	r3, #7
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e8:	f001 fccc 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008ec:	2320      	movs	r3, #32
 80008ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fc:	2307      	movs	r3, #7
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_USART_MspInit+0xbc>)
 8000908:	f001 fcbc 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40004400 	.word	0x40004400
 8000918:	40021000 	.word	0x40021000
 800091c:	48000400 	.word	0x48000400

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f88e 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <DMA1_Channel1_IRQHandler+0x10>)
 800097a:	f001 fb75 	bl	8002068 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000090 	.word	0x20000090

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490e      	ldr	r1, [pc, #56]	; (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0b      	ldr	r4, [pc, #44]	; (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d6:	f7ff ffd7 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f003 ffe1 	bl	80049a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009de:	f7ff fbf9 	bl	80001d4 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80009f0:	08004a50 	.word	0x08004a50
  ldr r2, =_sbss
 80009f4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80009f8:	200001a0 	.word	0x200001a0

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x28>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x28>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f001 f963 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 f808 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fe38 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x54>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x58>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 f97b 	bl	8001d46 <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00e      	b.n	8000a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f001 f943 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_InitTick+0x5c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000018 	.word	0x20000018
 8000a84:	20000020 	.word	0x20000020
 8000a88:	2000001c 	.word	0x2000001c

08000a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000020 	.word	0x20000020
 8000ab0:	2000019c 	.word	0x2000019c

08000ab4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	2000019c 	.word	0x2000019c

08000acc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b09a      	sub	sp, #104	; 0x68
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d101      	bne.n	8000b14 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e1e3      	b.n	8000edc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d176      	bne.n	8000c14 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d152      	bne.n	8000bd4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fdc5 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d13b      	bne.n	8000bd4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 ff87 	bl	8001a70 <ADC_Disable>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d12f      	bne.n	8000bd4 <HAL_ADC_Init+0xe0>
 8000b74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d12b      	bne.n	8000bd4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b84:	f023 0302 	bic.w	r3, r3, #2
 8000b88:	f043 0202 	orr.w	r2, r3, #2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b9e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bb0:	4b92      	ldr	r3, [pc, #584]	; (8000dfc <HAL_ADC_Init+0x308>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a92      	ldr	r2, [pc, #584]	; (8000e00 <HAL_ADC_Init+0x30c>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	0c9a      	lsrs	r2, r3, #18
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bc6:	e002      	b.n	8000bce <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f9      	bne.n	8000bc8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d007      	beq.n	8000bf2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bf0:	d110      	bne.n	8000c14 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f023 0312 	bic.w	r3, r3, #18
 8000bfa:	f043 0210 	orr.w	r2, r3, #16
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f043 0201 	orr.w	r2, r3, #1
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f040 8150 	bne.w	8000ec2 <HAL_ADC_Init+0x3ce>
 8000c22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 814b 	bne.w	8000ec2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8143 	bne.w	8000ec2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c44:	f043 0202 	orr.w	r2, r3, #2
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c54:	d004      	beq.n	8000c60 <HAL_ADC_Init+0x16c>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a6a      	ldr	r2, [pc, #424]	; (8000e04 <HAL_ADC_Init+0x310>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d101      	bne.n	8000c64 <HAL_ADC_Init+0x170>
 8000c60:	4b69      	ldr	r3, [pc, #420]	; (8000e08 <HAL_ADC_Init+0x314>)
 8000c62:	e000      	b.n	8000c66 <HAL_ADC_Init+0x172>
 8000c64:	4b69      	ldr	r3, [pc, #420]	; (8000e0c <HAL_ADC_Init+0x318>)
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c70:	d102      	bne.n	8000c78 <HAL_ADC_Init+0x184>
 8000c72:	4b64      	ldr	r3, [pc, #400]	; (8000e04 <HAL_ADC_Init+0x310>)
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e01a      	b.n	8000cae <HAL_ADC_Init+0x1ba>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a61      	ldr	r2, [pc, #388]	; (8000e04 <HAL_ADC_Init+0x310>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d103      	bne.n	8000c8a <HAL_ADC_Init+0x196>
 8000c82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e011      	b.n	8000cae <HAL_ADC_Init+0x1ba>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a60      	ldr	r2, [pc, #384]	; (8000e10 <HAL_ADC_Init+0x31c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d102      	bne.n	8000c9a <HAL_ADC_Init+0x1a6>
 8000c94:	4b5f      	ldr	r3, [pc, #380]	; (8000e14 <HAL_ADC_Init+0x320>)
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e009      	b.n	8000cae <HAL_ADC_Init+0x1ba>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a5d      	ldr	r2, [pc, #372]	; (8000e14 <HAL_ADC_Init+0x320>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d102      	bne.n	8000caa <HAL_ADC_Init+0x1b6>
 8000ca4:	4b5a      	ldr	r3, [pc, #360]	; (8000e10 <HAL_ADC_Init+0x31c>)
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	e001      	b.n	8000cae <HAL_ADC_Init+0x1ba>
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d108      	bne.n	8000cce <HAL_ADC_Init+0x1da>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d101      	bne.n	8000cce <HAL_ADC_Init+0x1da>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <HAL_ADC_Init+0x1dc>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d11c      	bne.n	8000d0e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d010      	beq.n	8000cfc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d107      	bne.n	8000cf6 <HAL_ADC_Init+0x202>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <HAL_ADC_Init+0x202>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_ADC_Init+0x204>
 8000cf6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d108      	bne.n	8000d0e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d0c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7e5b      	ldrb	r3, [r3, #25]
 8000d12:	035b      	lsls	r3, r3, #13
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d18:	2a01      	cmp	r2, #1
 8000d1a:	d002      	beq.n	8000d22 <HAL_ADC_Init+0x22e>
 8000d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d20:	e000      	b.n	8000d24 <HAL_ADC_Init+0x230>
 8000d22:	2200      	movs	r2, #0
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d34:	4313      	orrs	r3, r2
 8000d36:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d11b      	bne.n	8000d7a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7e5b      	ldrb	r3, [r3, #25]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d109      	bne.n	8000d5e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	045a      	lsls	r2, r3, #17
 8000d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d54:	4313      	orrs	r3, r2
 8000d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5a:	663b      	str	r3, [r7, #96]	; 0x60
 8000d5c:	e00d      	b.n	8000d7a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d66:	f043 0220 	orr.w	r2, r3, #32
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f043 0201 	orr.w	r2, r3, #1
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d054      	beq.n	8000e2c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <HAL_ADC_Init+0x31c>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d004      	beq.n	8000d96 <HAL_ADC_Init+0x2a2>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <HAL_ADC_Init+0x320>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d140      	bne.n	8000e18 <HAL_ADC_Init+0x324>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000d9e:	d02a      	beq.n	8000df6 <HAL_ADC_Init+0x302>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000da8:	d022      	beq.n	8000df0 <HAL_ADC_Init+0x2fc>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000db2:	d01a      	beq.n	8000dea <HAL_ADC_Init+0x2f6>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000dbc:	d012      	beq.n	8000de4 <HAL_ADC_Init+0x2f0>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000dc6:	d00a      	beq.n	8000dde <HAL_ADC_Init+0x2ea>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_ADC_Init+0x2e4>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd6:	e023      	b.n	8000e20 <HAL_ADC_Init+0x32c>
 8000dd8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ddc:	e020      	b.n	8000e20 <HAL_ADC_Init+0x32c>
 8000dde:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000de2:	e01d      	b.n	8000e20 <HAL_ADC_Init+0x32c>
 8000de4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000de8:	e01a      	b.n	8000e20 <HAL_ADC_Init+0x32c>
 8000dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dee:	e017      	b.n	8000e20 <HAL_ADC_Init+0x32c>
 8000df0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000df4:	e014      	b.n	8000e20 <HAL_ADC_Init+0x32c>
 8000df6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000dfa:	e011      	b.n	8000e20 <HAL_ADC_Init+0x32c>
 8000dfc:	20000018 	.word	0x20000018
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	50000100 	.word	0x50000100
 8000e08:	50000300 	.word	0x50000300
 8000e0c:	50000700 	.word	0x50000700
 8000e10:	50000400 	.word	0x50000400
 8000e14:	50000500 	.word	0x50000500
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e24:	4313      	orrs	r3, r2
 8000e26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d114      	bne.n	8000e64 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e48:	f023 0302 	bic.w	r3, r3, #2
 8000e4c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7e1b      	ldrb	r3, [r3, #24]
 8000e52:	039a      	lsls	r2, r3, #14
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e60:	4313      	orrs	r3, r2
 8000e62:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <HAL_ADC_Init+0x3f0>)
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e74:	430b      	orrs	r3, r1
 8000e76:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d10c      	bne.n	8000e9a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f023 010f 	bic.w	r1, r3, #15
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
 8000e98:	e007      	b.n	8000eaa <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 020f 	bic.w	r2, r2, #15
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f023 0303 	bic.w	r3, r3, #3
 8000eb8:	f043 0201 	orr.w	r2, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec0:	e00a      	b.n	8000ed8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f023 0312 	bic.w	r3, r3, #18
 8000eca:	f043 0210 	orr.w	r2, r3, #16
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ed8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3768      	adds	r7, #104	; 0x68
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	fff0c007 	.word	0xfff0c007

08000ee8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 80f7 	bne.w	80010f6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <HAL_ADC_Start_DMA+0x2e>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e0f2      	b.n	80010fc <HAL_ADC_Start_DMA+0x214>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f26:	d004      	beq.n	8000f32 <HAL_ADC_Start_DMA+0x4a>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a75      	ldr	r2, [pc, #468]	; (8001104 <HAL_ADC_Start_DMA+0x21c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d109      	bne.n	8000f46 <HAL_ADC_Start_DMA+0x5e>
 8000f32:	4b75      	ldr	r3, [pc, #468]	; (8001108 <HAL_ADC_Start_DMA+0x220>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2301      	moveq	r3, #1
 8000f40:	2300      	movne	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	e008      	b.n	8000f58 <HAL_ADC_Start_DMA+0x70>
 8000f46:	4b71      	ldr	r3, [pc, #452]	; (800110c <HAL_ADC_Start_DMA+0x224>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 031f 	and.w	r3, r3, #31
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf0c      	ite	eq
 8000f52:	2301      	moveq	r3, #1
 8000f54:	2300      	movne	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80c5 	beq.w	80010e8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f000 fd22 	bl	80019a8 <ADC_Enable>
 8000f64:	4603      	mov	r3, r0
 8000f66:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 80b7 	bne.w	80010de <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f8c:	d004      	beq.n	8000f98 <HAL_ADC_Start_DMA+0xb0>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a5c      	ldr	r2, [pc, #368]	; (8001104 <HAL_ADC_Start_DMA+0x21c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d106      	bne.n	8000fa6 <HAL_ADC_Start_DMA+0xbe>
 8000f98:	4b5b      	ldr	r3, [pc, #364]	; (8001108 <HAL_ADC_Start_DMA+0x220>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d010      	beq.n	8000fc6 <HAL_ADC_Start_DMA+0xde>
 8000fa4:	e005      	b.n	8000fb2 <HAL_ADC_Start_DMA+0xca>
 8000fa6:	4b59      	ldr	r3, [pc, #356]	; (800110c <HAL_ADC_Start_DMA+0x224>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d009      	beq.n	8000fc6 <HAL_ADC_Start_DMA+0xde>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fba:	d004      	beq.n	8000fc6 <HAL_ADC_Start_DMA+0xde>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a53      	ldr	r2, [pc, #332]	; (8001110 <HAL_ADC_Start_DMA+0x228>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d115      	bne.n	8000ff2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d036      	beq.n	800104e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ff0:	e02d      	b.n	800104e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001006:	d004      	beq.n	8001012 <HAL_ADC_Start_DMA+0x12a>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a3d      	ldr	r2, [pc, #244]	; (8001104 <HAL_ADC_Start_DMA+0x21c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10a      	bne.n	8001028 <HAL_ADC_Start_DMA+0x140>
 8001012:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	e008      	b.n	800103a <HAL_ADC_Start_DMA+0x152>
 8001028:	4b39      	ldr	r3, [pc, #228]	; (8001110 <HAL_ADC_Start_DMA+0x228>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001046:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800105a:	d106      	bne.n	800106a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f023 0206 	bic.w	r2, r3, #6
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	645a      	str	r2, [r3, #68]	; 0x44
 8001068:	e002      	b.n	8001070 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <HAL_ADC_Start_DMA+0x22c>)
 800107e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001084:	4a24      	ldr	r2, [pc, #144]	; (8001118 <HAL_ADC_Start_DMA+0x230>)
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108c:	4a23      	ldr	r2, [pc, #140]	; (800111c <HAL_ADC_Start_DMA+0x234>)
 800108e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	221c      	movs	r2, #28
 8001096:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0210 	orr.w	r2, r2, #16
 80010a6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3340      	adds	r3, #64	; 0x40
 80010c2:	4619      	mov	r1, r3
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f000 ff6f 	bl	8001faa <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0204 	orr.w	r2, r2, #4
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	e00d      	b.n	80010fa <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80010e6:	e008      	b.n	80010fa <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80010f4:	e001      	b.n	80010fa <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010f6:	2302      	movs	r3, #2
 80010f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	50000100 	.word	0x50000100
 8001108:	50000300 	.word	0x50000300
 800110c:	50000700 	.word	0x50000700
 8001110:	50000400 	.word	0x50000400
 8001114:	080018dd 	.word	0x080018dd
 8001118:	08001957 	.word	0x08001957
 800111c:	08001973 	.word	0x08001973

08001120 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001120:	b480      	push	{r7}
 8001122:	b09b      	sub	sp, #108	; 0x6c
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x22>
 800113e:	2302      	movs	r3, #2
 8001140:	e2ca      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x5b8>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f040 82ae 	bne.w	80016b6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d81c      	bhi.n	800119c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	461a      	mov	r2, r3
 8001176:	231f      	movs	r3, #31
 8001178:	4093      	lsls	r3, r2
 800117a:	43db      	mvns	r3, r3
 800117c:	4019      	ands	r1, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa00 f203 	lsl.w	r2, r0, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
 800119a:	e063      	b.n	8001264 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b09      	cmp	r3, #9
 80011a2:	d81e      	bhi.n	80011e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	3b1e      	subs	r3, #30
 80011b8:	221f      	movs	r2, #31
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	4019      	ands	r1, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	3b1e      	subs	r3, #30
 80011d4:	fa00 f203 	lsl.w	r2, r0, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	635a      	str	r2, [r3, #52]	; 0x34
 80011e0:	e040      	b.n	8001264 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b0e      	cmp	r3, #14
 80011e8:	d81e      	bhi.n	8001228 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	3b3c      	subs	r3, #60	; 0x3c
 80011fe:	221f      	movs	r2, #31
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	4019      	ands	r1, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	3b3c      	subs	r3, #60	; 0x3c
 800121a:	fa00 f203 	lsl.w	r2, r0, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
 8001226:	e01d      	b.n	8001264 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	3b5a      	subs	r3, #90	; 0x5a
 800123c:	221f      	movs	r2, #31
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	4019      	ands	r1, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	3b5a      	subs	r3, #90	; 0x5a
 8001258:	fa00 f203 	lsl.w	r2, r0, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 80e5 	bne.w	800143e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b09      	cmp	r3, #9
 800127a:	d91c      	bls.n	80012b6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6999      	ldr	r1, [r3, #24]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	3b1e      	subs	r3, #30
 800128e:	2207      	movs	r2, #7
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	4019      	ands	r1, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6898      	ldr	r0, [r3, #8]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	3b1e      	subs	r3, #30
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	619a      	str	r2, [r3, #24]
 80012b4:	e019      	b.n	80012ea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6959      	ldr	r1, [r3, #20]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	2207      	movs	r2, #7
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4019      	ands	r1, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6898      	ldr	r0, [r3, #8]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	08db      	lsrs	r3, r3, #3
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	3b01      	subs	r3, #1
 8001308:	2b03      	cmp	r3, #3
 800130a:	d84f      	bhi.n	80013ac <HAL_ADC_ConfigChannel+0x28c>
 800130c:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <HAL_ADC_ConfigChannel+0x1f4>)
 800130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001312:	bf00      	nop
 8001314:	08001325 	.word	0x08001325
 8001318:	08001347 	.word	0x08001347
 800131c:	08001369 	.word	0x08001369
 8001320:	0800138b 	.word	0x0800138b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800132a:	4b9a      	ldr	r3, [pc, #616]	; (8001594 <HAL_ADC_ConfigChannel+0x474>)
 800132c:	4013      	ands	r3, r2
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	0691      	lsls	r1, r2, #26
 8001334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001336:	430a      	orrs	r2, r1
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001342:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001344:	e07e      	b.n	8001444 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800134c:	4b91      	ldr	r3, [pc, #580]	; (8001594 <HAL_ADC_ConfigChannel+0x474>)
 800134e:	4013      	ands	r3, r2
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	0691      	lsls	r1, r2, #26
 8001356:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001358:	430a      	orrs	r2, r1
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001364:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001366:	e06d      	b.n	8001444 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800136e:	4b89      	ldr	r3, [pc, #548]	; (8001594 <HAL_ADC_ConfigChannel+0x474>)
 8001370:	4013      	ands	r3, r2
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	0691      	lsls	r1, r2, #26
 8001378:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800137a:	430a      	orrs	r2, r1
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001386:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001388:	e05c      	b.n	8001444 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001390:	4b80      	ldr	r3, [pc, #512]	; (8001594 <HAL_ADC_ConfigChannel+0x474>)
 8001392:	4013      	ands	r3, r2
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	0691      	lsls	r1, r2, #26
 800139a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800139c:	430a      	orrs	r2, r1
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013a8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80013aa:	e04b      	b.n	8001444 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	069b      	lsls	r3, r3, #26
 80013bc:	429a      	cmp	r2, r3
 80013be:	d107      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013ce:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	069b      	lsls	r3, r3, #26
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d107      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013f2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	069b      	lsls	r3, r3, #26
 8001404:	429a      	cmp	r2, r3
 8001406:	d107      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001416:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800141e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	069b      	lsls	r3, r3, #26
 8001428:	429a      	cmp	r2, r3
 800142a:	d10a      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800143a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800143c:	e001      	b.n	8001442 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800143e:	bf00      	nop
 8001440:	e000      	b.n	8001444 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001442:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d108      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x344>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x344>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_ADC_ConfigChannel+0x346>
 8001464:	2300      	movs	r3, #0
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 8130 	bne.w	80016cc <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d00f      	beq.n	8001494 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2201      	movs	r2, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	400a      	ands	r2, r1
 800148e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001492:	e049      	b.n	8001528 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	409a      	lsls	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b09      	cmp	r3, #9
 80014b4:	d91c      	bls.n	80014f0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6999      	ldr	r1, [r3, #24]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	3b1b      	subs	r3, #27
 80014c8:	2207      	movs	r2, #7
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4019      	ands	r1, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	6898      	ldr	r0, [r3, #8]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	3b1b      	subs	r3, #27
 80014e2:	fa00 f203 	lsl.w	r2, r0, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	619a      	str	r2, [r3, #24]
 80014ee:	e01b      	b.n	8001528 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6959      	ldr	r1, [r3, #20]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	2207      	movs	r2, #7
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4019      	ands	r1, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6898      	ldr	r0, [r3, #8]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001530:	d004      	beq.n	800153c <HAL_ADC_ConfigChannel+0x41c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_ADC_ConfigChannel+0x478>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d101      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x420>
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_ADC_ConfigChannel+0x47c>)
 800153e:	e000      	b.n	8001542 <HAL_ADC_ConfigChannel+0x422>
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_ADC_ConfigChannel+0x480>)
 8001542:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b10      	cmp	r3, #16
 800154a:	d105      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800154c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001554:	2b00      	cmp	r3, #0
 8001556:	d015      	beq.n	8001584 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800155c:	2b11      	cmp	r3, #17
 800155e:	d105      	bne.n	800156c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00b      	beq.n	8001584 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001570:	2b12      	cmp	r3, #18
 8001572:	f040 80ab 	bne.w	80016cc <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 80a4 	bne.w	80016cc <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800158c:	d10a      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x484>
 800158e:	4b02      	ldr	r3, [pc, #8]	; (8001598 <HAL_ADC_ConfigChannel+0x478>)
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e022      	b.n	80015da <HAL_ADC_ConfigChannel+0x4ba>
 8001594:	83fff000 	.word	0x83fff000
 8001598:	50000100 	.word	0x50000100
 800159c:	50000300 	.word	0x50000300
 80015a0:	50000700 	.word	0x50000700
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a4e      	ldr	r2, [pc, #312]	; (80016e4 <HAL_ADC_ConfigChannel+0x5c4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d103      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x496>
 80015ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	e011      	b.n	80015da <HAL_ADC_ConfigChannel+0x4ba>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a4b      	ldr	r2, [pc, #300]	; (80016e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d102      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x4a6>
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_ADC_ConfigChannel+0x5cc>)
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e009      	b.n	80015da <HAL_ADC_ConfigChannel+0x4ba>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a48      	ldr	r2, [pc, #288]	; (80016ec <HAL_ADC_ConfigChannel+0x5cc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d102      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x4b6>
 80015d0:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e001      	b.n	80015da <HAL_ADC_ConfigChannel+0x4ba>
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d108      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x4da>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x4da>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_ADC_ConfigChannel+0x4dc>
 80015fa:	2300      	movs	r3, #0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d150      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001600:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	d010      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x502>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x502>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_ADC_ConfigChannel+0x504>
 8001622:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001624:	2b00      	cmp	r3, #0
 8001626:	d13c      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b10      	cmp	r3, #16
 800162e:	d11d      	bne.n	800166c <HAL_ADC_ConfigChannel+0x54c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001638:	d118      	bne.n	800166c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800163a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001644:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2a      	ldr	r2, [pc, #168]	; (80016f4 <HAL_ADC_ConfigChannel+0x5d4>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	0c9a      	lsrs	r2, r3, #18
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800165c:	e002      	b.n	8001664 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3b01      	subs	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800166a:	e02e      	b.n	80016ca <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b11      	cmp	r3, #17
 8001672:	d10b      	bne.n	800168c <HAL_ADC_ConfigChannel+0x56c>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167c:	d106      	bne.n	800168c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800167e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001688:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800168a:	e01e      	b.n	80016ca <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b12      	cmp	r3, #18
 8001692:	d11a      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800169c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800169e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016a0:	e013      	b.n	80016ca <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f043 0220 	orr.w	r2, r3, #32
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016b4:	e00a      	b.n	80016cc <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f043 0220 	orr.w	r2, r3, #32
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016c8:	e000      	b.n	80016cc <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016ca:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016d8:	4618      	mov	r0, r3
 80016da:	376c      	adds	r7, #108	; 0x6c
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	50000100 	.word	0x50000100
 80016e8:	50000400 	.word	0x50000400
 80016ec:	50000500 	.word	0x50000500
 80016f0:	20000018 	.word	0x20000018
 80016f4:	431bde83 	.word	0x431bde83

080016f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b099      	sub	sp, #100	; 0x64
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001710:	d102      	bne.n	8001718 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	e01a      	b.n	800174e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d103      	bne.n	800172a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001722:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	e011      	b.n	800174e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a67      	ldr	r2, [pc, #412]	; (80018cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d102      	bne.n	800173a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	e009      	b.n	800174e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a64      	ldr	r2, [pc, #400]	; (80018d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001744:	4b61      	ldr	r3, [pc, #388]	; (80018cc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	e001      	b.n	800174e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b0      	b.n	80018ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001762:	2302      	movs	r3, #2
 8001764:	e0a9      	b.n	80018ba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	f040 808d 	bne.w	8001898 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 8086 	bne.w	8001898 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001794:	d004      	beq.n	80017a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80017a0:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80017a2:	e000      	b.n	80017a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80017a4:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80017a6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d040      	beq.n	8001832 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80017b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017c2:	035b      	lsls	r3, r3, #13
 80017c4:	430b      	orrs	r3, r1
 80017c6:	431a      	orrs	r2, r3
 80017c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ca:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80017ec:	2300      	movs	r3, #0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d15c      	bne.n	80018ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800180e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001810:	2b00      	cmp	r3, #0
 8001812:	d14b      	bne.n	80018ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800181c:	f023 030f 	bic.w	r3, r3, #15
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	6811      	ldr	r1, [r2, #0]
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	6892      	ldr	r2, [r2, #8]
 8001828:	430a      	orrs	r2, r1
 800182a:	431a      	orrs	r2, r3
 800182c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800182e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001830:	e03c      	b.n	80018ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800183c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d108      	bne.n	800185e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800185e:	2300      	movs	r3, #0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d123      	bne.n	80018ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001880:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001882:	2b00      	cmp	r3, #0
 8001884:	d112      	bne.n	80018ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800188e:	f023 030f 	bic.w	r3, r3, #15
 8001892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001894:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001896:	e009      	b.n	80018ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80018aa:	e000      	b.n	80018ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018ac:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80018b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80018ba:	4618      	mov	r0, r3
 80018bc:	3764      	adds	r7, #100	; 0x64
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	50000100 	.word	0x50000100
 80018cc:	50000400 	.word	0x50000400
 80018d0:	50000500 	.word	0x50000500
 80018d4:	50000300 	.word	0x50000300
 80018d8:	50000700 	.word	0x50000700

080018dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d126      	bne.n	8001944 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800190c:	2b00      	cmp	r3, #0
 800190e:	d115      	bne.n	800193c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001914:	2b00      	cmp	r3, #0
 8001916:	d111      	bne.n	800193c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7fe fe57 	bl	80005f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001942:	e004      	b.n	800194e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	4798      	blx	r3
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff f8b1 	bl	8000acc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f043 0204 	orr.w	r2, r3, #4
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff f8a1 	bl	8000ae0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <ADC_Enable+0x2c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <ADC_Enable+0x2c>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <ADC_Enable+0x2e>
 80019d4:	2300      	movs	r3, #0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d143      	bne.n	8001a62 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <ADC_Enable+0xc4>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00d      	beq.n	8001a04 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f043 0210 	orr.w	r2, r3, #16
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e02f      	b.n	8001a64 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a14:	f7ff f84e 	bl	8000ab4 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a1a:	e01b      	b.n	8001a54 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a1c:	f7ff f84a 	bl	8000ab4 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d914      	bls.n	8001a54 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d00d      	beq.n	8001a54 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f043 0210 	orr.w	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e007      	b.n	8001a64 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d1dc      	bne.n	8001a1c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	8000003f 	.word	0x8000003f

08001a70 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <ADC_Disable+0x2c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <ADC_Disable+0x2c>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <ADC_Disable+0x2e>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d047      	beq.n	8001b32 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030d 	and.w	r3, r3, #13
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d10f      	bne.n	8001ad0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0202 	orr.w	r2, r2, #2
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ac8:	f7fe fff4 	bl	8000ab4 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ace:	e029      	b.n	8001b24 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f043 0210 	orr.w	r2, r3, #16
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f043 0201 	orr.w	r2, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e023      	b.n	8001b34 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aec:	f7fe ffe2 	bl	8000ab4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d914      	bls.n	8001b24 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10d      	bne.n	8001b24 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f043 0210 	orr.w	r2, r3, #16
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e007      	b.n	8001b34 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d0dc      	beq.n	8001aec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	; (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff8e 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff29 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff3e 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff8e 	bl	8001c30 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5d 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff31 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e014      	b.n	8001d9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	791b      	ldrb	r3, [r3, #4]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d105      	bne.n	8001d86 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7fe fd11 	bl	80007a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8001da2:	b480      	push	{r7}
 8001da4:	b087      	sub	sp, #28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e004      	b.n	8001dd6 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3314      	adds	r3, #20
 8001dd4:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	795b      	ldrb	r3, [r3, #5]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_DAC_Start+0x16>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e039      	b.n	8001e76 <HAL_DAC_Start+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	2201      	movs	r2, #1
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10f      	bne.n	8001e48 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001e32:	2b3c      	cmp	r3, #60	; 0x3c
 8001e34:	d118      	bne.n	8001e68 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	e00f      	b.n	8001e68 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e52:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8001e56:	d107      	bne.n	8001e68 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0202 	orr.w	r2, r2, #2
 8001e66:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b087      	sub	sp, #28
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	795b      	ldrb	r3, [r3, #5]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_DAC_ConfigChannel+0x20>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e036      	b.n	8001f10 <HAL_DAC_ConfigChannel+0x8e>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001eb6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	22c0      	movs	r2, #192	; 0xc0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	400a      	ands	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e037      	b.n	8001fa2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f48:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f4c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f941 	bl	800220c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}  
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_DMA_Start_IT+0x20>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e04a      	b.n	8002060 <HAL_DMA_Start_IT+0xb6>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d13a      	bne.n	8002052 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f8d4 	bl	80021ae <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d008      	beq.n	8002020 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 020e 	orr.w	r2, r2, #14
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e00f      	b.n	8002040 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 020a 	orr.w	r2, r2, #10
 800202e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e005      	b.n	800205e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800205e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	2204      	movs	r2, #4
 8002086:	409a      	lsls	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d024      	beq.n	80020da <HAL_DMA_IRQHandler+0x72>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01f      	beq.n	80020da <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0204 	bic.w	r2, r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	2104      	movs	r1, #4
 80020c2:	fa01 f202 	lsl.w	r2, r1, r2
 80020c6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d06a      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80020d8:	e065      	b.n	80021a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2202      	movs	r2, #2
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d02c      	beq.n	8002144 <HAL_DMA_IRQHandler+0xdc>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d027      	beq.n	8002144 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10b      	bne.n	800211a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 020a 	bic.w	r2, r2, #10
 8002110:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2102      	movs	r1, #2
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	d035      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002142:	e030      	b.n	80021a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2208      	movs	r2, #8
 800214a:	409a      	lsls	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d028      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x13e>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d023      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 020e 	bic.w	r2, r2, #14
 800216c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f202 	lsl.w	r2, r1, r2
 800217c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
    }
  }
}  
 80021a4:	e7ff      	b.n	80021a6 <HAL_DMA_IRQHandler+0x13e>
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d108      	bne.n	80021ee <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021ec:	e007      	b.n	80021fe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	60da      	str	r2, [r3, #12]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <DMA_CalcBaseAndBitshift+0x60>)
 800221c:	429a      	cmp	r2, r3
 800221e:	d80f      	bhi.n	8002240 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <DMA_CalcBaseAndBitshift+0x64>)
 8002228:	4413      	add	r3, r2
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <DMA_CalcBaseAndBitshift+0x68>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	009a      	lsls	r2, r3, #2
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <DMA_CalcBaseAndBitshift+0x6c>)
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800223e:	e00e      	b.n	800225e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <DMA_CalcBaseAndBitshift+0x70>)
 8002248:	4413      	add	r3, r2
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <DMA_CalcBaseAndBitshift+0x68>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	009a      	lsls	r2, r3, #2
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <DMA_CalcBaseAndBitshift+0x74>)
 800225c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40020407 	.word	0x40020407
 8002270:	bffdfff8 	.word	0xbffdfff8
 8002274:	cccccccd 	.word	0xcccccccd
 8002278:	40020000 	.word	0x40020000
 800227c:	bffdfbf8 	.word	0xbffdfbf8
 8002280:	40020400 	.word	0x40020400

08002284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	e160      	b.n	8002556 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8152 	beq.w	8002550 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d005      	beq.n	80022c4 <HAL_GPIO_Init+0x40>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d130      	bne.n	8002326 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fa:	2201      	movs	r2, #1
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f003 0201 	and.w	r2, r3, #1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b03      	cmp	r3, #3
 8002330:	d017      	beq.n	8002362 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d123      	bne.n	80023b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3208      	adds	r2, #8
 80023b0:	6939      	ldr	r1, [r7, #16]
 80023b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0203 	and.w	r2, r3, #3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80ac 	beq.w	8002550 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f8:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <HAL_GPIO_Init+0x2f0>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a5d      	ldr	r2, [pc, #372]	; (8002574 <HAL_GPIO_Init+0x2f0>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <HAL_GPIO_Init+0x2f0>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002410:	4a59      	ldr	r2, [pc, #356]	; (8002578 <HAL_GPIO_Init+0x2f4>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800243a:	d025      	beq.n	8002488 <HAL_GPIO_Init+0x204>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_GPIO_Init+0x2f8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d01f      	beq.n	8002484 <HAL_GPIO_Init+0x200>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a4e      	ldr	r2, [pc, #312]	; (8002580 <HAL_GPIO_Init+0x2fc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d019      	beq.n	8002480 <HAL_GPIO_Init+0x1fc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a4d      	ldr	r2, [pc, #308]	; (8002584 <HAL_GPIO_Init+0x300>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_GPIO_Init+0x1f8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a4c      	ldr	r2, [pc, #304]	; (8002588 <HAL_GPIO_Init+0x304>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00d      	beq.n	8002478 <HAL_GPIO_Init+0x1f4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a4b      	ldr	r2, [pc, #300]	; (800258c <HAL_GPIO_Init+0x308>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d007      	beq.n	8002474 <HAL_GPIO_Init+0x1f0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a4a      	ldr	r2, [pc, #296]	; (8002590 <HAL_GPIO_Init+0x30c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_GPIO_Init+0x1ec>
 800246c:	2306      	movs	r3, #6
 800246e:	e00c      	b.n	800248a <HAL_GPIO_Init+0x206>
 8002470:	2307      	movs	r3, #7
 8002472:	e00a      	b.n	800248a <HAL_GPIO_Init+0x206>
 8002474:	2305      	movs	r3, #5
 8002476:	e008      	b.n	800248a <HAL_GPIO_Init+0x206>
 8002478:	2304      	movs	r3, #4
 800247a:	e006      	b.n	800248a <HAL_GPIO_Init+0x206>
 800247c:	2303      	movs	r3, #3
 800247e:	e004      	b.n	800248a <HAL_GPIO_Init+0x206>
 8002480:	2302      	movs	r3, #2
 8002482:	e002      	b.n	800248a <HAL_GPIO_Init+0x206>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_GPIO_Init+0x206>
 8002488:	2300      	movs	r3, #0
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	f002 0203 	and.w	r2, r2, #3
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	4093      	lsls	r3, r2
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800249a:	4937      	ldr	r1, [pc, #220]	; (8002578 <HAL_GPIO_Init+0x2f4>)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a8:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <HAL_GPIO_Init+0x310>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024cc:	4a31      	ldr	r2, [pc, #196]	; (8002594 <HAL_GPIO_Init+0x310>)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_GPIO_Init+0x310>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024f6:	4a27      	ldr	r2, [pc, #156]	; (8002594 <HAL_GPIO_Init+0x310>)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_GPIO_Init+0x310>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_GPIO_Init+0x310>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_GPIO_Init+0x310>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <HAL_GPIO_Init+0x310>)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3301      	adds	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	f47f ae97 	bne.w	8002294 <HAL_GPIO_Init+0x10>
  }
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40021000 	.word	0x40021000
 8002578:	40010000 	.word	0x40010000
 800257c:	48000400 	.word	0x48000400
 8002580:	48000800 	.word	0x48000800
 8002584:	48000c00 	.word	0x48000c00
 8002588:	48001000 	.word	0x48001000
 800258c:	48001400 	.word	0x48001400
 8002590:	48001800 	.word	0x48001800
 8002594:	40010400 	.word	0x40010400

08002598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800259e:	af00      	add	r7, sp, #0
 80025a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f001 b83a 	b.w	8003632 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 816f 	beq.w	80028b2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025d4:	4bb5      	ldr	r3, [pc, #724]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d00c      	beq.n	80025fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025e0:	4bb2      	ldr	r3, [pc, #712]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d15c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x10e>
 80025ec:	4baf      	ldr	r3, [pc, #700]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d155      	bne.n	80026a6 <HAL_RCC_OscConfig+0x10e>
 80025fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800260e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_RCC_OscConfig+0x94>
 8002626:	4ba1      	ldr	r3, [pc, #644]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	e015      	b.n	8002658 <HAL_RCC_OscConfig+0xc0>
 800262c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002630:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002644:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002648:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800264c:	fa93 f3a3 	rbit	r3, r3
 8002650:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002654:	4b95      	ldr	r3, [pc, #596]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002660:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002664:	fa92 f2a2 	rbit	r2, r2
 8002668:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800266c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002670:	fab2 f282 	clz	r2, r2
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f042 0220 	orr.w	r2, r2, #32
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f002 021f 	and.w	r2, r2, #31
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f202 	lsl.w	r2, r1, r2
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8111 	beq.w	80028b0 <HAL_RCC_OscConfig+0x318>
 800268e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002692:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 8108 	bne.w	80028b0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f000 bfc6 	b.w	8003632 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12e>
 80026b8:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a7b      	ldr	r2, [pc, #492]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e036      	b.n	8002734 <HAL_RCC_OscConfig+0x19c>
 80026c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x158>
 80026d6:	4b75      	ldr	r3, [pc, #468]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a74      	ldr	r2, [pc, #464]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b72      	ldr	r3, [pc, #456]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a71      	ldr	r2, [pc, #452]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80026e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e021      	b.n	8002734 <HAL_RCC_OscConfig+0x19c>
 80026f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x184>
 8002702:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a69      	ldr	r2, [pc, #420]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b67      	ldr	r3, [pc, #412]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a66      	ldr	r2, [pc, #408]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0x19c>
 800271c:	4b63      	ldr	r3, [pc, #396]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a62      	ldr	r2, [pc, #392]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b60      	ldr	r3, [pc, #384]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a5f      	ldr	r2, [pc, #380]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002738:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d059      	beq.n	80027f8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe f9b6 	bl	8000ab4 <HAL_GetTick>
 8002748:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800274e:	f7fe f9b1 	bl	8000ab4 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d902      	bls.n	8002764 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	f000 bf67 	b.w	8003632 <HAL_RCC_OscConfig+0x109a>
 8002764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002768:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002778:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d102      	bne.n	8002796 <HAL_RCC_OscConfig+0x1fe>
 8002790:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x22a>
 8002796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80027aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80027ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80027ce:	fa92 f2a2 	rbit	r2, r2
 80027d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80027d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027da:	fab2 f282 	clz	r2, r2
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f042 0220 	orr.w	r2, r2, #32
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f002 021f 	and.w	r2, r2, #31
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ab      	beq.n	800274e <HAL_RCC_OscConfig+0x1b6>
 80027f6:	e05c      	b.n	80028b2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe f95c 	bl	8000ab4 <HAL_GetTick>
 80027fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002802:	f7fe f957 	bl	8000ab4 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d902      	bls.n	8002818 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	f000 bf0d 	b.w	8003632 <HAL_RCC_OscConfig+0x109a>
 8002818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800281c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800282c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d102      	bne.n	800284a <HAL_RCC_OscConfig+0x2b2>
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e015      	b.n	8002876 <HAL_RCC_OscConfig+0x2de>
 800284a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800285e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002862:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002866:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <HAL_RCC_OscConfig+0x314>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800287a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800287e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002882:	fa92 f2a2 	rbit	r2, r2
 8002886:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800288a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800288e:	fab2 f282 	clz	r2, r2
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f042 0220 	orr.w	r2, r2, #32
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f002 021f 	and.w	r2, r2, #31
 800289e:	2101      	movs	r1, #1
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ab      	bne.n	8002802 <HAL_RCC_OscConfig+0x26a>
 80028aa:	e002      	b.n	80028b2 <HAL_RCC_OscConfig+0x31a>
 80028ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 817f 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028c8:	4ba7      	ldr	r3, [pc, #668]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00c      	beq.n	80028ee <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028d4:	4ba4      	ldr	r3, [pc, #656]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d173      	bne.n	80029c8 <HAL_RCC_OscConfig+0x430>
 80028e0:	4ba1      	ldr	r3, [pc, #644]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80028e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ec:	d16c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x430>
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002900:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_RCC_OscConfig+0x386>
 8002918:	4b93      	ldr	r3, [pc, #588]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e013      	b.n	8002946 <HAL_RCC_OscConfig+0x3ae>
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002930:	2302      	movs	r3, #2
 8002932:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002936:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002942:	4b89      	ldr	r3, [pc, #548]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2202      	movs	r2, #2
 8002948:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800294c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002958:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800295c:	fab2 f282 	clz	r2, r2
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f042 0220 	orr.w	r2, r2, #32
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f002 021f 	and.w	r2, r2, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCC_OscConfig+0x3f6>
 8002978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d002      	beq.n	800298e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	f000 be52 	b.w	8003632 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800299a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	21f8      	movs	r1, #248	; 0xf8
 80029a4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80029ac:	fa91 f1a1 	rbit	r1, r1
 80029b0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80029b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029b8:	fab1 f181 	clz	r1, r1
 80029bc:	b2c9      	uxtb	r1, r1
 80029be:	408b      	lsls	r3, r1
 80029c0:	4969      	ldr	r1, [pc, #420]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	e0fe      	b.n	8002bc6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8088 	beq.w	8002aea <HAL_RCC_OscConfig+0x552>
 80029da:	2301      	movs	r3, #1
 80029dc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80029ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	461a      	mov	r2, r3
 8002a02:	2301      	movs	r3, #1
 8002a04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe f855 	bl	8000ab4 <HAL_GetTick>
 8002a0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a10:	f7fe f850 	bl	8000ab4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d902      	bls.n	8002a26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f000 be06 	b.w	8003632 <HAL_RCC_OscConfig+0x109a>
 8002a26:	2302      	movs	r3, #2
 8002a28:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002a38:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d102      	bne.n	8002a56 <HAL_RCC_OscConfig+0x4be>
 8002a50:	4b45      	ldr	r3, [pc, #276]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	e013      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e6>
 8002a56:	2302      	movs	r3, #2
 8002a58:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a68:	2302      	movs	r3, #2
 8002a6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a6e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002a84:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002a88:	fa92 f2a2 	rbit	r2, r2
 8002a8c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002a90:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f042 0220 	orr.w	r2, r2, #32
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	f002 021f 	and.w	r2, r2, #31
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0af      	beq.n	8002a10 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002abc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	21f8      	movs	r1, #248	; 0xf8
 8002ac6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002ace:	fa91 f1a1 	rbit	r1, r1
 8002ad2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002ad6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ada:	fab1 f181 	clz	r1, r1
 8002ade:	b2c9      	uxtb	r1, r1
 8002ae0:	408b      	lsls	r3, r1
 8002ae2:	4921      	ldr	r1, [pc, #132]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
 8002ae8:	e06d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x62e>
 8002aea:	2301      	movs	r3, #1
 8002aec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002afc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	461a      	mov	r2, r3
 8002b12:	2300      	movs	r3, #0
 8002b14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fd ffcd 	bl	8000ab4 <HAL_GetTick>
 8002b1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b20:	f7fd ffc8 	bl	8000ab4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d902      	bls.n	8002b36 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	f000 bd7e 	b.w	8003632 <HAL_RCC_OscConfig+0x109a>
 8002b36:	2302      	movs	r3, #2
 8002b38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5d4>
 8002b60:	4b01      	ldr	r3, [pc, #4]	; (8002b68 <HAL_RCC_OscConfig+0x5d0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e016      	b.n	8002b94 <HAL_RCC_OscConfig+0x5fc>
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002b7e:	2302      	movs	r3, #2
 8002b80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b90:	4bbf      	ldr	r3, [pc, #764]	; (8002e90 <HAL_RCC_OscConfig+0x8f8>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2202      	movs	r2, #2
 8002b96:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002b9a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002b9e:	fa92 f2a2 	rbit	r2, r2
 8002ba2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002ba6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ac      	bne.n	8002b20 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8113 	beq.w	8002e02 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d07c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x74e>
 8002bec:	2301      	movs	r3, #1
 8002bee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002bfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4ba2      	ldr	r3, [pc, #648]	; (8002e94 <HAL_RCC_OscConfig+0x8fc>)
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	2301      	movs	r3, #1
 8002c14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fd ff4d 	bl	8000ab4 <HAL_GetTick>
 8002c1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c20:	f7fd ff48 	bl	8000ab4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d902      	bls.n	8002c36 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	f000 bcfe 	b.w	8003632 <HAL_RCC_OscConfig+0x109a>
 8002c36:	2302      	movs	r3, #2
 8002c38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c40:	fa93 f2a3 	rbit	r2, r3
 8002c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c56:	2202      	movs	r2, #2
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	fa93 f2a3 	rbit	r2, r3
 8002c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	4b7e      	ldr	r3, [pc, #504]	; (8002e90 <HAL_RCC_OscConfig+0x8f8>)
 8002c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	6019      	str	r1, [r3, #0]
 8002ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002caa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fa93 f1a3 	rbit	r1, r3
 8002cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cbc:	6019      	str	r1, [r3, #0]
  return result;
 8002cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d09d      	beq.n	8002c20 <HAL_RCC_OscConfig+0x688>
 8002ce4:	e08d      	b.n	8002e02 <HAL_RCC_OscConfig+0x86a>
 8002ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d08:	601a      	str	r2, [r3, #0]
  return result;
 8002d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d12:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b5d      	ldr	r3, [pc, #372]	; (8002e94 <HAL_RCC_OscConfig+0x8fc>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	461a      	mov	r2, r3
 8002d24:	2300      	movs	r3, #0
 8002d26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d28:	f7fd fec4 	bl	8000ab4 <HAL_GetTick>
 8002d2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d32:	f7fd febf 	bl	8000ab4 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d902      	bls.n	8002d48 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	f000 bc75 	b.w	8003632 <HAL_RCC_OscConfig+0x109a>
 8002d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d50:	2202      	movs	r2, #2
 8002d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	fa93 f2a3 	rbit	r2, r3
 8002d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d74:	2202      	movs	r2, #2
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d98:	2202      	movs	r2, #2
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002db2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_RCC_OscConfig+0x8f8>)
 8002db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dbc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	6019      	str	r1, [r3, #0]
 8002dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	fa93 f1a3 	rbit	r1, r3
 8002dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002dda:	6019      	str	r1, [r3, #0]
  return result;
 8002ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	2101      	movs	r1, #1
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d197      	bne.n	8002d32 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 81a5 	beq.w	8003162 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_RCC_OscConfig+0x8f8>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_OscConfig+0x8f8>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <HAL_RCC_OscConfig+0x8f8>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	61d3      	str	r3, [r2, #28]
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_RCC_OscConfig+0x8f8>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e50:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <HAL_RCC_OscConfig+0x900>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d121      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_RCC_OscConfig+0x900>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <HAL_RCC_OscConfig+0x900>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e70:	f7fd fe20 	bl	8000ab4 <HAL_GetTick>
 8002e74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e010      	b.n	8002e9c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fd fe1b 	bl	8000ab4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d908      	bls.n	8002e9c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e3d1      	b.n	8003632 <HAL_RCC_OscConfig+0x109a>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	10908120 	.word	0x10908120
 8002e98:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b8d      	ldr	r3, [pc, #564]	; (80030d4 <HAL_RCC_OscConfig+0xb3c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0e8      	beq.n	8002e7a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x92e>
 8002eb8:	4b87      	ldr	r3, [pc, #540]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a86      	ldr	r2, [pc, #536]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e035      	b.n	8002f32 <HAL_RCC_OscConfig+0x99a>
 8002ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x958>
 8002ed6:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a7f      	ldr	r2, [pc, #508]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6213      	str	r3, [r2, #32]
 8002ee2:	4b7d      	ldr	r3, [pc, #500]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a7c      	ldr	r2, [pc, #496]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	e020      	b.n	8002f32 <HAL_RCC_OscConfig+0x99a>
 8002ef0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x982>
 8002f00:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a74      	ldr	r2, [pc, #464]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a71      	ldr	r2, [pc, #452]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x99a>
 8002f1a:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a6e      	ldr	r2, [pc, #440]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6213      	str	r3, [r2, #32]
 8002f26:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a6b      	ldr	r2, [pc, #428]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8081 	beq.w	8003046 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f44:	f7fd fdb6 	bl	8000ab4 <HAL_GetTick>
 8002f48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	e00b      	b.n	8002f66 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fd fdb1 	bl	8000ab4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e365      	b.n	8003632 <HAL_RCC_OscConfig+0x109a>
 8002f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f6a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f6e:	2202      	movs	r2, #2
 8002f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fa93 f2a3 	rbit	r2, r3
 8002f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f92:	2202      	movs	r2, #2
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	fa93 f2a3 	rbit	r2, r3
 8002fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fac:	601a      	str	r2, [r3, #0]
  return result;
 8002fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f043 0302 	orr.w	r3, r3, #2
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d102      	bne.n	8002fd2 <HAL_RCC_OscConfig+0xa3a>
 8002fcc:	4b42      	ldr	r3, [pc, #264]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	e013      	b.n	8002ffa <HAL_RCC_OscConfig+0xa62>
 8002fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fda:	2202      	movs	r2, #2
 8002fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f2a3 	rbit	r2, r3
 8002fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ffe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003002:	2102      	movs	r1, #2
 8003004:	6011      	str	r1, [r2, #0]
 8003006:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800300a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	fa92 f1a2 	rbit	r1, r2
 8003014:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003018:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800301c:	6011      	str	r1, [r2, #0]
  return result;
 800301e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003022:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	fab2 f282 	clz	r2, r2
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f002 021f 	and.w	r2, r2, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d084      	beq.n	8002f4e <HAL_RCC_OscConfig+0x9b6>
 8003044:	e083      	b.n	800314e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7fd fd35 	bl	8000ab4 <HAL_GetTick>
 800304a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fd fd30 	bl	8000ab4 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e2e4      	b.n	8003632 <HAL_RCC_OscConfig+0x109a>
 8003068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003070:	2202      	movs	r2, #2
 8003072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003078:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003086:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003094:	2202      	movs	r2, #2
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030ae:	601a      	str	r2, [r3, #0]
  return result;
 80030b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0xb44>
 80030ce:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <HAL_RCC_OscConfig+0xb40>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	e017      	b.n	8003104 <HAL_RCC_OscConfig+0xb6c>
 80030d4:	40007000 	.word	0x40007000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030e4:	2202      	movs	r2, #2
 80030e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	4bb3      	ldr	r3, [pc, #716]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003108:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800310c:	2102      	movs	r1, #2
 800310e:	6011      	str	r1, [r2, #0]
 8003110:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003114:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	fa92 f1a2 	rbit	r1, r2
 800311e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003122:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003126:	6011      	str	r1, [r2, #0]
  return result;
 8003128:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800312c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	fab2 f282 	clz	r2, r2
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f002 021f 	and.w	r2, r2, #31
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f202 	lsl.w	r2, r1, r2
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d180      	bne.n	8003050 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800314e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003152:	2b01      	cmp	r3, #1
 8003154:	d105      	bne.n	8003162 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003156:	4b9e      	ldr	r3, [pc, #632]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a9d      	ldr	r2, [pc, #628]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 800315c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003160:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 825e 	beq.w	8003630 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003174:	4b96      	ldr	r3, [pc, #600]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b08      	cmp	r3, #8
 800317e:	f000 821f 	beq.w	80035c0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003186:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b02      	cmp	r3, #2
 8003190:	f040 8170 	bne.w	8003474 <HAL_RCC_OscConfig+0xedc>
 8003194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003198:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800319c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031b8:	601a      	str	r2, [r3, #0]
  return result;
 80031ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031c2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	461a      	mov	r2, r3
 80031d6:	2300      	movs	r3, #0
 80031d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fd fc6b 	bl	8000ab4 <HAL_GetTick>
 80031de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e2:	e009      	b.n	80031f8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fd fc66 	bl	8000ab4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e21c      	b.n	8003632 <HAL_RCC_OscConfig+0x109a>
 80031f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800320a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003218:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800321c:	601a      	str	r2, [r3, #0]
  return result;
 800321e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003222:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003226:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d102      	bne.n	8003242 <HAL_RCC_OscConfig+0xcaa>
 800323c:	4b64      	ldr	r3, [pc, #400]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	e027      	b.n	8003292 <HAL_RCC_OscConfig+0xcfa>
 8003242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003246:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800324a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800324e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003254:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003262:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800327a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	fa93 f2a3 	rbit	r2, r3
 8003284:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003288:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	4b50      	ldr	r3, [pc, #320]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003296:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800329a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800329e:	6011      	str	r1, [r2, #0]
 80032a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032a4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	fa92 f1a2 	rbit	r1, r2
 80032ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032b2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80032b6:	6011      	str	r1, [r2, #0]
  return result;
 80032b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032bc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	fab2 f282 	clz	r2, r2
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	f042 0220 	orr.w	r2, r2, #32
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f002 021f 	and.w	r2, r2, #31
 80032d2:	2101      	movs	r1, #1
 80032d4:	fa01 f202 	lsl.w	r2, r1, r2
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d182      	bne.n	80031e4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032de:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	f023 020f 	bic.w	r2, r3, #15
 80032e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	4937      	ldr	r1, [pc, #220]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80032f8:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003304:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a19      	ldr	r1, [r3, #32]
 800330c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003310:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	430b      	orrs	r3, r1
 800331a:	492d      	ldr	r1, [pc, #180]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
 8003320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003324:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800332c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003332:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	fa93 f2a3 	rbit	r2, r3
 800333c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003340:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003344:	601a      	str	r2, [r3, #0]
  return result;
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800334e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800335a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	461a      	mov	r2, r3
 8003362:	2301      	movs	r3, #1
 8003364:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fd fba5 	bl	8000ab4 <HAL_GetTick>
 800336a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336e:	e009      	b.n	8003384 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003370:	f7fd fba0 	bl	8000ab4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e156      	b.n	8003632 <HAL_RCC_OscConfig+0x109a>
 8003384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003388:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800338c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003396:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	fa93 f2a3 	rbit	r2, r3
 80033a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033a8:	601a      	str	r2, [r3, #0]
  return result;
 80033aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0xe3c>
 80033c8:	4b01      	ldr	r3, [pc, #4]	; (80033d0 <HAL_RCC_OscConfig+0xe38>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	e02a      	b.n	8003424 <HAL_RCC_OscConfig+0xe8c>
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	fa93 f2a3 	rbit	r2, r3
 80033f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003402:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	4b86      	ldr	r3, [pc, #536]	; (800363c <HAL_RCC_OscConfig+0x10a4>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003428:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800342c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003430:	6011      	str	r1, [r2, #0]
 8003432:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003436:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	fa92 f1a2 	rbit	r1, r2
 8003440:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003444:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003448:	6011      	str	r1, [r2, #0]
  return result;
 800344a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800344e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	fab2 f282 	clz	r2, r2
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	f042 0220 	orr.w	r2, r2, #32
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	f002 021f 	and.w	r2, r2, #31
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f202 	lsl.w	r2, r1, r2
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	f43f af7f 	beq.w	8003370 <HAL_RCC_OscConfig+0xdd8>
 8003472:	e0dd      	b.n	8003630 <HAL_RCC_OscConfig+0x1098>
 8003474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003478:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800347c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003486:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fa93 f2a3 	rbit	r2, r3
 8003490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003494:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003498:	601a      	str	r2, [r3, #0]
  return result;
 800349a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034a2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	461a      	mov	r2, r3
 80034b6:	2300      	movs	r3, #0
 80034b8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7fd fafb 	bl	8000ab4 <HAL_GetTick>
 80034be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c2:	e009      	b.n	80034d8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd faf6 	bl	8000ab4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0ac      	b.n	8003632 <HAL_RCC_OscConfig+0x109a>
 80034d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	fa93 f2a3 	rbit	r2, r3
 80034f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80034fc:	601a      	str	r2, [r3, #0]
  return result;
 80034fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003502:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003506:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d102      	bne.n	8003522 <HAL_RCC_OscConfig+0xf8a>
 800351c:	4b47      	ldr	r3, [pc, #284]	; (800363c <HAL_RCC_OscConfig+0x10a4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	e027      	b.n	8003572 <HAL_RCC_OscConfig+0xfda>
 8003522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003526:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800352a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800352e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003534:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fa93 f2a3 	rbit	r2, r3
 800353e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003542:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800354c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800355a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f2a3 	rbit	r2, r3
 8003564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003568:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	4b33      	ldr	r3, [pc, #204]	; (800363c <HAL_RCC_OscConfig+0x10a4>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003576:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800357a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800357e:	6011      	str	r1, [r2, #0]
 8003580:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003584:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	fa92 f1a2 	rbit	r1, r2
 800358e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003592:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003596:	6011      	str	r1, [r2, #0]
  return result;
 8003598:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800359c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	fab2 f282 	clz	r2, r2
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	f042 0220 	orr.w	r2, r2, #32
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	f002 021f 	and.w	r2, r2, #31
 80035b2:	2101      	movs	r1, #1
 80035b4:	fa01 f202 	lsl.w	r2, r1, r2
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d182      	bne.n	80034c4 <HAL_RCC_OscConfig+0xf2c>
 80035be:	e037      	b.n	8003630 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e02e      	b.n	8003632 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <HAL_RCC_OscConfig+0x10a4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <HAL_RCC_OscConfig+0x10a4>)
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80035e8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80035ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d117      	bne.n	800362c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003600:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003608:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003610:	429a      	cmp	r2, r3
 8003612:	d10b      	bne.n	800362c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003618:	f003 020f 	and.w	r2, r3, #15
 800361c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000

08003640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b09e      	sub	sp, #120	; 0x78
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e162      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b90      	ldr	r3, [pc, #576]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d910      	bls.n	8003688 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b8d      	ldr	r3, [pc, #564]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 0207 	bic.w	r2, r3, #7
 800366e:	498b      	ldr	r1, [pc, #556]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b89      	ldr	r3, [pc, #548]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e14a      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b82      	ldr	r3, [pc, #520]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	497f      	ldr	r1, [pc, #508]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80dc 	beq.w	800386c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d13c      	bne.n	8003736 <HAL_RCC_ClockConfig+0xf6>
 80036bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xa6>
 80036e0:	4b6f      	ldr	r3, [pc, #444]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	e00f      	b.n	8003706 <HAL_RCC_ClockConfig+0xc6>
 80036e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	667b      	str	r3, [r7, #100]	; 0x64
 80036f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f8:	663b      	str	r3, [r7, #96]	; 0x60
 80036fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800370a:	65ba      	str	r2, [r7, #88]	; 0x58
 800370c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800370e:	fa92 f2a2 	rbit	r2, r2
 8003712:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003716:	fab2 f282 	clz	r2, r2
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f042 0220 	orr.w	r2, r2, #32
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	f002 021f 	and.w	r2, r2, #31
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d17b      	bne.n	800382a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0f3      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d13c      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x178>
 800373e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003742:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800374c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d102      	bne.n	8003768 <HAL_RCC_ClockConfig+0x128>
 8003762:	4b4f      	ldr	r3, [pc, #316]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	e00f      	b.n	8003788 <HAL_RCC_ClockConfig+0x148>
 8003768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
 8003776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
 800377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003784:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800378c:	63ba      	str	r2, [r7, #56]	; 0x38
 800378e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f002 021f 	and.w	r2, r2, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d13a      	bne.n	800382a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b2      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
 80037b8:	2302      	movs	r3, #2
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d102      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x1a0>
 80037da:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e00d      	b.n	80037fc <HAL_RCC_ClockConfig+0x1bc>
 80037e0:	2302      	movs	r3, #2
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
 80037ec:	2302      	movs	r3, #2
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	2202      	movs	r2, #2
 80037fe:	61ba      	str	r2, [r7, #24]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	fa92 f2a2 	rbit	r2, r2
 8003806:	617a      	str	r2, [r7, #20]
  return result;
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	fab2 f282 	clz	r2, r2
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	f042 0220 	orr.w	r2, r2, #32
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	f002 021f 	and.w	r2, r2, #31
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f202 	lsl.w	r2, r1, r2
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e079      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	491a      	ldr	r1, [pc, #104]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383c:	f7fd f93a 	bl	8000ab4 <HAL_GetTick>
 8003840:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fd f936 	bl	8000ab4 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e061      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_RCC_ClockConfig+0x260>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d214      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	4906      	ldr	r1, [pc, #24]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b04      	ldr	r3, [pc, #16]	; (800389c <HAL_RCC_ClockConfig+0x25c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e040      	b.n	800391e <HAL_RCC_ClockConfig+0x2de>
 800389c:	40022000 	.word	0x40022000
 80038a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	491a      	ldr	r1, [pc, #104]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4912      	ldr	r1, [pc, #72]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038e2:	f000 f829 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80038e6:	4601      	mov	r1, r0
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCC_ClockConfig+0x2e8>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f0:	22f0      	movs	r2, #240	; 0xf0
 80038f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	fa92 f2a2 	rbit	r2, r2
 80038fa:	60fa      	str	r2, [r7, #12]
  return result;
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	fab2 f282 	clz	r2, r2
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	40d3      	lsrs	r3, r2
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x2ec>)
 8003908:	5cd3      	ldrb	r3, [r2, r3]
 800390a:	fa21 f303 	lsr.w	r3, r1, r3
 800390e:	4a08      	ldr	r2, [pc, #32]	; (8003930 <HAL_RCC_ClockConfig+0x2f0>)
 8003910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_RCC_ClockConfig+0x2f4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd f888 	bl	8000a2c <HAL_InitTick>
  
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3778      	adds	r7, #120	; 0x78
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	08004a10 	.word	0x08004a10
 8003930:	20000018 	.word	0x20000018
 8003934:	2000001c 	.word	0x2000001c

08003938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	b08b      	sub	sp, #44	; 0x2c
 800393c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b04      	cmp	r3, #4
 8003960:	d002      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x30>
 8003962:	2b08      	cmp	r3, #8
 8003964:	d003      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x36>
 8003966:	e03f      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 800396a:	623b      	str	r3, [r7, #32]
      break;
 800396c:	e03f      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003974:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003978:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	fa92 f2a2 	rbit	r2, r2
 8003980:	607a      	str	r2, [r7, #4]
  return result;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	fab2 f282 	clz	r2, r2
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	40d3      	lsrs	r3, r2
 800398c:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xcc>)
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003992:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	220f      	movs	r2, #15
 800399c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	fa92 f2a2 	rbit	r2, r2
 80039a4:	60fa      	str	r2, [r7, #12]
  return result;
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	fab2 f282 	clz	r2, r2
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	40d3      	lsrs	r3, r2
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039b2:	5cd3      	ldrb	r3, [r2, r3]
 80039b4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039c0:	4a0f      	ldr	r2, [pc, #60]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
 80039d0:	e007      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039d2:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	623b      	str	r3, [r7, #32]
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039ea:	623b      	str	r3, [r7, #32]
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	6a3b      	ldr	r3, [r7, #32]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	372c      	adds	r7, #44	; 0x2c
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40021000 	.word	0x40021000
 8003a00:	007a1200 	.word	0x007a1200
 8003a04:	08004a28 	.word	0x08004a28
 8003a08:	08004a38 	.word	0x08004a38

08003a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000018 	.word	0x20000018

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a2a:	f7ff ffef 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a2e:	4601      	mov	r1, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	fa92 f2a2 	rbit	r2, r2
 8003a44:	603a      	str	r2, [r7, #0]
  return result;
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	fab2 f282 	clz	r2, r2
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	40d3      	lsrs	r3, r2
 8003a50:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08004a20 	.word	0x08004a20

08003a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a6e:	f7ff ffcd 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	fa92 f2a2 	rbit	r2, r2
 8003a88:	603a      	str	r2, [r7, #0]
  return result;
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	fab2 f282 	clz	r2, r2
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	40d3      	lsrs	r3, r2
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08004a20 	.word	0x08004a20

08003aac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b092      	sub	sp, #72	; 0x48
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003abc:	2300      	movs	r3, #0
 8003abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80d4 	beq.w	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad0:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10e      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	61d3      	str	r3, [r2, #28]
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	4b45      	ldr	r3, [pc, #276]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d118      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b06:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a41      	ldr	r2, [pc, #260]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b12:	f7fc ffcf 	bl	8000ab4 <HAL_GetTick>
 8003b16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	e008      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1a:	f7fc ffcb 	bl	8000ab4 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	; 0x64
 8003b26:	d901      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e1d6      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b38:	4b34      	ldr	r3, [pc, #208]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8084 	beq.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d07c      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	461a      	mov	r2, r3
 8003b82:	2301      	movs	r3, #1
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d04b      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7fc ff7b 	bl	8000ab4 <HAL_GetTick>
 8003bbe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fc ff77 	bl	8000ab4 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e180      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	2302      	movs	r3, #2
 8003be6:	623b      	str	r3, [r7, #32]
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	61fb      	str	r3, [r7, #28]
  return result;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d108      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c06:	4b01      	ldr	r3, [pc, #4]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	e00d      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40007000 	.word	0x40007000
 8003c14:	10908100 	.word	0x10908100
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	4b9a      	ldr	r3, [pc, #616]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	2202      	movs	r2, #2
 8003c2a:	613a      	str	r2, [r7, #16]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	fa92 f2a2 	rbit	r2, r2
 8003c32:	60fa      	str	r2, [r7, #12]
  return result;
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	fab2 f282 	clz	r2, r2
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f002 021f 	and.w	r2, r2, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0b7      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c52:	4b8f      	ldr	r3, [pc, #572]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	498c      	ldr	r1, [pc, #560]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6c:	4b88      	ldr	r3, [pc, #544]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4a87      	ldr	r2, [pc, #540]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c84:	4b82      	ldr	r3, [pc, #520]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f023 0203 	bic.w	r2, r3, #3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	497f      	ldr	r1, [pc, #508]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca2:	4b7b      	ldr	r3, [pc, #492]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	4978      	ldr	r1, [pc, #480]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cc0:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	4970      	ldr	r1, [pc, #448]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cde:	4b6c      	ldr	r3, [pc, #432]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f023 0210 	bic.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4969      	ldr	r1, [pc, #420]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003cfc:	4b64      	ldr	r3, [pc, #400]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	4961      	ldr	r1, [pc, #388]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1a:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f023 0220 	bic.w	r2, r3, #32
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	495a      	ldr	r1, [pc, #360]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d38:	4b55      	ldr	r3, [pc, #340]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	4952      	ldr	r1, [pc, #328]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d56:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	494b      	ldr	r1, [pc, #300]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d74:	4b46      	ldr	r3, [pc, #280]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	4943      	ldr	r1, [pc, #268]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d008      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d92:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	493c      	ldr	r1, [pc, #240]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003db0:	4b37      	ldr	r3, [pc, #220]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	4934      	ldr	r1, [pc, #208]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	492d      	ldr	r1, [pc, #180]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dec:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	4925      	ldr	r1, [pc, #148]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	491e      	ldr	r1, [pc, #120]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003e28:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	4916      	ldr	r1, [pc, #88]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003e46:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	490f      	ldr	r1, [pc, #60]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	4907      	ldr	r1, [pc, #28]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e82:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	e002      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	4913      	ldr	r1, [pc, #76]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb4:	490b      	ldr	r1, [pc, #44]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed2:	4904      	ldr	r1, [pc, #16]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3748      	adds	r7, #72	; 0x48
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000

08003ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e049      	b.n	8003f8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc fc88 	bl	8000824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 f968 	bl	80041fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e047      	b.n	8004040 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a23      	ldr	r2, [pc, #140]	; (800404c <HAL_TIM_Base_Start+0xb4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01d      	beq.n	8003ffe <HAL_TIM_Base_Start+0x66>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fca:	d018      	beq.n	8003ffe <HAL_TIM_Base_Start+0x66>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <HAL_TIM_Base_Start+0xb8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_TIM_Base_Start+0x66>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_TIM_Base_Start+0xbc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_TIM_Base_Start+0x66>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <HAL_TIM_Base_Start+0xc0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_TIM_Base_Start+0x66>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1b      	ldr	r2, [pc, #108]	; (800405c <HAL_TIM_Base_Start+0xc4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIM_Base_Start+0x66>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_TIM_Base_Start+0xc8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d115      	bne.n	800402a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <HAL_TIM_Base_Start+0xcc>)
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b06      	cmp	r3, #6
 800400e:	d015      	beq.n	800403c <HAL_TIM_Base_Start+0xa4>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d011      	beq.n	800403c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004028:	e008      	b.n	800403c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e000      	b.n	800403e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40013400 	.word	0x40013400
 800405c:	40014000 	.word	0x40014000
 8004060:	40015000 	.word	0x40015000
 8004064:	00010007 	.word	0x00010007

08004068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIM_ConfigClockSource+0x1c>
 8004080:	2302      	movs	r3, #2
 8004082:	e0b6      	b.n	80041f2 <HAL_TIM_ConfigClockSource+0x18a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c0:	d03e      	beq.n	8004140 <HAL_TIM_ConfigClockSource+0xd8>
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	f200 8087 	bhi.w	80041d8 <HAL_TIM_ConfigClockSource+0x170>
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ce:	f000 8086 	beq.w	80041de <HAL_TIM_ConfigClockSource+0x176>
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d87f      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x170>
 80040d8:	2b70      	cmp	r3, #112	; 0x70
 80040da:	d01a      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0xaa>
 80040dc:	2b70      	cmp	r3, #112	; 0x70
 80040de:	d87b      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x170>
 80040e0:	2b60      	cmp	r3, #96	; 0x60
 80040e2:	d050      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x11e>
 80040e4:	2b60      	cmp	r3, #96	; 0x60
 80040e6:	d877      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x170>
 80040e8:	2b50      	cmp	r3, #80	; 0x50
 80040ea:	d03c      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0xfe>
 80040ec:	2b50      	cmp	r3, #80	; 0x50
 80040ee:	d873      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x170>
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d058      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x13e>
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d86f      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x170>
 80040f8:	2b30      	cmp	r3, #48	; 0x30
 80040fa:	d064      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x15e>
 80040fc:	2b30      	cmp	r3, #48	; 0x30
 80040fe:	d86b      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x170>
 8004100:	2b20      	cmp	r3, #32
 8004102:	d060      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x15e>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d867      	bhi.n	80041d8 <HAL_TIM_ConfigClockSource+0x170>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d05c      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x15e>
 800410c:	2b10      	cmp	r3, #16
 800410e:	d05a      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x15e>
 8004110:	e062      	b.n	80041d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6899      	ldr	r1, [r3, #8]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f000 f983 	bl	800442c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	609a      	str	r2, [r3, #8]
      break;
 800413e:	e04f      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6899      	ldr	r1, [r3, #8]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f000 f96c 	bl	800442c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004162:	609a      	str	r2, [r3, #8]
      break;
 8004164:	e03c      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	461a      	mov	r2, r3
 8004174:	f000 f8e0 	bl	8004338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2150      	movs	r1, #80	; 0x50
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f939 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8004184:	e02c      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	461a      	mov	r2, r3
 8004194:	f000 f8ff 	bl	8004396 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2160      	movs	r1, #96	; 0x60
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f929 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 80041a4:	e01c      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f000 f8c0 	bl	8004338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2140      	movs	r1, #64	; 0x40
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f919 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 80041c4:	e00c      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f000 f910 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 80041d6:	e003      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
      break;
 80041dc:	e000      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80041de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a42      	ldr	r2, [pc, #264]	; (8004318 <TIM_Base_SetConfig+0x11c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d00f      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3f      	ldr	r2, [pc, #252]	; (800431c <TIM_Base_SetConfig+0x120>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00b      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3e      	ldr	r2, [pc, #248]	; (8004320 <TIM_Base_SetConfig+0x124>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d007      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3d      	ldr	r2, [pc, #244]	; (8004324 <TIM_Base_SetConfig+0x128>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3c      	ldr	r2, [pc, #240]	; (8004328 <TIM_Base_SetConfig+0x12c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d108      	bne.n	800424e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a31      	ldr	r2, [pc, #196]	; (8004318 <TIM_Base_SetConfig+0x11c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d01b      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2e      	ldr	r2, [pc, #184]	; (800431c <TIM_Base_SetConfig+0x120>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d017      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2d      	ldr	r2, [pc, #180]	; (8004320 <TIM_Base_SetConfig+0x124>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2c      	ldr	r2, [pc, #176]	; (8004324 <TIM_Base_SetConfig+0x128>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00f      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2c      	ldr	r2, [pc, #176]	; (800432c <TIM_Base_SetConfig+0x130>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <TIM_Base_SetConfig+0x134>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <TIM_Base_SetConfig+0x138>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a25      	ldr	r2, [pc, #148]	; (8004328 <TIM_Base_SetConfig+0x12c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a12      	ldr	r2, [pc, #72]	; (8004318 <TIM_Base_SetConfig+0x11c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d013      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <TIM_Base_SetConfig+0x128>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00f      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a13      	ldr	r2, [pc, #76]	; (800432c <TIM_Base_SetConfig+0x130>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <TIM_Base_SetConfig+0x134>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a11      	ldr	r2, [pc, #68]	; (8004334 <TIM_Base_SetConfig+0x138>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0x100>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0c      	ldr	r2, [pc, #48]	; (8004328 <TIM_Base_SetConfig+0x12c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40013400 	.word	0x40013400
 8004328:	40015000 	.word	0x40015000
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0201 	bic.w	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 030a 	bic.w	r3, r3, #10
 8004374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0210 	bic.w	r2, r3, #16
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	031b      	lsls	r3, r3, #12
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	f043 0307 	orr.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	021a      	lsls	r2, r3, #8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	431a      	orrs	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	609a      	str	r2, [r3, #8]
}
 8004460:	bf00      	nop
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004480:	2302      	movs	r3, #2
 8004482:	e06d      	b.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a30      	ldr	r2, [pc, #192]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2f      	ldr	r2, [pc, #188]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2d      	ldr	r2, [pc, #180]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d108      	bne.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1e      	ldr	r2, [pc, #120]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d01d      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004500:	d018      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d013      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a11      	ldr	r2, [pc, #68]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d10c      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	4313      	orrs	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40013400 	.word	0x40013400
 8004574:	40015000 	.word	0x40015000
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40014000 	.word	0x40014000

08004584 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e03c      	b.n	8004610 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fc f958 	bl	8000860 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f85b 	bl	8004684 <USART_SetConfig>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e01b      	b.n	8004610 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045e6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f985 	bl	8004918 <USART_CheckIdleState>
 800460e:	4603      	mov	r3, r0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004628:	e018      	b.n	800465c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d014      	beq.n	800465c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fc fa3f 	bl	8000ab4 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <USART_WaitOnFlagUntilTimeout+0x30>
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e00f      	b.n	800467c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69da      	ldr	r2, [r3, #28]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4013      	ands	r3, r2
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	429a      	cmp	r2, r3
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	429a      	cmp	r2, r3
 8004678:	d0d7      	beq.n	800462a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004690:	2300      	movs	r3, #0
 8004692:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b94      	ldr	r3, [pc, #592]	; (8004904 <USART_SetConfig+0x280>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	6979      	ldr	r1, [r7, #20]
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80046be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046c2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a81      	ldr	r2, [pc, #516]	; (8004908 <USART_SetConfig+0x284>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d11f      	bne.n	8004746 <USART_SetConfig+0xc2>
 8004706:	4b81      	ldr	r3, [pc, #516]	; (800490c <USART_SetConfig+0x288>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b03      	cmp	r3, #3
 8004710:	d816      	bhi.n	8004740 <USART_SetConfig+0xbc>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <USART_SetConfig+0x94>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	08004729 	.word	0x08004729
 800471c:	08004735 	.word	0x08004735
 8004720:	0800473b 	.word	0x0800473b
 8004724:	0800472f 	.word	0x0800472f
 8004728:	2301      	movs	r3, #1
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e061      	b.n	80047f2 <USART_SetConfig+0x16e>
 800472e:	2302      	movs	r3, #2
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e05e      	b.n	80047f2 <USART_SetConfig+0x16e>
 8004734:	2304      	movs	r3, #4
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e05b      	b.n	80047f2 <USART_SetConfig+0x16e>
 800473a:	2308      	movs	r3, #8
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	e058      	b.n	80047f2 <USART_SetConfig+0x16e>
 8004740:	2310      	movs	r3, #16
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e055      	b.n	80047f2 <USART_SetConfig+0x16e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a71      	ldr	r2, [pc, #452]	; (8004910 <USART_SetConfig+0x28c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d124      	bne.n	800479a <USART_SetConfig+0x116>
 8004750:	4b6e      	ldr	r3, [pc, #440]	; (800490c <USART_SetConfig+0x288>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004758:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800475c:	d011      	beq.n	8004782 <USART_SetConfig+0xfe>
 800475e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004762:	d817      	bhi.n	8004794 <USART_SetConfig+0x110>
 8004764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004768:	d011      	beq.n	800478e <USART_SetConfig+0x10a>
 800476a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800476e:	d811      	bhi.n	8004794 <USART_SetConfig+0x110>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <USART_SetConfig+0xf8>
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d006      	beq.n	8004788 <USART_SetConfig+0x104>
 800477a:	e00b      	b.n	8004794 <USART_SetConfig+0x110>
 800477c:	2300      	movs	r3, #0
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e037      	b.n	80047f2 <USART_SetConfig+0x16e>
 8004782:	2302      	movs	r3, #2
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e034      	b.n	80047f2 <USART_SetConfig+0x16e>
 8004788:	2304      	movs	r3, #4
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e031      	b.n	80047f2 <USART_SetConfig+0x16e>
 800478e:	2308      	movs	r3, #8
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e02e      	b.n	80047f2 <USART_SetConfig+0x16e>
 8004794:	2310      	movs	r3, #16
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e02b      	b.n	80047f2 <USART_SetConfig+0x16e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a5d      	ldr	r2, [pc, #372]	; (8004914 <USART_SetConfig+0x290>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d124      	bne.n	80047ee <USART_SetConfig+0x16a>
 80047a4:	4b59      	ldr	r3, [pc, #356]	; (800490c <USART_SetConfig+0x288>)
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80047ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047b0:	d011      	beq.n	80047d6 <USART_SetConfig+0x152>
 80047b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047b6:	d817      	bhi.n	80047e8 <USART_SetConfig+0x164>
 80047b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047bc:	d011      	beq.n	80047e2 <USART_SetConfig+0x15e>
 80047be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047c2:	d811      	bhi.n	80047e8 <USART_SetConfig+0x164>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <USART_SetConfig+0x14c>
 80047c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047cc:	d006      	beq.n	80047dc <USART_SetConfig+0x158>
 80047ce:	e00b      	b.n	80047e8 <USART_SetConfig+0x164>
 80047d0:	2300      	movs	r3, #0
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e00d      	b.n	80047f2 <USART_SetConfig+0x16e>
 80047d6:	2302      	movs	r3, #2
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e00a      	b.n	80047f2 <USART_SetConfig+0x16e>
 80047dc:	2304      	movs	r3, #4
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e007      	b.n	80047f2 <USART_SetConfig+0x16e>
 80047e2:	2308      	movs	r3, #8
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e004      	b.n	80047f2 <USART_SetConfig+0x16e>
 80047e8:	2310      	movs	r3, #16
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e001      	b.n	80047f2 <USART_SetConfig+0x16e>
 80047ee:	2310      	movs	r3, #16
 80047f0:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80047f2:	7ffb      	ldrb	r3, [r7, #31]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d85a      	bhi.n	80048ae <USART_SetConfig+0x22a>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <USART_SetConfig+0x17c>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004825 	.word	0x08004825
 8004804:	08004843 	.word	0x08004843
 8004808:	08004861 	.word	0x08004861
 800480c:	080048af 	.word	0x080048af
 8004810:	0800487b 	.word	0x0800487b
 8004814:	080048af 	.word	0x080048af
 8004818:	080048af 	.word	0x080048af
 800481c:	080048af 	.word	0x080048af
 8004820:	08004899 	.word	0x08004899
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8004824:	f7ff f8fe 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8004828:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	005a      	lsls	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	61bb      	str	r3, [r7, #24]
      break;
 8004840:	e038      	b.n	80048b4 <USART_SetConfig+0x230>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8004842:	f7ff f911 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8004846:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	005a      	lsls	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	441a      	add	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	61bb      	str	r3, [r7, #24]
      break;
 800485e:	e029      	b.n	80048b4 <USART_SetConfig+0x230>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800486a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6852      	ldr	r2, [r2, #4]
 8004872:	fbb3 f3f2 	udiv	r3, r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
      break;
 8004878:	e01c      	b.n	80048b4 <USART_SetConfig+0x230>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800487a:	f7ff f85d 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 800487e:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	005a      	lsls	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	441a      	add	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	61bb      	str	r3, [r7, #24]
      break;
 8004896:	e00d      	b.n	80048b4 <USART_SetConfig+0x230>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048aa:	61bb      	str	r3, [r7, #24]
      break;
 80048ac:	e002      	b.n	80048b4 <USART_SetConfig+0x230>
    default:
      ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	77bb      	strb	r3, [r7, #30]
      break;
 80048b2:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b0f      	cmp	r3, #15
 80048b8:	d916      	bls.n	80048e8 <USART_SetConfig+0x264>
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c0:	d212      	bcs.n	80048e8 <USART_SetConfig+0x264>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f023 030f 	bic.w	r3, r3, #15
 80048ca:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	89fb      	ldrh	r3, [r7, #14]
 80048da:	4313      	orrs	r3, r2
 80048dc:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	89fa      	ldrh	r2, [r7, #14]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	e001      	b.n	80048ec <USART_SetConfig+0x268>
  }
  else
  {
    ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 80048f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	efff69f3 	.word	0xefff69f3
 8004908:	40013800 	.word	0x40013800
 800490c:	40021000 	.word	0x40021000
 8004910:	40004400 	.word	0x40004400
 8004914:	40004800 	.word	0x40004800

08004918 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af02      	add	r7, sp, #8
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004926:	f7fc f8c5 	bl	8000ab4 <HAL_GetTick>
 800492a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b08      	cmp	r3, #8
 8004938:	d10e      	bne.n	8004958 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800493a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fe65 	bl	8004618 <USART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e01e      	b.n	8004996 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b04      	cmp	r3, #4
 8004964:	d10e      	bne.n	8004984 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff fe4f 	bl	8004618 <USART_WaitOnFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e008      	b.n	8004996 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <__libc_init_array>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4d0d      	ldr	r5, [pc, #52]	; (80049d8 <__libc_init_array+0x38>)
 80049a4:	4c0d      	ldr	r4, [pc, #52]	; (80049dc <__libc_init_array+0x3c>)
 80049a6:	1b64      	subs	r4, r4, r5
 80049a8:	10a4      	asrs	r4, r4, #2
 80049aa:	2600      	movs	r6, #0
 80049ac:	42a6      	cmp	r6, r4
 80049ae:	d109      	bne.n	80049c4 <__libc_init_array+0x24>
 80049b0:	4d0b      	ldr	r5, [pc, #44]	; (80049e0 <__libc_init_array+0x40>)
 80049b2:	4c0c      	ldr	r4, [pc, #48]	; (80049e4 <__libc_init_array+0x44>)
 80049b4:	f000 f820 	bl	80049f8 <_init>
 80049b8:	1b64      	subs	r4, r4, r5
 80049ba:	10a4      	asrs	r4, r4, #2
 80049bc:	2600      	movs	r6, #0
 80049be:	42a6      	cmp	r6, r4
 80049c0:	d105      	bne.n	80049ce <__libc_init_array+0x2e>
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
 80049c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c8:	4798      	blx	r3
 80049ca:	3601      	adds	r6, #1
 80049cc:	e7ee      	b.n	80049ac <__libc_init_array+0xc>
 80049ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d2:	4798      	blx	r3
 80049d4:	3601      	adds	r6, #1
 80049d6:	e7f2      	b.n	80049be <__libc_init_array+0x1e>
 80049d8:	08004a48 	.word	0x08004a48
 80049dc:	08004a48 	.word	0x08004a48
 80049e0:	08004a48 	.word	0x08004a48
 80049e4:	08004a4c 	.word	0x08004a4c

080049e8 <memset>:
 80049e8:	4402      	add	r2, r0
 80049ea:	4603      	mov	r3, r0
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d100      	bne.n	80049f2 <memset+0xa>
 80049f0:	4770      	bx	lr
 80049f2:	f803 1b01 	strb.w	r1, [r3], #1
 80049f6:	e7f9      	b.n	80049ec <memset+0x4>

080049f8 <_init>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	bf00      	nop
 80049fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fe:	bc08      	pop	{r3}
 8004a00:	469e      	mov	lr, r3
 8004a02:	4770      	bx	lr

08004a04 <_fini>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	bf00      	nop
 8004a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	469e      	mov	lr, r3
 8004a0e:	4770      	bx	lr
