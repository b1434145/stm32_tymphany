
proximity_Bruce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000872c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  080088d0  080088d0  000188d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008df8  08008df8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008df8  08008df8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008df8  08008df8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dfc  08008dfc  00018dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000003c4  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005a8  200005a8  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec8d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d0c  00000000  00000000  0002eea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  00030bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c50  00000000  00000000  000318b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002178b  00000000  00000000  00032508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff4c  00000000  00000000  00053c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbf11  00000000  00000000  00063bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012faf0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bbc  00000000  00000000  0012fb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080088b4 	.word	0x080088b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080088b4 	.word	0x080088b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <task1ms>:
uint32_t avg_freq(uint32_t);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void task1ms(void) {
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <task5ms>:
void task5ms(void) {
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	0000      	movs	r0, r0
	...

08000c78 <task10ms>:
void task10ms(void) {
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b090      	sub	sp, #64	; 0x40
 8000c7c:	af00      	add	r7, sp, #0
	uint32_t TIM2CNT = __HAL_TIM_GET_COUNTER(&htim2);
 8000c7e:	4bbc      	ldr	r3, [pc, #752]	; (8000f70 <task10ms+0x2f8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000c86:	4bba      	ldr	r3, [pc, #744]	; (8000f70 <task10ms+0x2f8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24

//		snprintf(tx_buff, Buff_len, "counter: %d \r\n",  TIM2CNT);
//		HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);

		unsigned int freq = 0; //can speed up
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
		float mean = 0;
 8000c92:	f04f 0300 	mov.w	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
		for(int i = TIM2_CNT_NUM-1; i > 0; i--) {
 8000c98:	2363      	movs	r3, #99	; 0x63
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c9c:	e00b      	b.n	8000cb6 <task10ms+0x3e>
			save_TIM2[i] = save_TIM2[i-1];
 8000c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4ab4      	ldr	r2, [pc, #720]	; (8000f74 <task10ms+0x2fc>)
 8000ca4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ca8:	49b2      	ldr	r1, [pc, #712]	; (8000f74 <task10ms+0x2fc>)
 8000caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = TIM2_CNT_NUM-1; i > 0; i--) {
 8000cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	dcf0      	bgt.n	8000c9e <task10ms+0x26>
		}
		save_TIM2[0] = TIM2CNT;
 8000cbc:	4aad      	ldr	r2, [pc, #692]	; (8000f74 <task10ms+0x2fc>)
 8000cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc0:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < TIM2_CNT_NUM; i++) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8000cc6:	e009      	b.n	8000cdc <task10ms+0x64>
			freq += save_TIM2[i];
 8000cc8:	4aaa      	ldr	r2, [pc, #680]	; (8000f74 <task10ms+0x2fc>)
 8000cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cd2:	4413      	add	r3, r2
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(int i = 0; i < TIM2_CNT_NUM; i++) {
 8000cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd8:	3301      	adds	r3, #1
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
 8000cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cde:	2b63      	cmp	r3, #99	; 0x63
 8000ce0:	ddf2      	ble.n	8000cc8 <task10ms+0x50>
		}
		SD = 0;
 8000ce2:	4ba5      	ldr	r3, [pc, #660]	; (8000f78 <task10ms+0x300>)
 8000ce4:	f04f 0200 	mov.w	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
		mean = freq / TIM2_CNT_NUM;
 8000cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cec:	4aa3      	ldr	r2, [pc, #652]	; (8000f7c <task10ms+0x304>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	ee07 3a90 	vmov	s15, r3
 8000cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cfc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		for (int i = 0; i < 10; i++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
 8000d04:	e030      	b.n	8000d68 <task10ms+0xf0>
		    SD += pow(save_TIM2[i] - mean, 2);
 8000d06:	4a9b      	ldr	r2, [pc, #620]	; (8000f74 <task10ms+0x2fc>)
 8000d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	ee07 3a90 	vmov	s15, r3
 8000d12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1e:	ee17 0a90 	vmov	r0, s15
 8000d22:	f7ff fc19 	bl	8000558 <__aeabi_f2d>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	ed9f 1b8f 	vldr	d1, [pc, #572]	; 8000f68 <task10ms+0x2f0>
 8000d2e:	ec43 2b10 	vmov	d0, r2, r3
 8000d32:	f006 fe79 	bl	8007a28 <pow>
 8000d36:	ec55 4b10 	vmov	r4, r5, d0
 8000d3a:	4b8f      	ldr	r3, [pc, #572]	; (8000f78 <task10ms+0x300>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fc0a 	bl	8000558 <__aeabi_f2d>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	f7ff faa6 	bl	800029c <__adddf3>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	f7ff ff2e 	bl	8000bb8 <__aeabi_d2f>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4a86      	ldr	r2, [pc, #536]	; (8000f78 <task10ms+0x300>)
 8000d60:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 10; i++) {
 8000d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d64:	3301      	adds	r3, #1
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
 8000d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6a:	2b09      	cmp	r3, #9
 8000d6c:	ddcb      	ble.n	8000d06 <task10ms+0x8e>
		}
		SD_sqrt = sqrt(SD / TIM2_CNT_NUM);
 8000d6e:	4b82      	ldr	r3, [pc, #520]	; (8000f78 <task10ms+0x300>)
 8000d70:	edd3 7a00 	vldr	s15, [r3]
 8000d74:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8000f80 <task10ms+0x308>
 8000d78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d7c:	ee16 0a90 	vmov	r0, s13
 8000d80:	f7ff fbea 	bl	8000558 <__aeabi_f2d>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	ec43 2b10 	vmov	d0, r2, r3
 8000d8c:	f006 febc 	bl	8007b08 <sqrt>
 8000d90:	ec53 2b10 	vmov	r2, r3, d0
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff ff0e 	bl	8000bb8 <__aeabi_d2f>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4a79      	ldr	r2, [pc, #484]	; (8000f84 <task10ms+0x30c>)
 8000da0:	6013      	str	r3, [r2, #0]
//		snprintf(tx_buff, Buff_len, "SD: %f \r\n",  SD_sqrt);
//		HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);

		float ftmp;
		//Plot Frequency post avg (0.25)
		ftmp = freq;
 8000da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float Get0d25PostAvg = ffnPostAvg_0d25(ftmp);
 8000db0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000db4:	f000 fd3e 	bl	8001834 <ffnPostAvg_0d25>
 8000db8:	ed87 0a08 	vstr	s0, [r7, #32]

		//Plot Frequency post avg (0.05)
		float Get0d05PostAvg = ffnPostAvg_0d05(ftmp);
 8000dbc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000dc0:	f000 fd06 	bl	80017d0 <ffnPostAvg_0d05>
 8000dc4:	ed87 0a07 	vstr	s0, [r7, #28]
		present = present_freq(TIM2CNT);
 8000dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dca:	f000 fd63 	bl	8001894 <present_freq>
 8000dce:	eef0 7a40 	vmov.f32	s15, s0
 8000dd2:	4b6d      	ldr	r3, [pc, #436]	; (8000f88 <task10ms+0x310>)
 8000dd4:	edc3 7a00 	vstr	s15, [r3]
		avg = avg_freq(freq);
 8000dd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000dda:	f000 fd85 	bl	80018e8 <avg_freq>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a6a      	ldr	r2, [pc, #424]	; (8000f8c <task10ms+0x314>)
 8000de2:	6013      	str	r3, [r2, #0]
		float offset = SD_avg*100;
 8000de4:	4b6a      	ldr	r3, [pc, #424]	; (8000f90 <task10ms+0x318>)
 8000de6:	edd3 7a00 	vldr	s15, [r3]
 8000dea:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000f80 <task10ms+0x308>
 8000dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df2:	edc7 7a06 	vstr	s15, [r7, #24]

		const float cfOffsetValue = 250.0;
 8000df6:	4b67      	ldr	r3, [pc, #412]	; (8000f94 <task10ms+0x31c>)
 8000df8:	617b      	str	r3, [r7, #20]
		float fMaxBoundary = Get0d05PostAvg+cfOffsetValue;
 8000dfa:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e06:	edc7 7a04 	vstr	s15, [r7, #16]
		float fMinBoundary = Get0d05PostAvg-cfOffsetValue;
 8000e0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e16:	edc7 7a03 	vstr	s15, [r7, #12]
		float fPostAvgFrequency = Get0d25PostAvg-fMinBoundary;
 8000e1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e26:	edc7 7a02 	vstr	s15, [r7, #8]
//		HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);

//		snprintf(tx_buff, Buff_len, "freq: %d \r\n", freq);
//		HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);

		switch(ProximityReady) {
 8000e2a:	4b5b      	ldr	r3, [pc, #364]	; (8000f98 <task10ms+0x320>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d005      	beq.n	8000e3e <task10ms+0x1c6>
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	dc06      	bgt.n	8000e44 <task10ms+0x1cc>
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <task10ms+0x1ca>
 8000e3a:	2b01      	cmp	r3, #1
			case xePR_State_Empty:
				break;
			case xePR_State_Ready:
				break;
 8000e3c:	e002      	b.n	8000e44 <task10ms+0x1cc>
			case xePR_State_Idle: //can be added
				break;
 8000e3e:	bf00      	nop
 8000e40:	e000      	b.n	8000e44 <task10ms+0x1cc>
				break;
 8000e42:	bf00      	nop
		}

		float TransferMax = 2*cfOffsetValue;
 8000e44:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e4c:	edc7 7a01 	vstr	s15, [r7, #4]
		float TransferMin = 0.0;
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]

		if (ProximityReady == xePR_State_Idle) {
 8000e56:	4b50      	ldr	r3, [pc, #320]	; (8000f98 <task10ms+0x320>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d170      	bne.n	8000f40 <task10ms+0x2c8>
			switch(xe_WearValueState) {
 8000e5e:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <task10ms+0x324>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d16f      	bne.n	8000f46 <task10ms+0x2ce>
				case xePOCFD_FreeRun:
						//Normal
						if(abs(present - avg) < 13*offset) {
 8000e66:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <task10ms+0x310>)
 8000e68:	ed93 7a00 	vldr	s14, [r3]
 8000e6c:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <task10ms+0x314>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	ee07 3a90 	vmov	s15, r3
 8000e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e7c:	ee17 0a90 	vmov	r0, s15
 8000e80:	f7ff fb6a 	bl	8000558 <__aeabi_f2d>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	ec43 2b10 	vmov	d0, r2, r3
 8000e8c:	f003 fe9d 	bl	8004bca <abs>
 8000e90:	ee07 0a90 	vmov	s15, r0
 8000e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e98:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e9c:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8000ea0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eac:	d506      	bpl.n	8000ebc <task10ms+0x244>
							if(xeWearState != xeWS_WearInitial) {
 8000eae:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <task10ms+0x328>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <task10ms+0x244>
								xeWearState = xeWS_WearInitial;
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <task10ms+0x328>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
							}
						}

						//Wear on
						if(present - avg < (-13)*offset) {
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <task10ms+0x310>)
 8000ebe:	ed93 7a00 	vldr	s14, [r3]
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <task10ms+0x314>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ed6:	eefa 6a0a 	vmov.f32	s13, #170	; 0xc1500000 -13.0
 8000eda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee6:	d509      	bpl.n	8000efc <task10ms+0x284>
							if(xeWearState != xeWS_WearOn) {
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <task10ms+0x328>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <task10ms+0x284>
								xeWearState = xeWS_WearOn;
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <task10ms+0x328>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]

								SAVE_ON_FLOAT = Get0d25PostAvg;
 8000ef6:	4a2b      	ldr	r2, [pc, #172]	; (8000fa4 <task10ms+0x32c>)
 8000ef8:	6a3b      	ldr	r3, [r7, #32]
 8000efa:	6013      	str	r3, [r2, #0]
							}
						}

						//Wear off
						if(present - avg > 13*offset) {
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <task10ms+0x310>)
 8000efe:	ed93 7a00 	vldr	s14, [r3]
 8000f02:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <task10ms+0x314>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f12:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f16:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8000f1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	dc00      	bgt.n	8000f2a <task10ms+0x2b2>
								xeWearState = xeWS_WearOff;

								SAVE_OFF_FLOAT = Get0d25PostAvg;
							}
						}
						break;
 8000f28:	e00c      	b.n	8000f44 <task10ms+0x2cc>
							if(xeWearState != xeWS_WearOff) {
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <task10ms+0x328>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d008      	beq.n	8000f44 <task10ms+0x2cc>
								xeWearState = xeWS_WearOff;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <task10ms+0x328>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	701a      	strb	r2, [r3, #0]
								SAVE_OFF_FLOAT = Get0d25PostAvg;
 8000f38:	4a1a      	ldr	r2, [pc, #104]	; (8000fa4 <task10ms+0x32c>)
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	6053      	str	r3, [r2, #4]
						break;
 8000f3e:	e001      	b.n	8000f44 <task10ms+0x2cc>
			}
		}
 8000f40:	bf00      	nop
 8000f42:	e000      	b.n	8000f46 <task10ms+0x2ce>
						break;
 8000f44:	bf00      	nop

		switch(xeWearState) {
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <task10ms+0x328>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d83b      	bhi.n	8000fc6 <task10ms+0x34e>
 8000f4e:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <task10ms+0x2dc>)
 8000f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f54:	08000fc5 	.word	0x08000fc5
 8000f58:	08000fa9 	.word	0x08000fa9
 8000f5c:	08000fb7 	.word	0x08000fb7
 8000f60:	08000fc5 	.word	0x08000fc5
 8000f64:	f3af 8000 	nop.w
 8000f68:	00000000 	.word	0x00000000
 8000f6c:	40000000 	.word	0x40000000
 8000f70:	20000200 	.word	0x20000200
 8000f74:	200003bc 	.word	0x200003bc
 8000f78:	200003a8 	.word	0x200003a8
 8000f7c:	51eb851f 	.word	0x51eb851f
 8000f80:	42c80000 	.word	0x42c80000
 8000f84:	200003ac 	.word	0x200003ac
 8000f88:	200003b4 	.word	0x200003b4
 8000f8c:	200003b8 	.word	0x200003b8
 8000f90:	200003b0 	.word	0x200003b0
 8000f94:	437a0000 	.word	0x437a0000
 8000f98:	200003a4 	.word	0x200003a4
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	200003a5 	.word	0x200003a5
 8000fa4:	20000398 	.word	0x20000398
			case xeWS_WearInitial:
					break;
			case xeWS_Normal:
					break;
			case xeWS_WearOn:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2120      	movs	r1, #32
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f001 f996 	bl	80022e0 <HAL_GPIO_WritePin>
					break;
 8000fb4:	e007      	b.n	8000fc6 <task10ms+0x34e>
			case xeWS_WearOff:
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2120      	movs	r1, #32
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f001 f98f 	bl	80022e0 <HAL_GPIO_WritePin>
					break;
 8000fc2:	e000      	b.n	8000fc6 <task10ms+0x34e>
					break;
 8000fc4:	bf00      	nop
		}


}
 8000fc6:	bf00      	nop
 8000fc8:	3740      	adds	r7, #64	; 0x40
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fce:	bf00      	nop

08000fd0 <task50ms>:
void task50ms(void) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <task100ms>:
void task100ms(void) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	if(xeWearState == xeWS_WearInitial) {
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <task100ms+0x7c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d12f      	bne.n	800104e <task100ms+0x6e>
		static float save_SD[SD_CNT_NUM] = {0};
		float SD_sum = 0;
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
		for(int i = SD_CNT_NUM-1; i > 0; i--) {
 8000ff4:	2309      	movs	r3, #9
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	e019      	b.n	800102e <task100ms+0x4e>
					save_SD[i] = save_SD[i-1];
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <task100ms+0x80>)
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4916      	ldr	r1, [pc, #88]	; (8001060 <task100ms+0x80>)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	601a      	str	r2, [r3, #0]
					SD_sum += save_SD[i];
 8001010:	4a13      	ldr	r2, [pc, #76]	; (8001060 <task100ms+0x80>)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	edc7 7a01 	vstr	s15, [r7, #4]
		for(int i = SD_CNT_NUM-1; i > 0; i--) {
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	dce2      	bgt.n	8000ffa <task100ms+0x1a>
		}
		save_SD[0] = SD_sqrt;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <task100ms+0x84>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a09      	ldr	r2, [pc, #36]	; (8001060 <task100ms+0x80>)
 800103a:	6013      	str	r3, [r2, #0]
		SD_avg = SD_sum / (SD_CNT_NUM-1);
 800103c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001040:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <task100ms+0x88>)
 800104a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200003a5 	.word	0x200003a5
 8001060:	2000054c 	.word	0x2000054c
 8001064:	200003ac 	.word	0x200003ac
 8001068:	200003b0 	.word	0x200003b0

0800106c <task500ms>:
void task500ms(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	if (!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)))  {
 8001070:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001074:	480e      	ldr	r0, [pc, #56]	; (80010b0 <task500ms+0x44>)
 8001076:	f001 f91b 	bl	80022b0 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d114      	bne.n	80010aa <task500ms+0x3e>
		BTN_blue = 0;
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <task500ms+0x48>)
 8001082:	7813      	ldrb	r3, [r2, #0]
 8001084:	f36f 0300 	bfc	r3, #0, #1
 8001088:	7013      	strb	r3, [r2, #0]
		snprintf(tx_buff, Buff_len, "BlueButton Press\r\n");
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <task500ms+0x4c>)
 800108c:	21c8      	movs	r1, #200	; 0xc8
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <task500ms+0x50>)
 8001090:	f004 fa3c 	bl	800550c <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <task500ms+0x50>)
 8001096:	f7ff f8a3 	bl	80001e0 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	4906      	ldr	r1, [pc, #24]	; (80010bc <task500ms+0x50>)
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <task500ms+0x54>)
 80010a6:	f003 f977 	bl	8004398 <HAL_UART_Transmit>
	}

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	48000800 	.word	0x48000800
 80010b4:	200003a0 	.word	0x200003a0
 80010b8:	080088d0 	.word	0x080088d0
 80010bc:	200002d0 	.word	0x200002d0
 80010c0:	2000024c 	.word	0x2000024c

080010c4 <task1000ms>:
void task1000ms(void) {
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <task2000ms>:

void task2000ms(void) {
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	switch(ProximityReady) {
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <task2000ms+0x2c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <task2000ms+0x12>
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d003      	beq.n	80010ec <task2000ms+0x18>
		case xePR_State_Empty:
			ProximityReady = xePR_State_Ready;
		case xePR_State_Ready:
			ProximityReady = xePR_State_Idle;
		default:
			break;
 80010e4:	e005      	b.n	80010f2 <task2000ms+0x1e>
			ProximityReady = xePR_State_Ready;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <task2000ms+0x2c>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
			ProximityReady = xePR_State_Idle;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <task2000ms+0x2c>)
 80010ee:	2202      	movs	r2, #2
 80010f0:	701a      	strb	r2, [r3, #0]
			break;
 80010f2:	bf00      	nop
	}

}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200003a4 	.word	0x200003a4

08001104 <task5000ms>:

void task5000ms(void) {
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <calibration_away_task>:

void calibration_away_task(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

	snprintf(tx_buff, Buff_len, "Enter Calibration Mode\r\n");
 8001118:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <calibration_away_task+0xf4>)
 800111a:	21c8      	movs	r1, #200	; 0xc8
 800111c:	483b      	ldr	r0, [pc, #236]	; (800120c <calibration_away_task+0xf8>)
 800111e:	f004 f9f5 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8001122:	483a      	ldr	r0, [pc, #232]	; (800120c <calibration_away_task+0xf8>)
 8001124:	f7ff f85c 	bl	80001e0 <strlen>
 8001128:	4603      	mov	r3, r0
 800112a:	b29a      	uxth	r2, r3
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	4936      	ldr	r1, [pc, #216]	; (800120c <calibration_away_task+0xf8>)
 8001132:	4837      	ldr	r0, [pc, #220]	; (8001210 <calibration_away_task+0xfc>)
 8001134:	f003 f930 	bl	8004398 <HAL_UART_Transmit>

	snprintf(tx_buff, Buff_len, "Please keep away from headphone\r\n");
 8001138:	4a36      	ldr	r2, [pc, #216]	; (8001214 <calibration_away_task+0x100>)
 800113a:	21c8      	movs	r1, #200	; 0xc8
 800113c:	4833      	ldr	r0, [pc, #204]	; (800120c <calibration_away_task+0xf8>)
 800113e:	f004 f9e5 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8001142:	4832      	ldr	r0, [pc, #200]	; (800120c <calibration_away_task+0xf8>)
 8001144:	f7ff f84c 	bl	80001e0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	b29a      	uxth	r2, r3
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	492e      	ldr	r1, [pc, #184]	; (800120c <calibration_away_task+0xf8>)
 8001152:	482f      	ldr	r0, [pc, #188]	; (8001210 <calibration_away_task+0xfc>)
 8001154:	f003 f920 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(3000);
 8001158:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800115c:	f000 fe14 	bl	8001d88 <HAL_Delay>

	snprintf(tx_buff, Buff_len, "Calibration will start in 3 s\r\n");
 8001160:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <calibration_away_task+0x104>)
 8001162:	21c8      	movs	r1, #200	; 0xc8
 8001164:	4829      	ldr	r0, [pc, #164]	; (800120c <calibration_away_task+0xf8>)
 8001166:	f004 f9d1 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 800116a:	4828      	ldr	r0, [pc, #160]	; (800120c <calibration_away_task+0xf8>)
 800116c:	f7ff f838 	bl	80001e0 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	4924      	ldr	r1, [pc, #144]	; (800120c <calibration_away_task+0xf8>)
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <calibration_away_task+0xfc>)
 800117c:	f003 f90c 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001184:	f000 fe00 	bl	8001d88 <HAL_Delay>

	snprintf(tx_buff, Buff_len, "Calibration will start in 2 s\r\n");
 8001188:	4a24      	ldr	r2, [pc, #144]	; (800121c <calibration_away_task+0x108>)
 800118a:	21c8      	movs	r1, #200	; 0xc8
 800118c:	481f      	ldr	r0, [pc, #124]	; (800120c <calibration_away_task+0xf8>)
 800118e:	f004 f9bd 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8001192:	481e      	ldr	r0, [pc, #120]	; (800120c <calibration_away_task+0xf8>)
 8001194:	f7ff f824 	bl	80001e0 <strlen>
 8001198:	4603      	mov	r3, r0
 800119a:	b29a      	uxth	r2, r3
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	491a      	ldr	r1, [pc, #104]	; (800120c <calibration_away_task+0xf8>)
 80011a2:	481b      	ldr	r0, [pc, #108]	; (8001210 <calibration_away_task+0xfc>)
 80011a4:	f003 f8f8 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80011a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ac:	f000 fdec 	bl	8001d88 <HAL_Delay>

	snprintf(tx_buff, Buff_len, "Calibration will start in 1 s\r\n");
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <calibration_away_task+0x10c>)
 80011b2:	21c8      	movs	r1, #200	; 0xc8
 80011b4:	4815      	ldr	r0, [pc, #84]	; (800120c <calibration_away_task+0xf8>)
 80011b6:	f004 f9a9 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 80011ba:	4814      	ldr	r0, [pc, #80]	; (800120c <calibration_away_task+0xf8>)
 80011bc:	f7ff f810 	bl	80001e0 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	4910      	ldr	r1, [pc, #64]	; (800120c <calibration_away_task+0xf8>)
 80011ca:	4811      	ldr	r0, [pc, #68]	; (8001210 <calibration_away_task+0xfc>)
 80011cc:	f003 f8e4 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80011d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d4:	f000 fdd8 	bl	8001d88 <HAL_Delay>

	snprintf(tx_buff, Buff_len, "freq = %d\r\n", avg);
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <calibration_away_task+0x110>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <calibration_away_task+0x114>)
 80011de:	21c8      	movs	r1, #200	; 0xc8
 80011e0:	480a      	ldr	r0, [pc, #40]	; (800120c <calibration_away_task+0xf8>)
 80011e2:	f004 f993 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 80011e6:	4809      	ldr	r0, [pc, #36]	; (800120c <calibration_away_task+0xf8>)
 80011e8:	f7fe fffa 	bl	80001e0 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	4905      	ldr	r1, [pc, #20]	; (800120c <calibration_away_task+0xf8>)
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <calibration_away_task+0xfc>)
 80011f8:	f003 f8ce 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80011fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001200:	f000 fdc2 	bl	8001d88 <HAL_Delay>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	080088e4 	.word	0x080088e4
 800120c:	200002d0 	.word	0x200002d0
 8001210:	2000024c 	.word	0x2000024c
 8001214:	08008900 	.word	0x08008900
 8001218:	08008924 	.word	0x08008924
 800121c:	08008944 	.word	0x08008944
 8001220:	08008964 	.word	0x08008964
 8001224:	200003b8 	.word	0x200003b8
 8001228:	08008984 	.word	0x08008984

0800122c <calibration_close_task>:

void calibration_close_task(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

	snprintf(tx_buff, Buff_len, "Enter Calibration Mode\r\n");
 8001230:	4a3b      	ldr	r2, [pc, #236]	; (8001320 <calibration_close_task+0xf4>)
 8001232:	21c8      	movs	r1, #200	; 0xc8
 8001234:	483b      	ldr	r0, [pc, #236]	; (8001324 <calibration_close_task+0xf8>)
 8001236:	f004 f969 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 800123a:	483a      	ldr	r0, [pc, #232]	; (8001324 <calibration_close_task+0xf8>)
 800123c:	f7fe ffd0 	bl	80001e0 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	4936      	ldr	r1, [pc, #216]	; (8001324 <calibration_close_task+0xf8>)
 800124a:	4837      	ldr	r0, [pc, #220]	; (8001328 <calibration_close_task+0xfc>)
 800124c:	f003 f8a4 	bl	8004398 <HAL_UART_Transmit>

	snprintf(tx_buff, Buff_len, "Please be close to headphone\r\n");
 8001250:	4a36      	ldr	r2, [pc, #216]	; (800132c <calibration_close_task+0x100>)
 8001252:	21c8      	movs	r1, #200	; 0xc8
 8001254:	4833      	ldr	r0, [pc, #204]	; (8001324 <calibration_close_task+0xf8>)
 8001256:	f004 f959 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 800125a:	4832      	ldr	r0, [pc, #200]	; (8001324 <calibration_close_task+0xf8>)
 800125c:	f7fe ffc0 	bl	80001e0 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	492e      	ldr	r1, [pc, #184]	; (8001324 <calibration_close_task+0xf8>)
 800126a:	482f      	ldr	r0, [pc, #188]	; (8001328 <calibration_close_task+0xfc>)
 800126c:	f003 f894 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(3000);
 8001270:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001274:	f000 fd88 	bl	8001d88 <HAL_Delay>

	snprintf(tx_buff, Buff_len, "Calibration will start in 3 s\r\n");
 8001278:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <calibration_close_task+0x104>)
 800127a:	21c8      	movs	r1, #200	; 0xc8
 800127c:	4829      	ldr	r0, [pc, #164]	; (8001324 <calibration_close_task+0xf8>)
 800127e:	f004 f945 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 8001282:	4828      	ldr	r0, [pc, #160]	; (8001324 <calibration_close_task+0xf8>)
 8001284:	f7fe ffac 	bl	80001e0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	4924      	ldr	r1, [pc, #144]	; (8001324 <calibration_close_task+0xf8>)
 8001292:	4825      	ldr	r0, [pc, #148]	; (8001328 <calibration_close_task+0xfc>)
 8001294:	f003 f880 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001298:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129c:	f000 fd74 	bl	8001d88 <HAL_Delay>

	snprintf(tx_buff, Buff_len, "Calibration will start in 2 s\r\n");
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <calibration_close_task+0x108>)
 80012a2:	21c8      	movs	r1, #200	; 0xc8
 80012a4:	481f      	ldr	r0, [pc, #124]	; (8001324 <calibration_close_task+0xf8>)
 80012a6:	f004 f931 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 80012aa:	481e      	ldr	r0, [pc, #120]	; (8001324 <calibration_close_task+0xf8>)
 80012ac:	f7fe ff98 	bl	80001e0 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	491a      	ldr	r1, [pc, #104]	; (8001324 <calibration_close_task+0xf8>)
 80012ba:	481b      	ldr	r0, [pc, #108]	; (8001328 <calibration_close_task+0xfc>)
 80012bc:	f003 f86c 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80012c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c4:	f000 fd60 	bl	8001d88 <HAL_Delay>

	snprintf(tx_buff, Buff_len, "Calibration will start in 1 s\r\n");
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <calibration_close_task+0x10c>)
 80012ca:	21c8      	movs	r1, #200	; 0xc8
 80012cc:	4815      	ldr	r0, [pc, #84]	; (8001324 <calibration_close_task+0xf8>)
 80012ce:	f004 f91d 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <calibration_close_task+0xf8>)
 80012d4:	f7fe ff84 	bl	80001e0 <strlen>
 80012d8:	4603      	mov	r3, r0
 80012da:	b29a      	uxth	r2, r3
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	4910      	ldr	r1, [pc, #64]	; (8001324 <calibration_close_task+0xf8>)
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <calibration_close_task+0xfc>)
 80012e4:	f003 f858 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80012e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ec:	f000 fd4c 	bl	8001d88 <HAL_Delay>

	snprintf(tx_buff, Buff_len, "freq = %d\r\n", avg);
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <calibration_close_task+0x110>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <calibration_close_task+0x114>)
 80012f6:	21c8      	movs	r1, #200	; 0xc8
 80012f8:	480a      	ldr	r0, [pc, #40]	; (8001324 <calibration_close_task+0xf8>)
 80012fa:	f004 f907 	bl	800550c <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, strlen(tx_buff), HAL_MAX_DELAY);
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <calibration_close_task+0xf8>)
 8001300:	f7fe ff6e 	bl	80001e0 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	4905      	ldr	r1, [pc, #20]	; (8001324 <calibration_close_task+0xf8>)
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <calibration_close_task+0xfc>)
 8001310:	f003 f842 	bl	8004398 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001318:	f000 fd36 	bl	8001d88 <HAL_Delay>

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	080088e4 	.word	0x080088e4
 8001324:	200002d0 	.word	0x200002d0
 8001328:	2000024c 	.word	0x2000024c
 800132c:	08008990 	.word	0x08008990
 8001330:	08008924 	.word	0x08008924
 8001334:	08008944 	.word	0x08008944
 8001338:	08008964 	.word	0x08008964
 800133c:	200003b8 	.word	0x200003b8
 8001340:	08008984 	.word	0x08008984

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134a:	f000 fcb7 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134e:	f000 f905 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001352:	f000 f9ef 	bl	8001734 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001356:	f000 f965 	bl	8001624 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800135a:	f000 f9b7 	bl	80016cc <MX_USART2_UART_Init>
	  if(1) {
	  		  static unsigned int   polling1ms = 0;
	  		  static unsigned char  polling5ms = 0, polling10ms = 0, polling50ms = 0, polling100ms = 0;
	  		  static unsigned short polling500ms = 0, polling1000ms = 0, polling2000ms = 0, polling5000ms = 0;

	  		  if(polling1ms != HAL_GetTick() ) {
 800135e:	f000 fd07 	bl	8001d70 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	4b70      	ldr	r3, [pc, #448]	; (8001528 <main+0x1e4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d036      	beq.n	80013da <main+0x96>
				  polling1ms++;
 800136c:	4b6e      	ldr	r3, [pc, #440]	; (8001528 <main+0x1e4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	4a6d      	ldr	r2, [pc, #436]	; (8001528 <main+0x1e4>)
 8001374:	6013      	str	r3, [r2, #0]
				  task1ms();
 8001376:	f7ff fc6f 	bl	8000c58 <task1ms>

				  polling5ms++;
 800137a:	4b6c      	ldr	r3, [pc, #432]	; (800152c <main+0x1e8>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b6a      	ldr	r3, [pc, #424]	; (800152c <main+0x1e8>)
 8001384:	701a      	strb	r2, [r3, #0]
				  polling10ms++;
 8001386:	4b6a      	ldr	r3, [pc, #424]	; (8001530 <main+0x1ec>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b68      	ldr	r3, [pc, #416]	; (8001530 <main+0x1ec>)
 8001390:	701a      	strb	r2, [r3, #0]
				  polling50ms++;
 8001392:	4b68      	ldr	r3, [pc, #416]	; (8001534 <main+0x1f0>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b66      	ldr	r3, [pc, #408]	; (8001534 <main+0x1f0>)
 800139c:	701a      	strb	r2, [r3, #0]
				  polling100ms++;
 800139e:	4b66      	ldr	r3, [pc, #408]	; (8001538 <main+0x1f4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b64      	ldr	r3, [pc, #400]	; (8001538 <main+0x1f4>)
 80013a8:	701a      	strb	r2, [r3, #0]
				  polling500ms++;
 80013aa:	4b64      	ldr	r3, [pc, #400]	; (800153c <main+0x1f8>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b62      	ldr	r3, [pc, #392]	; (800153c <main+0x1f8>)
 80013b4:	801a      	strh	r2, [r3, #0]
				  polling1000ms++;
 80013b6:	4b62      	ldr	r3, [pc, #392]	; (8001540 <main+0x1fc>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b60      	ldr	r3, [pc, #384]	; (8001540 <main+0x1fc>)
 80013c0:	801a      	strh	r2, [r3, #0]
				  polling2000ms++;
 80013c2:	4b60      	ldr	r3, [pc, #384]	; (8001544 <main+0x200>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <main+0x200>)
 80013cc:	801a      	strh	r2, [r3, #0]
				  polling5000ms++;
 80013ce:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <main+0x204>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b5c      	ldr	r3, [pc, #368]	; (8001548 <main+0x204>)
 80013d8:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  if(polling5ms >= 5) {
 80013da:	4b54      	ldr	r3, [pc, #336]	; (800152c <main+0x1e8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d904      	bls.n	80013ec <main+0xa8>
	  			  polling5ms = 0;
 80013e2:	4b52      	ldr	r3, [pc, #328]	; (800152c <main+0x1e8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	  			  task5ms();
 80013e8:	f7ff fc3d 	bl	8000c66 <task5ms>
	  		  }

	  		  if(polling10ms>=10) {
 80013ec:	4b50      	ldr	r3, [pc, #320]	; (8001530 <main+0x1ec>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	d904      	bls.n	80013fe <main+0xba>
	  			  polling10ms = 0;
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <main+0x1ec>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
	  			  task10ms();
 80013fa:	f7ff fc3d 	bl	8000c78 <task10ms>
	  		  }
	  		  if(polling50ms>=50) {
 80013fe:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <main+0x1f0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b31      	cmp	r3, #49	; 0x31
 8001404:	d904      	bls.n	8001410 <main+0xcc>
	  			  polling50ms = 0;
 8001406:	4b4b      	ldr	r3, [pc, #300]	; (8001534 <main+0x1f0>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	  			  task50ms();
 800140c:	f7ff fde0 	bl	8000fd0 <task50ms>
	  		  }
	  		  if(polling100ms>=100) {
 8001410:	4b49      	ldr	r3, [pc, #292]	; (8001538 <main+0x1f4>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b63      	cmp	r3, #99	; 0x63
 8001416:	d904      	bls.n	8001422 <main+0xde>
	  			  polling100ms = 0;
 8001418:	4b47      	ldr	r3, [pc, #284]	; (8001538 <main+0x1f4>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
	  		  	  task100ms();
 800141e:	f7ff fddf 	bl	8000fe0 <task100ms>
	  		  }
	  		  if(polling500ms>=500) {
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <main+0x1f8>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800142a:	d304      	bcc.n	8001436 <main+0xf2>
	  			  polling500ms = 0;
 800142c:	4b43      	ldr	r3, [pc, #268]	; (800153c <main+0x1f8>)
 800142e:	2200      	movs	r2, #0
 8001430:	801a      	strh	r2, [r3, #0]
	  			  task500ms();
 8001432:	f7ff fe1b 	bl	800106c <task500ms>
	  		  }
	  		  if(polling1000ms>=1000) {
 8001436:	4b42      	ldr	r3, [pc, #264]	; (8001540 <main+0x1fc>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800143e:	d304      	bcc.n	800144a <main+0x106>
	  			  polling1000ms = 0;
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <main+0x1fc>)
 8001442:	2200      	movs	r2, #0
 8001444:	801a      	strh	r2, [r3, #0]
	  			  task1000ms();
 8001446:	f7ff fe3d 	bl	80010c4 <task1000ms>
	  		  }
	  		if(polling2000ms>=2000) {
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <main+0x200>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001452:	d304      	bcc.n	800145e <main+0x11a>
				  polling2000ms = 0;
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <main+0x200>)
 8001456:	2200      	movs	r2, #0
 8001458:	801a      	strh	r2, [r3, #0]
				  task2000ms();
 800145a:	f7ff fe3b 	bl	80010d4 <task2000ms>
			  }
	  		if(polling5000ms>=5000) {
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <main+0x204>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	f241 3287 	movw	r2, #4999	; 0x1387
 8001466:	4293      	cmp	r3, r2
 8001468:	f67f af79 	bls.w	800135e <main+0x1a>
				  task5000ms();
 800146c:	f7ff fe4a 	bl	8001104 <task5000ms>
				  if(calibration_check == 2) {
 8001470:	4b36      	ldr	r3, [pc, #216]	; (800154c <main+0x208>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d11a      	bne.n	80014ae <main+0x16a>
					  calibration_close_task();
 8001478:	f7ff fed8 	bl	800122c <calibration_close_task>
					  calibration_check++;
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <main+0x208>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a32      	ldr	r2, [pc, #200]	; (800154c <main+0x208>)
 8001484:	6013      	str	r3, [r2, #0]
					  for(int i = 0; i < TIM2_CNT_NUM; i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	e007      	b.n	800149c <main+0x158>
						save_TIM2[i] = 0;
 800148c:	4a30      	ldr	r2, [pc, #192]	; (8001550 <main+0x20c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2100      	movs	r1, #0
 8001492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  for(int i = 0; i < TIM2_CNT_NUM; i++) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b63      	cmp	r3, #99	; 0x63
 80014a0:	ddf4      	ble.n	800148c <main+0x148>
					 }
					  ProximityReady = xePR_State_Empty;
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <main+0x210>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
					  xeWearState = xeWS_WearInitial;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <main+0x214>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
				  }
				  if(calibration_check == 1) {
 80014ae:	4b27      	ldr	r3, [pc, #156]	; (800154c <main+0x208>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d11a      	bne.n	80014ec <main+0x1a8>
					  calibration_away_task();
 80014b6:	f7ff fe2d 	bl	8001114 <calibration_away_task>
					  calibration_check++;
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <main+0x208>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <main+0x208>)
 80014c2:	6013      	str	r3, [r2, #0]
					  for(int i = 0; i < TIM2_CNT_NUM; i++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	e007      	b.n	80014da <main+0x196>
						  save_TIM2[i] = 0;
 80014ca:	4a21      	ldr	r2, [pc, #132]	; (8001550 <main+0x20c>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2100      	movs	r1, #0
 80014d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  for(int i = 0; i < TIM2_CNT_NUM; i++) {
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b63      	cmp	r3, #99	; 0x63
 80014de:	ddf4      	ble.n	80014ca <main+0x186>
					  }
					  ProximityReady = xePR_State_Empty;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <main+0x210>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
					  xeWearState = xeWS_WearInitial;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <main+0x214>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
				  }
				  polling1ms = HAL_GetTick();
 80014ec:	f000 fc40 	bl	8001d70 <HAL_GetTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <main+0x1e4>)
 80014f4:	6013      	str	r3, [r2, #0]
				  polling5ms = 0;
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <main+0x1e8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
				  polling10ms = 0;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <main+0x1ec>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
				  polling50ms = 0;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <main+0x1f0>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
				  polling100ms = 0;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <main+0x1f4>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
				  polling500ms = 0;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <main+0x1f8>)
 8001510:	2200      	movs	r2, #0
 8001512:	801a      	strh	r2, [r3, #0]
				  polling1000ms = 0;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <main+0x1fc>)
 8001516:	2200      	movs	r2, #0
 8001518:	801a      	strh	r2, [r3, #0]
				  polling2000ms = 0;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <main+0x200>)
 800151c:	2200      	movs	r2, #0
 800151e:	801a      	strh	r2, [r3, #0]
				  polling5000ms = 0;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <main+0x204>)
 8001522:	2200      	movs	r2, #0
 8001524:	801a      	strh	r2, [r3, #0]
	  if(1) {
 8001526:	e71a      	b.n	800135e <main+0x1a>
 8001528:	20000574 	.word	0x20000574
 800152c:	20000578 	.word	0x20000578
 8001530:	20000579 	.word	0x20000579
 8001534:	2000057a 	.word	0x2000057a
 8001538:	2000057b 	.word	0x2000057b
 800153c:	2000057c 	.word	0x2000057c
 8001540:	2000057e 	.word	0x2000057e
 8001544:	20000580 	.word	0x20000580
 8001548:	20000582 	.word	0x20000582
 800154c:	20000004 	.word	0x20000004
 8001550:	200003bc 	.word	0x200003bc
 8001554:	200003a4 	.word	0x200003a4
 8001558:	200003a5 	.word	0x200003a5

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0a6      	sub	sp, #152	; 0x98
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001566:	2228      	movs	r2, #40	; 0x28
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fb5c 	bl	8004c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2258      	movs	r2, #88	; 0x58
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fb4e 	bl	8004c28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158c:	2302      	movs	r3, #2
 800158e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001594:	2310      	movs	r3, #16
 8001596:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80015a8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80015ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fea8 	bl	8002310 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015c6:	f000 f9a1 	bl	800190c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2302      	movs	r3, #2
 80015d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015e4:	2102      	movs	r1, #2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fee6 	bl	80033b8 <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015f2:	f000 f98b 	bl	800190c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <SystemClock_Config+0xc4>)
 80015f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_PLLCLK;
 80015fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4618      	mov	r0, r3
 8001608:	f002 f90c 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001612:	f000 f97b 	bl	800190c <Error_Handler>
  }
}
 8001616:	bf00      	nop
 8001618:	3798      	adds	r7, #152	; 0x98
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	00100002 	.word	0x00100002

08001624 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <MX_TIM2_Init+0xa4>)
 8001644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001648:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_TIM2_Init+0xa4>)
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <MX_TIM2_Init+0xa4>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_TIM2_Init+0xa4>)
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_TIM2_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MX_TIM2_Init+0xa4>)
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166a:	4817      	ldr	r0, [pc, #92]	; (80016c8 <MX_TIM2_Init+0xa4>)
 800166c:	f002 faf8 	bl	8003c60 <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001676:	f000 f949 	bl	800190c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800167a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <MX_TIM2_Init+0xa4>)
 8001694:	f002 fba4 	bl	8003de0 <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800169e:	f000 f935 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_TIM2_Init+0xa4>)
 80016b0:	f002 fd98 	bl	80041e4 <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016ba:	f000 f927 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000200 	.word	0x20000200

080016cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 80016d2:	4a16      	ldr	r2, [pc, #88]	; (800172c <MX_USART2_UART_Init+0x60>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 80016d8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80016dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_USART2_UART_Init+0x5c>)
 8001710:	f002 fdf4 	bl	80042fc <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800171a:	f000 f8f7 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 800171e:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_USART2_UART_Init+0x64>)
 8001720:	f002 faf6 	bl	8003d10 <HAL_TIM_Base_Start>
  /* USER CODE END USART2_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000024c 	.word	0x2000024c
 800172c:	40004400 	.word	0x40004400
 8001730:	20000200 	.word	0x20000200

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_GPIO_Init+0x94>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <MX_GPIO_Init+0x94>)
 8001750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001754:	6153      	str	r3, [r2, #20]
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_GPIO_Init+0x94>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_GPIO_Init+0x94>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <MX_GPIO_Init+0x94>)
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	6153      	str	r3, [r2, #20]
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_GPIO_Init+0x94>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2120      	movs	r1, #32
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f000 fdad 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <MX_GPIO_Init+0x98>)
 800179c:	f000 fbfe 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017a0:	2320      	movs	r3, #32
 80017a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f000 fbef 	bl	8001f9c <HAL_GPIO_Init>

}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000800 	.word	0x48000800

080017d0 <ffnPostAvg_0d05>:

/* USER CODE BEGIN 4 */
float ffnPostAvg_0d05(float u32Input) {
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	ed87 0a01 	vstr	s0, [r7, #4]
	static float fsaveFreq = 0.0;
		   float fcurrFreq = 0.0;
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]

	const float postAVGweight = (0.05);
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <ffnPostAvg_0d05+0x5c>)
 80017e2:	60bb      	str	r3, [r7, #8]

	fcurrFreq = u32Input;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
	fsaveFreq = fsaveFreq*(1-postAVGweight) + fcurrFreq*(postAVGweight);
 80017e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <ffnPostAvg_0d05+0x60>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fe:	edd7 6a03 	vldr	s13, [r7, #12]
 8001802:	edd7 7a02 	vldr	s15, [r7, #8]
 8001806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <ffnPostAvg_0d05+0x60>)
 8001810:	edc3 7a00 	vstr	s15, [r3]

	return fsaveFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <ffnPostAvg_0d05+0x60>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	ee07 3a90 	vmov	s15, r3
}
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	3d4ccccd 	.word	0x3d4ccccd
 8001830:	20000584 	.word	0x20000584

08001834 <ffnPostAvg_0d25>:

float ffnPostAvg_0d25(float u32Input) {
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	ed87 0a01 	vstr	s0, [r7, #4]
	static float fsaveFreq = 0.0;
		   float fcurrFreq = 0.0;
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]

	const float postAVGweight = (0.25);
 8001844:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8001848:	60bb      	str	r3, [r7, #8]

	fcurrFreq = u32Input;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60fb      	str	r3, [r7, #12]
	fsaveFreq = fsaveFreq*(1-postAVGweight) + fcurrFreq*(postAVGweight);
 800184e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001852:	edd7 7a02 	vldr	s15, [r7, #8]
 8001856:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <ffnPostAvg_0d25+0x5c>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001864:	edd7 6a03 	vldr	s13, [r7, #12]
 8001868:	edd7 7a02 	vldr	s15, [r7, #8]
 800186c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <ffnPostAvg_0d25+0x5c>)
 8001876:	edc3 7a00 	vstr	s15, [r3]

	return fsaveFreq;
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <ffnPostAvg_0d25+0x5c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	ee07 3a90 	vmov	s15, r3
}
 8001882:	eeb0 0a67 	vmov.f32	s0, s15
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000588 	.word	0x20000588

08001894 <present_freq>:

float present_freq(uint32_t u32Input) {
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	static float fsaveFreq = 0.0;
		   float fcurrFreq = 0.0;
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]

	const int weight = 100;
 80018a2:	2364      	movs	r3, #100	; 0x64
 80018a4:	60bb      	str	r3, [r7, #8]

	fcurrFreq = u32Input;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b0:	edc7 7a03 	vstr	s15, [r7, #12]
	fsaveFreq =  fcurrFreq*weight;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018be:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <present_freq+0x50>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]

	return fsaveFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <present_freq+0x50>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	ee07 3a90 	vmov	s15, r3
}
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	2000058c 	.word	0x2000058c

080018e8 <avg_freq>:

uint32_t avg_freq(uint32_t u32Input) {
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	static float fsaveFreq = 0.0;
		   float fcurrFreq = 0.0;
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]

	const float postAVGweight = (0.05);
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <avg_freq+0x20>)
 80018f8:	60bb      	str	r3, [r7, #8]

//	fcurrFreq = u32Input;
//	fsaveFreq = fsaveFreq*(1-postAVGweight) + fcurrFreq*(postAVGweight);

	return u32Input;
 80018fa:	687b      	ldr	r3, [r7, #4]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	3d4ccccd 	.word	0x3d4ccccd

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	e7fe      	b.n	8001914 <Error_Handler+0x8>
	...

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_MspInit+0x44>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_MspInit+0x44>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6193      	str	r3, [r2, #24]
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_MspInit+0x44>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_MspInit+0x44>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_MspInit+0x44>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_MspInit+0x44>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001980:	d128      	bne.n	80019d4 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_TIM_Base_MspInit+0x7c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a15      	ldr	r2, [pc, #84]	; (80019dc <HAL_TIM_Base_MspInit+0x7c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_TIM_Base_MspInit+0x7c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_TIM_Base_MspInit+0x7c>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_TIM_Base_MspInit+0x7c>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6153      	str	r3, [r2, #20]
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_TIM_Base_MspInit+0x7c>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b2:	2301      	movs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019c2:	2301      	movs	r3, #1
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f000 fae4 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_UART_MspInit+0x7c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d128      	bne.n	8001a54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	6153      	str	r3, [r2, #20]
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a32:	230c      	movs	r3, #12
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a42:	2307      	movs	r3, #7
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f000 faa4 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40004400 	.word	0x40004400
 8001a60:	40021000 	.word	0x40021000

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f000 f94a 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <_kill>:

int _kill(int pid, int sig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ad2:	f003 f87f 	bl	8004bd4 <__errno>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2216      	movs	r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
	return -1;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_exit>:

void _exit (int status)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ffe7 	bl	8001ac8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001afa:	e7fe      	b.n	8001afa <_exit+0x12>

08001afc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e00a      	b.n	8001b24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b0e:	f3af 8000 	nop.w
 8001b12:	4601      	mov	r1, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	60ba      	str	r2, [r7, #8]
 8001b1a:	b2ca      	uxtb	r2, r1
 8001b1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbf0      	blt.n	8001b0e <_read+0x12>
	}

return len;
 8001b2c:	687b      	ldr	r3, [r7, #4]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e009      	b.n	8001b5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dbf1      	blt.n	8001b48 <_write+0x12>
	}
	return len;
 8001b64:	687b      	ldr	r3, [r7, #4]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_close>:

int _close(int file)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
	return -1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b96:	605a      	str	r2, [r3, #4]
	return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_isatty>:

int _isatty(int file)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
	return 1;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f002 ffe4 	bl	8004bd4 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20010000 	.word	0x20010000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	20000590 	.word	0x20000590
 8001c40:	200005a8 	.word	0x200005a8

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c6e:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <LoopForever+0xe>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c84:	4c0b      	ldr	r4, [pc, #44]	; (8001cb4 <LoopForever+0x16>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c92:	f7ff ffd7 	bl	8001c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f002 ffa3 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9a:	f7ff fb53 	bl	8001344 <main>

08001c9e <LoopForever>:

LoopForever:
    b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ca0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001cac:	08008e00 	.word	0x08008e00
  ldr r2, =_sbss
 8001cb0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001cb4:	200005a8 	.word	0x200005a8

08001cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_2_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_Init+0x28>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_Init+0x28>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 f931 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	200f      	movs	r0, #15
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fe1e 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f93b 	bl	8001f82 <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 f911 	bl	8001f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000010 	.word	0x20000010
 8001d44:	2000000c 	.word	0x2000000c

08001d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	20000594 	.word	0x20000594

08001d70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000594 	.word	0x20000594

08001d88 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000010 	.word	0x20000010

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e02:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff47 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff5c 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffb0 	bl	8001ef0 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	e160      	b.n	800226e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8152 	beq.w	8002268 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d005      	beq.n	8001fdc <HAL_GPIO_Init+0x40>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d130      	bne.n	800203e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002012:	2201      	movs	r2, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 0201 	and.w	r2, r3, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b03      	cmp	r3, #3
 8002048:	d017      	beq.n	800207a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d123      	bne.n	80020ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	6939      	ldr	r1, [r7, #16]
 80020ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0203 	and.w	r2, r3, #3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80ac 	beq.w	8002268 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002110:	4b5e      	ldr	r3, [pc, #376]	; (800228c <HAL_GPIO_Init+0x2f0>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4a5d      	ldr	r2, [pc, #372]	; (800228c <HAL_GPIO_Init+0x2f0>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6193      	str	r3, [r2, #24]
 800211c:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_GPIO_Init+0x2f0>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002128:	4a59      	ldr	r2, [pc, #356]	; (8002290 <HAL_GPIO_Init+0x2f4>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002152:	d025      	beq.n	80021a0 <HAL_GPIO_Init+0x204>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a4f      	ldr	r2, [pc, #316]	; (8002294 <HAL_GPIO_Init+0x2f8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d01f      	beq.n	800219c <HAL_GPIO_Init+0x200>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a4e      	ldr	r2, [pc, #312]	; (8002298 <HAL_GPIO_Init+0x2fc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d019      	beq.n	8002198 <HAL_GPIO_Init+0x1fc>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a4d      	ldr	r2, [pc, #308]	; (800229c <HAL_GPIO_Init+0x300>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_GPIO_Init+0x1f8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a4c      	ldr	r2, [pc, #304]	; (80022a0 <HAL_GPIO_Init+0x304>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00d      	beq.n	8002190 <HAL_GPIO_Init+0x1f4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a4b      	ldr	r2, [pc, #300]	; (80022a4 <HAL_GPIO_Init+0x308>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <HAL_GPIO_Init+0x1f0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_GPIO_Init+0x1ec>
 8002184:	2306      	movs	r3, #6
 8002186:	e00c      	b.n	80021a2 <HAL_GPIO_Init+0x206>
 8002188:	2307      	movs	r3, #7
 800218a:	e00a      	b.n	80021a2 <HAL_GPIO_Init+0x206>
 800218c:	2305      	movs	r3, #5
 800218e:	e008      	b.n	80021a2 <HAL_GPIO_Init+0x206>
 8002190:	2304      	movs	r3, #4
 8002192:	e006      	b.n	80021a2 <HAL_GPIO_Init+0x206>
 8002194:	2303      	movs	r3, #3
 8002196:	e004      	b.n	80021a2 <HAL_GPIO_Init+0x206>
 8002198:	2302      	movs	r3, #2
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0x206>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_GPIO_Init+0x206>
 80021a0:	2300      	movs	r3, #0
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	f002 0203 	and.w	r2, r2, #3
 80021a8:	0092      	lsls	r2, r2, #2
 80021aa:	4093      	lsls	r3, r2
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021b2:	4937      	ldr	r1, [pc, #220]	; (8002290 <HAL_GPIO_Init+0x2f4>)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3302      	adds	r3, #2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c0:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <HAL_GPIO_Init+0x310>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021e4:	4a31      	ldr	r2, [pc, #196]	; (80022ac <HAL_GPIO_Init+0x310>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021ea:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_GPIO_Init+0x310>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800220e:	4a27      	ldr	r2, [pc, #156]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002238:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <HAL_GPIO_Init+0x310>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3301      	adds	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	f47f ae97 	bne.w	8001fac <HAL_GPIO_Init+0x10>
  }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	40021000 	.word	0x40021000
 8002290:	40010000 	.word	0x40010000
 8002294:	48000400 	.word	0x48000400
 8002298:	48000800 	.word	0x48000800
 800229c:	48000c00 	.word	0x48000c00
 80022a0:	48001000 	.word	0x48001000
 80022a4:	48001400 	.word	0x48001400
 80022a8:	48001800 	.word	0x48001800
 80022ac:	40010400 	.word	0x40010400

080022b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e001      	b.n	80022d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f0:	787b      	ldrb	r3, [r7, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002316:	af00      	add	r7, sp, #0
 8002318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002320:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002326:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f001 b83a 	b.w	80033aa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 816f 	beq.w	800262a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800234c:	4bb5      	ldr	r3, [pc, #724]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b04      	cmp	r3, #4
 8002356:	d00c      	beq.n	8002372 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002358:	4bb2      	ldr	r3, [pc, #712]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d15c      	bne.n	800241e <HAL_RCC_OscConfig+0x10e>
 8002364:	4baf      	ldr	r3, [pc, #700]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d155      	bne.n	800241e <HAL_RCC_OscConfig+0x10e>
 8002372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002376:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002386:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_OscConfig+0x94>
 800239e:	4ba1      	ldr	r3, [pc, #644]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e015      	b.n	80023d0 <HAL_RCC_OscConfig+0xc0>
 80023a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80023b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023bc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023c0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023cc:	4b95      	ldr	r3, [pc, #596]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80023d8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80023e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	f042 0220 	orr.w	r2, r2, #32
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f002 021f 	and.w	r2, r2, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8111 	beq.w	8002628 <HAL_RCC_OscConfig+0x318>
 8002406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 8108 	bne.w	8002628 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f000 bfc6 	b.w	80033aa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002422:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x12e>
 8002430:	4b7c      	ldr	r3, [pc, #496]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a7b      	ldr	r2, [pc, #492]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	e036      	b.n	80024ac <HAL_RCC_OscConfig+0x19c>
 800243e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002442:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x158>
 800244e:	4b75      	ldr	r3, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a74      	ldr	r2, [pc, #464]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b72      	ldr	r3, [pc, #456]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a71      	ldr	r2, [pc, #452]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e021      	b.n	80024ac <HAL_RCC_OscConfig+0x19c>
 8002468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x184>
 800247a:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a69      	ldr	r2, [pc, #420]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a66      	ldr	r2, [pc, #408]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0x19c>
 8002494:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a62      	ldr	r2, [pc, #392]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b60      	ldr	r3, [pc, #384]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a5f      	ldr	r2, [pc, #380]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d059      	beq.n	8002570 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff fc58 	bl	8001d70 <HAL_GetTick>
 80024c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c6:	f7ff fc53 	bl	8001d70 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d902      	bls.n	80024dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	f000 bf67 	b.w	80033aa <HAL_RCC_OscConfig+0x109a>
 80024dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80024f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d102      	bne.n	800250e <HAL_RCC_OscConfig+0x1fe>
 8002508:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e015      	b.n	800253a <HAL_RCC_OscConfig+0x22a>
 800250e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002512:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002526:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800252a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800253e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002542:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002546:	fa92 f2a2 	rbit	r2, r2
 800254a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800254e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f042 0220 	orr.w	r2, r2, #32
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f002 021f 	and.w	r2, r2, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0ab      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1b6>
 800256e:	e05c      	b.n	800262a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff fbfe 	bl	8001d70 <HAL_GetTick>
 8002574:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257a:	f7ff fbf9 	bl	8001d70 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d902      	bls.n	8002590 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	f000 bf0d 	b.w	80033aa <HAL_RCC_OscConfig+0x109a>
 8002590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002594:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80025a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d102      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2b2>
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x2de>
 80025c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80025d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_RCC_OscConfig+0x314>)
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80025f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80025fa:	fa92 f2a2 	rbit	r2, r2
 80025fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002602:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002606:	fab2 f282 	clz	r2, r2
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f042 0220 	orr.w	r2, r2, #32
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	f002 021f 	and.w	r2, r2, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f202 	lsl.w	r2, r1, r2
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ab      	bne.n	800257a <HAL_RCC_OscConfig+0x26a>
 8002622:	e002      	b.n	800262a <HAL_RCC_OscConfig+0x31a>
 8002624:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 817f 	beq.w	800293e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002640:	4ba7      	ldr	r3, [pc, #668]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00c      	beq.n	8002666 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800264c:	4ba4      	ldr	r3, [pc, #656]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d173      	bne.n	8002740 <HAL_RCC_OscConfig+0x430>
 8002658:	4ba1      	ldr	r3, [pc, #644]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002664:	d16c      	bne.n	8002740 <HAL_RCC_OscConfig+0x430>
 8002666:	2302      	movs	r3, #2
 8002668:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002678:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d102      	bne.n	8002696 <HAL_RCC_OscConfig+0x386>
 8002690:	4b93      	ldr	r3, [pc, #588]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	e013      	b.n	80026be <HAL_RCC_OscConfig+0x3ae>
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80026a8:	2302      	movs	r3, #2
 80026aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026ba:	4b89      	ldr	r3, [pc, #548]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	2202      	movs	r2, #2
 80026c0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80026c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80026c8:	fa92 f2a2 	rbit	r2, r2
 80026cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80026d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026d4:	fab2 f282 	clz	r2, r2
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f042 0220 	orr.w	r2, r2, #32
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f002 021f 	and.w	r2, r2, #31
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCC_OscConfig+0x3f6>
 80026f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d002      	beq.n	8002706 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f000 be52 	b.w	80033aa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002712:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	21f8      	movs	r1, #248	; 0xf8
 800271c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002724:	fa91 f1a1 	rbit	r1, r1
 8002728:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800272c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002730:	fab1 f181 	clz	r1, r1
 8002734:	b2c9      	uxtb	r1, r1
 8002736:	408b      	lsls	r3, r1
 8002738:	4969      	ldr	r1, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	e0fe      	b.n	800293e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002744:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8088 	beq.w	8002862 <HAL_RCC_OscConfig+0x552>
 8002752:	2301      	movs	r3, #1
 8002754:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002764:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002772:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	461a      	mov	r2, r3
 800277a:	2301      	movs	r3, #1
 800277c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7ff faf7 	bl	8001d70 <HAL_GetTick>
 8002782:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002788:	f7ff faf2 	bl	8001d70 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d902      	bls.n	800279e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	f000 be06 	b.w	80033aa <HAL_RCC_OscConfig+0x109a>
 800279e:	2302      	movs	r3, #2
 80027a0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80027b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_OscConfig+0x4be>
 80027c8:	4b45      	ldr	r3, [pc, #276]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	e013      	b.n	80027f6 <HAL_RCC_OscConfig+0x4e6>
 80027ce:	2302      	movs	r3, #2
 80027d0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80027e0:	2302      	movs	r3, #2
 80027e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2202      	movs	r2, #2
 80027f8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80027fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002800:	fa92 f2a2 	rbit	r2, r2
 8002804:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002808:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800280c:	fab2 f282 	clz	r2, r2
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f042 0220 	orr.w	r2, r2, #32
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f002 021f 	and.w	r2, r2, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0af      	beq.n	8002788 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002834:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	21f8      	movs	r1, #248	; 0xf8
 800283e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002846:	fa91 f1a1 	rbit	r1, r1
 800284a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800284e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002852:	fab1 f181 	clz	r1, r1
 8002856:	b2c9      	uxtb	r1, r1
 8002858:	408b      	lsls	r3, r1
 800285a:	4921      	ldr	r1, [pc, #132]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	e06d      	b.n	800293e <HAL_RCC_OscConfig+0x62e>
 8002862:	2301      	movs	r3, #1
 8002864:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002874:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002882:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	461a      	mov	r2, r3
 800288a:	2300      	movs	r3, #0
 800288c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7ff fa6f 	bl	8001d70 <HAL_GetTick>
 8002892:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002898:	f7ff fa6a 	bl	8001d70 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d902      	bls.n	80028ae <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f000 bd7e 	b.w	80033aa <HAL_RCC_OscConfig+0x109a>
 80028ae:	2302      	movs	r3, #2
 80028b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80028c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_RCC_OscConfig+0x5d4>
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <HAL_RCC_OscConfig+0x5d0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e016      	b.n	800290c <HAL_RCC_OscConfig+0x5fc>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	2302      	movs	r3, #2
 80028e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002908:	4bbf      	ldr	r3, [pc, #764]	; (8002c08 <HAL_RCC_OscConfig+0x8f8>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	2202      	movs	r2, #2
 800290e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002912:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002916:	fa92 f2a2 	rbit	r2, r2
 800291a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800291e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002922:	fab2 f282 	clz	r2, r2
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	f002 021f 	and.w	r2, r2, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1ac      	bne.n	8002898 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002942:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8113 	beq.w	8002b7a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002958:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d07c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x74e>
 8002964:	2301      	movs	r3, #1
 8002966:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002976:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4ba2      	ldr	r3, [pc, #648]	; (8002c0c <HAL_RCC_OscConfig+0x8fc>)
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	461a      	mov	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7ff f9ef 	bl	8001d70 <HAL_GetTick>
 8002992:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7ff f9ea 	bl	8001d70 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d902      	bls.n	80029ae <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	f000 bcfe 	b.w	80033aa <HAL_RCC_OscConfig+0x109a>
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	4b7e      	ldr	r3, [pc, #504]	; (8002c08 <HAL_RCC_OscConfig+0x8f8>)
 8002a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	6019      	str	r1, [r3, #0]
 8002a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f1a3 	rbit	r1, r3
 8002a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a34:	6019      	str	r1, [r3, #0]
  return result;
 8002a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d09d      	beq.n	8002998 <HAL_RCC_OscConfig+0x688>
 8002a5c:	e08d      	b.n	8002b7a <HAL_RCC_OscConfig+0x86a>
 8002a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a80:	601a      	str	r2, [r3, #0]
  return result;
 8002a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a8a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_RCC_OscConfig+0x8fc>)
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa0:	f7ff f966 	bl	8001d70 <HAL_GetTick>
 8002aa4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7ff f961 	bl	8001d70 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d902      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	f000 bc75 	b.w	80033aa <HAL_RCC_OscConfig+0x109a>
 8002ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ac8:	2202      	movs	r2, #2
 8002aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ade:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002aec:	2202      	movs	r2, #2
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b2a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCC_OscConfig+0x8f8>)
 8002b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b38:	2102      	movs	r1, #2
 8002b3a:	6019      	str	r1, [r3, #0]
 8002b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fa93 f1a3 	rbit	r1, r3
 8002b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b52:	6019      	str	r1, [r3, #0]
  return result;
 8002b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d197      	bne.n	8002aaa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 81a5 	beq.w	8002eda <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_RCC_OscConfig+0x8f8>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_RCC_OscConfig+0x8f8>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <HAL_RCC_OscConfig+0x8f8>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	61d3      	str	r3, [r2, #28]
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <HAL_RCC_OscConfig+0x8f8>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <HAL_RCC_OscConfig+0x900>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d121      	bne.n	8002c20 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_RCC_OscConfig+0x900>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x900>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be8:	f7ff f8c2 	bl	8001d70 <HAL_GetTick>
 8002bec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	e010      	b.n	8002c14 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf2:	f7ff f8bd 	bl	8001d70 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d908      	bls.n	8002c14 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e3d1      	b.n	80033aa <HAL_RCC_OscConfig+0x109a>
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	10908120 	.word	0x10908120
 8002c10:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b8d      	ldr	r3, [pc, #564]	; (8002e4c <HAL_RCC_OscConfig+0xb3c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0e8      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x92e>
 8002c30:	4b87      	ldr	r3, [pc, #540]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	4a86      	ldr	r2, [pc, #536]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e035      	b.n	8002caa <HAL_RCC_OscConfig+0x99a>
 8002c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x958>
 8002c4e:	4b80      	ldr	r3, [pc, #512]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4a7f      	ldr	r2, [pc, #508]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6213      	str	r3, [r2, #32]
 8002c5a:	4b7d      	ldr	r3, [pc, #500]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4a7c      	ldr	r2, [pc, #496]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	6213      	str	r3, [r2, #32]
 8002c66:	e020      	b.n	8002caa <HAL_RCC_OscConfig+0x99a>
 8002c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	d10c      	bne.n	8002c92 <HAL_RCC_OscConfig+0x982>
 8002c78:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a74      	ldr	r2, [pc, #464]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	6213      	str	r3, [r2, #32]
 8002c84:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	e00b      	b.n	8002caa <HAL_RCC_OscConfig+0x99a>
 8002c92:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4a6e      	ldr	r2, [pc, #440]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6213      	str	r3, [r2, #32]
 8002c9e:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4a6b      	ldr	r2, [pc, #428]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8081 	beq.w	8002dbe <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7ff f858 	bl	8001d70 <HAL_GetTick>
 8002cc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00b      	b.n	8002cde <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7ff f853 	bl	8001d70 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e365      	b.n	80033aa <HAL_RCC_OscConfig+0x109a>
 8002cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d24:	601a      	str	r2, [r3, #0]
  return result;
 8002d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d2a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d102      	bne.n	8002d4a <HAL_RCC_OscConfig+0xa3a>
 8002d44:	4b42      	ldr	r3, [pc, #264]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	e013      	b.n	8002d72 <HAL_RCC_OscConfig+0xa62>
 8002d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d52:	2202      	movs	r2, #2
 8002d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d68:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d76:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	6011      	str	r1, [r2, #0]
 8002d7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d82:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	fa92 f1a2 	rbit	r1, r2
 8002d8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d90:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002d94:	6011      	str	r1, [r2, #0]
  return result;
 8002d96:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d9a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d084      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x9b6>
 8002dbc:	e083      	b.n	8002ec6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7fe ffd7 	bl	8001d70 <HAL_GetTick>
 8002dc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe ffd2 	bl	8001d70 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e2e4      	b.n	80033aa <HAL_RCC_OscConfig+0x109a>
 8002de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002de8:	2202      	movs	r2, #2
 8002dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fa93 f2a3 	rbit	r2, r3
 8002dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e08:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e14:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	fa93 f2a3 	rbit	r2, r3
 8002e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e26:	601a      	str	r2, [r3, #0]
  return result;
 8002e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d106      	bne.n	8002e54 <HAL_RCC_OscConfig+0xb44>
 8002e46:	4b02      	ldr	r3, [pc, #8]	; (8002e50 <HAL_RCC_OscConfig+0xb40>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	e017      	b.n	8002e7c <HAL_RCC_OscConfig+0xb6c>
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	40021000 	.word	0x40021000
 8002e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e58:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e64:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e72:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	4bb3      	ldr	r3, [pc, #716]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e80:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e84:	2102      	movs	r1, #2
 8002e86:	6011      	str	r1, [r2, #0]
 8002e88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e8c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	fa92 f1a2 	rbit	r1, r2
 8002e96:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e9a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002e9e:	6011      	str	r1, [r2, #0]
  return result;
 8002ea0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ea4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	fab2 f282 	clz	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f002 021f 	and.w	r2, r2, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d180      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ec6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d105      	bne.n	8002eda <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ece:	4b9e      	ldr	r3, [pc, #632]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	4a9d      	ldr	r2, [pc, #628]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8002ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ede:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 825e 	beq.w	80033a8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eec:	4b96      	ldr	r3, [pc, #600]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	f000 821f 	beq.w	8003338 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002efe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	f040 8170 	bne.w	80031ec <HAL_RCC_OscConfig+0xedc>
 8002f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	fa93 f2a3 	rbit	r2, r3
 8002f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f30:	601a      	str	r2, [r3, #0]
  return result;
 8002f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f36:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f3a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2300      	movs	r3, #0
 8002f50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7fe ff0d 	bl	8001d70 <HAL_GetTick>
 8002f56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5a:	e009      	b.n	8002f70 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe ff08 	bl	8001d70 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e21c      	b.n	80033aa <HAL_RCC_OscConfig+0x109a>
 8002f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f82:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f94:	601a      	str	r2, [r3, #0]
  return result;
 8002f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f9a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_OscConfig+0xcaa>
 8002fb4:	4b64      	ldr	r3, [pc, #400]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	e027      	b.n	800300a <HAL_RCC_OscConfig+0xcfa>
 8002fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fcc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fa93 f2a3 	rbit	r2, r3
 8002fd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fda:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002fe8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003000:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800300e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003012:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003016:	6011      	str	r1, [r2, #0]
 8003018:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800301c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	fa92 f1a2 	rbit	r1, r2
 8003026:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800302a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800302e:	6011      	str	r1, [r2, #0]
  return result;
 8003030:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003034:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	fab2 f282 	clz	r2, r2
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f042 0220 	orr.w	r2, r2, #32
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f002 021f 	and.w	r2, r2, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f202 	lsl.w	r2, r1, r2
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d182      	bne.n	8002f5c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003056:	4b3c      	ldr	r3, [pc, #240]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f023 020f 	bic.w	r2, r3, #15
 800305e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003062:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	4937      	ldr	r1, [pc, #220]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 800306c:	4313      	orrs	r3, r2
 800306e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003070:	4b35      	ldr	r3, [pc, #212]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800307c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a19      	ldr	r1, [r3, #32]
 8003084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003088:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	430b      	orrs	r3, r1
 8003092:	492d      	ldr	r1, [pc, #180]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fa93 f2a3 	rbit	r2, r3
 80030b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030bc:	601a      	str	r2, [r3, #0]
  return result;
 80030be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030c6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	461a      	mov	r2, r3
 80030da:	2301      	movs	r3, #1
 80030dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fe47 	bl	8001d70 <HAL_GetTick>
 80030e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e6:	e009      	b.n	80030fc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe fe42 	bl	8001d70 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e156      	b.n	80033aa <HAL_RCC_OscConfig+0x109a>
 80030fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003100:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800310e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fa93 f2a3 	rbit	r2, r3
 8003118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800311c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003120:	601a      	str	r2, [r3, #0]
  return result;
 8003122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003126:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800312a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCC_OscConfig+0xe3c>
 8003140:	4b01      	ldr	r3, [pc, #4]	; (8003148 <HAL_RCC_OscConfig+0xe38>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	e02a      	b.n	800319c <HAL_RCC_OscConfig+0xe8c>
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003150:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f2a3 	rbit	r2, r3
 8003168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800316c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003176:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800317a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003184:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	fa93 f2a3 	rbit	r2, r3
 800318e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003192:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	4b86      	ldr	r3, [pc, #536]	; (80033b4 <HAL_RCC_OscConfig+0x10a4>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031a0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031a8:	6011      	str	r1, [r2, #0]
 80031aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031ae:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fa92 f1a2 	rbit	r1, r2
 80031b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031bc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80031c0:	6011      	str	r1, [r2, #0]
  return result;
 80031c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031c6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	fab2 f282 	clz	r2, r2
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	f042 0220 	orr.w	r2, r2, #32
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f002 021f 	and.w	r2, r2, #31
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f202 	lsl.w	r2, r1, r2
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f43f af7f 	beq.w	80030e8 <HAL_RCC_OscConfig+0xdd8>
 80031ea:	e0dd      	b.n	80033a8 <HAL_RCC_OscConfig+0x1098>
 80031ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	fa93 f2a3 	rbit	r2, r3
 8003208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800320c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003210:	601a      	str	r2, [r3, #0]
  return result;
 8003212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003216:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800321a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003226:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	461a      	mov	r2, r3
 800322e:	2300      	movs	r3, #0
 8003230:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fd9d 	bl	8001d70 <HAL_GetTick>
 8003236:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323a:	e009      	b.n	8003250 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe fd98 	bl	8001d70 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0ac      	b.n	80033aa <HAL_RCC_OscConfig+0x109a>
 8003250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003254:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800325c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003262:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	fa93 f2a3 	rbit	r2, r3
 800326c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003270:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003274:	601a      	str	r2, [r3, #0]
  return result;
 8003276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800327a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800327e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <HAL_RCC_OscConfig+0xf8a>
 8003294:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_OscConfig+0x10a4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	e027      	b.n	80032ea <HAL_RCC_OscConfig+0xfda>
 800329a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f2a3 	rbit	r2, r3
 80032b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <HAL_RCC_OscConfig+0x10a4>)
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032ee:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032f6:	6011      	str	r1, [r2, #0]
 80032f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032fc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	fa92 f1a2 	rbit	r1, r2
 8003306:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800330a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800330e:	6011      	str	r1, [r2, #0]
  return result;
 8003310:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003314:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	fab2 f282 	clz	r2, r2
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f042 0220 	orr.w	r2, r2, #32
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	f002 021f 	and.w	r2, r2, #31
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f202 	lsl.w	r2, r1, r2
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d182      	bne.n	800323c <HAL_RCC_OscConfig+0xf2c>
 8003336:	e037      	b.n	80033a8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800333c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e02e      	b.n	80033aa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_OscConfig+0x10a4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <HAL_RCC_OscConfig+0x10a4>)
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800335c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003360:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003368:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	429a      	cmp	r2, r3
 8003372:	d117      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003374:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003378:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800337c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003380:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003388:	429a      	cmp	r2, r3
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800338c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003398:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b09e      	sub	sp, #120	; 0x78
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e162      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b90      	ldr	r3, [pc, #576]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d910      	bls.n	8003400 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b8d      	ldr	r3, [pc, #564]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	498b      	ldr	r1, [pc, #556]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b89      	ldr	r3, [pc, #548]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e14a      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	497f      	ldr	r1, [pc, #508]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80dc 	beq.w	80035e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d13c      	bne.n	80034ae <HAL_RCC_ClockConfig+0xf6>
 8003434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003438:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003444:	fab3 f383 	clz	r3, r3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d102      	bne.n	800345e <HAL_RCC_ClockConfig+0xa6>
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	e00f      	b.n	800347e <HAL_RCC_ClockConfig+0xc6>
 800345e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003462:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	667b      	str	r3, [r7, #100]	; 0x64
 800346c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003470:	663b      	str	r3, [r7, #96]	; 0x60
 8003472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347a:	4b67      	ldr	r3, [pc, #412]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003482:	65ba      	str	r2, [r7, #88]	; 0x58
 8003484:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003486:	fa92 f2a2 	rbit	r2, r2
 800348a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800348c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d17b      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0f3      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d13c      	bne.n	8003530 <HAL_RCC_ClockConfig+0x178>
 80034b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x128>
 80034da:	4b4f      	ldr	r3, [pc, #316]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e00f      	b.n	8003500 <HAL_RCC_ClockConfig+0x148>
 80034e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
 80034ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fc:	4b46      	ldr	r3, [pc, #280]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003504:	63ba      	str	r2, [r7, #56]	; 0x38
 8003506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003508:	fa92 f2a2 	rbit	r2, r2
 800350c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800350e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f042 0220 	orr.w	r2, r2, #32
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f002 021f 	and.w	r2, r2, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d13a      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b2      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
 8003530:	2302      	movs	r3, #2
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_RCC_ClockConfig+0x1a0>
 8003552:	4b31      	ldr	r3, [pc, #196]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e00d      	b.n	8003574 <HAL_RCC_ClockConfig+0x1bc>
 8003558:	2302      	movs	r3, #2
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
 8003564:	2302      	movs	r3, #2
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	4b29      	ldr	r3, [pc, #164]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2202      	movs	r2, #2
 8003576:	61ba      	str	r2, [r7, #24]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	fa92 f2a2 	rbit	r2, r2
 800357e:	617a      	str	r2, [r7, #20]
  return result;
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	fab2 f282 	clz	r2, r2
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f042 0220 	orr.w	r2, r2, #32
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f002 021f 	and.w	r2, r2, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e079      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	491a      	ldr	r1, [pc, #104]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fe fbdc 	bl	8001d70 <HAL_GetTick>
 80035b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fe fbd8 	bl	8001d70 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e061      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_RCC_ClockConfig+0x260>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d214      	bcs.n	800361c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4906      	ldr	r1, [pc, #24]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_RCC_ClockConfig+0x25c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e040      	b.n	8003696 <HAL_RCC_ClockConfig+0x2de>
 8003614:	40022000 	.word	0x40022000
 8003618:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	491a      	ldr	r1, [pc, #104]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003636:	4313      	orrs	r3, r2
 8003638:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4912      	ldr	r1, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800365a:	f000 f829 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800365e:	4601      	mov	r1, r0
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003668:	22f0      	movs	r2, #240	; 0xf0
 800366a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	fa92 f2a2 	rbit	r2, r2
 8003672:	60fa      	str	r2, [r7, #12]
  return result;
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	fab2 f282 	clz	r2, r2
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	40d3      	lsrs	r3, r2
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
 8003682:	fa21 f303 	lsr.w	r3, r1, r3
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_RCC_ClockConfig+0x2f4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fb2a 	bl	8001ce8 <HAL_InitTick>
  
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3778      	adds	r7, #120	; 0x78
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	080089b0 	.word	0x080089b0
 80036a8:	20000008 	.word	0x20000008
 80036ac:	2000000c 	.word	0x2000000c

080036b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b08b      	sub	sp, #44	; 0x2c
 80036b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x30>
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x36>
 80036de:	e03f      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc8>)
 80036e2:	623b      	str	r3, [r7, #32]
      break;
 80036e4:	e03f      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	fa92 f2a2 	rbit	r2, r2
 80036f8:	607a      	str	r2, [r7, #4]
  return result;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	40d3      	lsrs	r3, r2
 8003704:	4a1d      	ldr	r2, [pc, #116]	; (800377c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003706:	5cd3      	ldrb	r3, [r2, r3]
 8003708:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800370a:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_RCC_GetSysClockFreq+0xc4>)
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	220f      	movs	r2, #15
 8003714:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	fa92 f2a2 	rbit	r2, r2
 800371c:	60fa      	str	r2, [r7, #12]
  return result;
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	40d3      	lsrs	r3, r2
 8003728:	4a15      	ldr	r2, [pc, #84]	; (8003780 <HAL_RCC_GetSysClockFreq+0xd0>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003738:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc8>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
 8003748:	e007      	b.n	800375a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800374a:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc8>)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	623b      	str	r3, [r7, #32]
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003762:	623b      	str	r3, [r7, #32]
      break;
 8003764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003766:	6a3b      	ldr	r3, [r7, #32]
}
 8003768:	4618      	mov	r0, r3
 800376a:	372c      	adds	r7, #44	; 0x2c
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40021000 	.word	0x40021000
 8003778:	007a1200 	.word	0x007a1200
 800377c:	080089c8 	.word	0x080089c8
 8003780:	080089d8 	.word	0x080089d8

08003784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_RCC_GetHCLKFreq+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000008 	.word	0x20000008

0800379c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037a2:	f7ff ffef 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a6:	4601      	mov	r1, r0
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	fa92 f2a2 	rbit	r2, r2
 80037bc:	603a      	str	r2, [r7, #0]
  return result;
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	fab2 f282 	clz	r2, r2
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	40d3      	lsrs	r3, r2
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	080089c0 	.word	0x080089c0

080037e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037e6:	f7ff ffcd 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037ea:	4601      	mov	r1, r0
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	fa92 f2a2 	rbit	r2, r2
 8003800:	603a      	str	r2, [r7, #0]
  return result;
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	fab2 f282 	clz	r2, r2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	40d3      	lsrs	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x40>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	080089c0 	.word	0x080089c0

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b092      	sub	sp, #72	; 0x48
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003834:	2300      	movs	r3, #0
 8003836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80d4 	beq.w	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003848:	4b4e      	ldr	r3, [pc, #312]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10e      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003854:	4b4b      	ldr	r3, [pc, #300]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	4a4a      	ldr	r2, [pc, #296]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	61d3      	str	r3, [r2, #28]
 8003860:	4b48      	ldr	r3, [pc, #288]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	4b45      	ldr	r3, [pc, #276]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d118      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387e:	4b42      	ldr	r3, [pc, #264]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a41      	ldr	r2, [pc, #260]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388a:	f7fe fa71 	bl	8001d70 <HAL_GetTick>
 800388e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	e008      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7fe fa6d 	bl	8001d70 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b64      	cmp	r3, #100	; 0x64
 800389e:	d901      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e1d6      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038b0:	4b34      	ldr	r3, [pc, #208]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8084 	beq.w	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d07c      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038d0:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	461a      	mov	r2, r3
 80038fa:	2301      	movs	r3, #1
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003902:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	461a      	mov	r2, r3
 800391e:	2300      	movs	r3, #0
 8003920:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003922:	4a18      	ldr	r2, [pc, #96]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003926:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d04b      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fe fa1d 	bl	8001d70 <HAL_GetTick>
 8003936:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fe fa19 	bl	8001d70 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e180      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003950:	2302      	movs	r3, #2
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
 800395c:	2302      	movs	r3, #2
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	61fb      	str	r3, [r7, #28]
  return result;
 8003968:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d108      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800397e:	4b01      	ldr	r3, [pc, #4]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	e00d      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003984:	40021000 	.word	0x40021000
 8003988:	40007000 	.word	0x40007000
 800398c:	10908100 	.word	0x10908100
 8003990:	2302      	movs	r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	4b9a      	ldr	r3, [pc, #616]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2202      	movs	r2, #2
 80039a2:	613a      	str	r2, [r7, #16]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	fa92 f2a2 	rbit	r2, r2
 80039aa:	60fa      	str	r2, [r7, #12]
  return result;
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	fab2 f282 	clz	r2, r2
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f002 021f 	and.w	r2, r2, #31
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0b7      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039ca:	4b8f      	ldr	r3, [pc, #572]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	498c      	ldr	r1, [pc, #560]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e4:	4b88      	ldr	r3, [pc, #544]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4a87      	ldr	r2, [pc, #540]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039fc:	4b82      	ldr	r3, [pc, #520]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	f023 0203 	bic.w	r2, r3, #3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	497f      	ldr	r1, [pc, #508]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a1a:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	4978      	ldr	r1, [pc, #480]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a38:	4b73      	ldr	r3, [pc, #460]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	4970      	ldr	r1, [pc, #448]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a56:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f023 0210 	bic.w	r2, r3, #16
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	4969      	ldr	r1, [pc, #420]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a74:	4b64      	ldr	r3, [pc, #400]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	4961      	ldr	r1, [pc, #388]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a92:	4b5d      	ldr	r3, [pc, #372]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f023 0220 	bic.w	r2, r3, #32
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	495a      	ldr	r1, [pc, #360]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ab0:	4b55      	ldr	r3, [pc, #340]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	4952      	ldr	r1, [pc, #328]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ace:	4b4e      	ldr	r3, [pc, #312]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	494b      	ldr	r1, [pc, #300]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aec:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	4943      	ldr	r1, [pc, #268]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	493c      	ldr	r1, [pc, #240]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b28:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	4934      	ldr	r1, [pc, #208]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	492d      	ldr	r1, [pc, #180]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b64:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	4925      	ldr	r1, [pc, #148]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b82:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	491e      	ldr	r1, [pc, #120]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	4916      	ldr	r1, [pc, #88]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	490f      	ldr	r1, [pc, #60]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	4907      	ldr	r1, [pc, #28]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003bfa:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	e002      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0e:	4913      	ldr	r1, [pc, #76]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	490b      	ldr	r1, [pc, #44]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4a:	4904      	ldr	r1, [pc, #16]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3748      	adds	r7, #72	; 0x48
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000

08003c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e049      	b.n	8003d06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd fe6a 	bl	8001960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f000 f968 	bl	8003f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d001      	beq.n	8003d28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e047      	b.n	8003db8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <HAL_TIM_Base_Start+0xb4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01d      	beq.n	8003d76 <HAL_TIM_Base_Start+0x66>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d018      	beq.n	8003d76 <HAL_TIM_Base_Start+0x66>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <HAL_TIM_Base_Start+0xb8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_TIM_Base_Start+0x66>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <HAL_TIM_Base_Start+0xbc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIM_Base_Start+0x66>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_TIM_Base_Start+0xc0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_TIM_Base_Start+0x66>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1b      	ldr	r2, [pc, #108]	; (8003dd4 <HAL_TIM_Base_Start+0xc4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIM_Base_Start+0x66>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_TIM_Base_Start+0xc8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d115      	bne.n	8003da2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_TIM_Base_Start+0xcc>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b06      	cmp	r3, #6
 8003d86:	d015      	beq.n	8003db4 <HAL_TIM_Base_Start+0xa4>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8e:	d011      	beq.n	8003db4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da0:	e008      	b.n	8003db4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e000      	b.n	8003db6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40013400 	.word	0x40013400
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40015000 	.word	0x40015000
 8003ddc:	00010007 	.word	0x00010007

08003de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_TIM_ConfigClockSource+0x1c>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e0b6      	b.n	8003f6a <HAL_TIM_ConfigClockSource+0x18a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e38:	d03e      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0xd8>
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	f200 8087 	bhi.w	8003f50 <HAL_TIM_ConfigClockSource+0x170>
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	f000 8086 	beq.w	8003f56 <HAL_TIM_ConfigClockSource+0x176>
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4e:	d87f      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x170>
 8003e50:	2b70      	cmp	r3, #112	; 0x70
 8003e52:	d01a      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0xaa>
 8003e54:	2b70      	cmp	r3, #112	; 0x70
 8003e56:	d87b      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x170>
 8003e58:	2b60      	cmp	r3, #96	; 0x60
 8003e5a:	d050      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x11e>
 8003e5c:	2b60      	cmp	r3, #96	; 0x60
 8003e5e:	d877      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x170>
 8003e60:	2b50      	cmp	r3, #80	; 0x50
 8003e62:	d03c      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xfe>
 8003e64:	2b50      	cmp	r3, #80	; 0x50
 8003e66:	d873      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x170>
 8003e68:	2b40      	cmp	r3, #64	; 0x40
 8003e6a:	d058      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x13e>
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d86f      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x170>
 8003e70:	2b30      	cmp	r3, #48	; 0x30
 8003e72:	d064      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15e>
 8003e74:	2b30      	cmp	r3, #48	; 0x30
 8003e76:	d86b      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x170>
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d060      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15e>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d867      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x170>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d05c      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15e>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d05a      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15e>
 8003e88:	e062      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6899      	ldr	r1, [r3, #8]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f000 f983 	bl	80041a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	609a      	str	r2, [r3, #8]
      break;
 8003eb6:	e04f      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f000 f96c 	bl	80041a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eda:	609a      	str	r2, [r3, #8]
      break;
 8003edc:	e03c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 f8e0 	bl	80040b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2150      	movs	r1, #80	; 0x50
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f939 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003efc:	e02c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 f8ff 	bl	800410e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2160      	movs	r1, #96	; 0x60
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f929 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e01c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 f8c0 	bl	80040b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2140      	movs	r1, #64	; 0x40
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f919 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e00c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f000 f910 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003f4e:	e003      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e000      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a42      	ldr	r2, [pc, #264]	; (8004090 <TIM_Base_SetConfig+0x11c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f92:	d00f      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3f      	ldr	r2, [pc, #252]	; (8004094 <TIM_Base_SetConfig+0x120>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3e      	ldr	r2, [pc, #248]	; (8004098 <TIM_Base_SetConfig+0x124>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3d      	ldr	r2, [pc, #244]	; (800409c <TIM_Base_SetConfig+0x128>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a3c      	ldr	r2, [pc, #240]	; (80040a0 <TIM_Base_SetConfig+0x12c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d108      	bne.n	8003fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <TIM_Base_SetConfig+0x11c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01f      	beq.n	800400e <TIM_Base_SetConfig+0x9a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd4:	d01b      	beq.n	800400e <TIM_Base_SetConfig+0x9a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2e      	ldr	r2, [pc, #184]	; (8004094 <TIM_Base_SetConfig+0x120>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d017      	beq.n	800400e <TIM_Base_SetConfig+0x9a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2d      	ldr	r2, [pc, #180]	; (8004098 <TIM_Base_SetConfig+0x124>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <TIM_Base_SetConfig+0x9a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	; (800409c <TIM_Base_SetConfig+0x128>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00f      	beq.n	800400e <TIM_Base_SetConfig+0x9a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a2c      	ldr	r2, [pc, #176]	; (80040a4 <TIM_Base_SetConfig+0x130>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00b      	beq.n	800400e <TIM_Base_SetConfig+0x9a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2b      	ldr	r2, [pc, #172]	; (80040a8 <TIM_Base_SetConfig+0x134>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d007      	beq.n	800400e <TIM_Base_SetConfig+0x9a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2a      	ldr	r2, [pc, #168]	; (80040ac <TIM_Base_SetConfig+0x138>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d003      	beq.n	800400e <TIM_Base_SetConfig+0x9a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a25      	ldr	r2, [pc, #148]	; (80040a0 <TIM_Base_SetConfig+0x12c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d108      	bne.n	8004020 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <TIM_Base_SetConfig+0x11c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <TIM_Base_SetConfig+0x100>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <TIM_Base_SetConfig+0x128>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00f      	beq.n	8004074 <TIM_Base_SetConfig+0x100>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <TIM_Base_SetConfig+0x130>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00b      	beq.n	8004074 <TIM_Base_SetConfig+0x100>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <TIM_Base_SetConfig+0x134>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d007      	beq.n	8004074 <TIM_Base_SetConfig+0x100>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a11      	ldr	r2, [pc, #68]	; (80040ac <TIM_Base_SetConfig+0x138>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_Base_SetConfig+0x100>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <TIM_Base_SetConfig+0x12c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d103      	bne.n	800407c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	615a      	str	r2, [r3, #20]
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800
 800409c:	40013400 	.word	0x40013400
 80040a0:	40015000 	.word	0x40015000
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800

080040b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0201 	bic.w	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 030a 	bic.w	r3, r3, #10
 80040ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410e:	b480      	push	{r7}
 8004110:	b087      	sub	sp, #28
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0210 	bic.w	r2, r3, #16
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	031b      	lsls	r3, r3, #12
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800414a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	f043 0307 	orr.w	r3, r3, #7
 8004190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	021a      	lsls	r2, r3, #8
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e06d      	b.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a30      	ldr	r2, [pc, #192]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2f      	ldr	r2, [pc, #188]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2d      	ldr	r2, [pc, #180]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d108      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004240:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01d      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d018      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a11      	ldr	r2, [pc, #68]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10c      	bne.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40013400 	.word	0x40013400
 80042ec:	40015000 	.word	0x40015000
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40014000 	.word	0x40014000

080042fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e040      	b.n	8004390 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fd fb5e 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2224      	movs	r2, #36	; 0x24
 8004328:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8c0 	bl	80044c0 <UART_SetConfig>
 8004340:	4603      	mov	r3, r0
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e022      	b.n	8004390 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa8a 	bl	800486c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fb11 	bl	80049b0 <UART_CheckIdleState>
 800438e:	4603      	mov	r3, r0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	f040 8082 	bne.w	80044b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_UART_Transmit+0x26>
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e07a      	b.n	80044b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Transmit+0x38>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e073      	b.n	80044b8 <HAL_UART_Transmit+0x120>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2221      	movs	r2, #33	; 0x21
 80043e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043e6:	f7fd fcc3 	bl	8001d70 <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	88fa      	ldrh	r2, [r7, #6]
 80043f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004404:	d108      	bne.n	8004418 <HAL_UART_Transmit+0x80>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e003      	b.n	8004420 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004428:	e02d      	b.n	8004486 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2200      	movs	r2, #0
 8004432:	2180      	movs	r1, #128	; 0x80
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fb04 	bl	8004a42 <UART_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e039      	b.n	80044b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10b      	bne.n	8004462 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	881a      	ldrh	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004456:	b292      	uxth	r2, r2
 8004458:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	3302      	adds	r3, #2
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e008      	b.n	8004474 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	b292      	uxth	r2, r2
 800446c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3301      	adds	r3, #1
 8004472:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1cb      	bne.n	800442a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	2140      	movs	r1, #64	; 0x40
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fad0 	bl	8004a42 <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e005      	b.n	80044b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4b92      	ldr	r3, [pc, #584]	; (8004734 <UART_SetConfig+0x274>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	430a      	orrs	r2, r1
 8004530:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a80      	ldr	r2, [pc, #512]	; (8004738 <UART_SetConfig+0x278>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d120      	bne.n	800457e <UART_SetConfig+0xbe>
 800453c:	4b7f      	ldr	r3, [pc, #508]	; (800473c <UART_SetConfig+0x27c>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b03      	cmp	r3, #3
 8004546:	d817      	bhi.n	8004578 <UART_SetConfig+0xb8>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0x90>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004561 	.word	0x08004561
 8004554:	0800456d 	.word	0x0800456d
 8004558:	08004573 	.word	0x08004573
 800455c:	08004567 	.word	0x08004567
 8004560:	2301      	movs	r3, #1
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e0b5      	b.n	80046d2 <UART_SetConfig+0x212>
 8004566:	2302      	movs	r3, #2
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e0b2      	b.n	80046d2 <UART_SetConfig+0x212>
 800456c:	2304      	movs	r3, #4
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e0af      	b.n	80046d2 <UART_SetConfig+0x212>
 8004572:	2308      	movs	r3, #8
 8004574:	77fb      	strb	r3, [r7, #31]
 8004576:	e0ac      	b.n	80046d2 <UART_SetConfig+0x212>
 8004578:	2310      	movs	r3, #16
 800457a:	77fb      	strb	r3, [r7, #31]
 800457c:	e0a9      	b.n	80046d2 <UART_SetConfig+0x212>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a6f      	ldr	r2, [pc, #444]	; (8004740 <UART_SetConfig+0x280>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d124      	bne.n	80045d2 <UART_SetConfig+0x112>
 8004588:	4b6c      	ldr	r3, [pc, #432]	; (800473c <UART_SetConfig+0x27c>)
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004590:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004594:	d011      	beq.n	80045ba <UART_SetConfig+0xfa>
 8004596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800459a:	d817      	bhi.n	80045cc <UART_SetConfig+0x10c>
 800459c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a0:	d011      	beq.n	80045c6 <UART_SetConfig+0x106>
 80045a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a6:	d811      	bhi.n	80045cc <UART_SetConfig+0x10c>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <UART_SetConfig+0xf4>
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d006      	beq.n	80045c0 <UART_SetConfig+0x100>
 80045b2:	e00b      	b.n	80045cc <UART_SetConfig+0x10c>
 80045b4:	2300      	movs	r3, #0
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e08b      	b.n	80046d2 <UART_SetConfig+0x212>
 80045ba:	2302      	movs	r3, #2
 80045bc:	77fb      	strb	r3, [r7, #31]
 80045be:	e088      	b.n	80046d2 <UART_SetConfig+0x212>
 80045c0:	2304      	movs	r3, #4
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e085      	b.n	80046d2 <UART_SetConfig+0x212>
 80045c6:	2308      	movs	r3, #8
 80045c8:	77fb      	strb	r3, [r7, #31]
 80045ca:	e082      	b.n	80046d2 <UART_SetConfig+0x212>
 80045cc:	2310      	movs	r3, #16
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e07f      	b.n	80046d2 <UART_SetConfig+0x212>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a5b      	ldr	r2, [pc, #364]	; (8004744 <UART_SetConfig+0x284>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d124      	bne.n	8004626 <UART_SetConfig+0x166>
 80045dc:	4b57      	ldr	r3, [pc, #348]	; (800473c <UART_SetConfig+0x27c>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80045e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045e8:	d011      	beq.n	800460e <UART_SetConfig+0x14e>
 80045ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80045ee:	d817      	bhi.n	8004620 <UART_SetConfig+0x160>
 80045f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045f4:	d011      	beq.n	800461a <UART_SetConfig+0x15a>
 80045f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045fa:	d811      	bhi.n	8004620 <UART_SetConfig+0x160>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <UART_SetConfig+0x148>
 8004600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004604:	d006      	beq.n	8004614 <UART_SetConfig+0x154>
 8004606:	e00b      	b.n	8004620 <UART_SetConfig+0x160>
 8004608:	2300      	movs	r3, #0
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e061      	b.n	80046d2 <UART_SetConfig+0x212>
 800460e:	2302      	movs	r3, #2
 8004610:	77fb      	strb	r3, [r7, #31]
 8004612:	e05e      	b.n	80046d2 <UART_SetConfig+0x212>
 8004614:	2304      	movs	r3, #4
 8004616:	77fb      	strb	r3, [r7, #31]
 8004618:	e05b      	b.n	80046d2 <UART_SetConfig+0x212>
 800461a:	2308      	movs	r3, #8
 800461c:	77fb      	strb	r3, [r7, #31]
 800461e:	e058      	b.n	80046d2 <UART_SetConfig+0x212>
 8004620:	2310      	movs	r3, #16
 8004622:	77fb      	strb	r3, [r7, #31]
 8004624:	e055      	b.n	80046d2 <UART_SetConfig+0x212>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a47      	ldr	r2, [pc, #284]	; (8004748 <UART_SetConfig+0x288>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d124      	bne.n	800467a <UART_SetConfig+0x1ba>
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <UART_SetConfig+0x27c>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800463c:	d011      	beq.n	8004662 <UART_SetConfig+0x1a2>
 800463e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004642:	d817      	bhi.n	8004674 <UART_SetConfig+0x1b4>
 8004644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004648:	d011      	beq.n	800466e <UART_SetConfig+0x1ae>
 800464a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800464e:	d811      	bhi.n	8004674 <UART_SetConfig+0x1b4>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <UART_SetConfig+0x19c>
 8004654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004658:	d006      	beq.n	8004668 <UART_SetConfig+0x1a8>
 800465a:	e00b      	b.n	8004674 <UART_SetConfig+0x1b4>
 800465c:	2300      	movs	r3, #0
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e037      	b.n	80046d2 <UART_SetConfig+0x212>
 8004662:	2302      	movs	r3, #2
 8004664:	77fb      	strb	r3, [r7, #31]
 8004666:	e034      	b.n	80046d2 <UART_SetConfig+0x212>
 8004668:	2304      	movs	r3, #4
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e031      	b.n	80046d2 <UART_SetConfig+0x212>
 800466e:	2308      	movs	r3, #8
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	e02e      	b.n	80046d2 <UART_SetConfig+0x212>
 8004674:	2310      	movs	r3, #16
 8004676:	77fb      	strb	r3, [r7, #31]
 8004678:	e02b      	b.n	80046d2 <UART_SetConfig+0x212>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a33      	ldr	r2, [pc, #204]	; (800474c <UART_SetConfig+0x28c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d124      	bne.n	80046ce <UART_SetConfig+0x20e>
 8004684:	4b2d      	ldr	r3, [pc, #180]	; (800473c <UART_SetConfig+0x27c>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800468c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004690:	d011      	beq.n	80046b6 <UART_SetConfig+0x1f6>
 8004692:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004696:	d817      	bhi.n	80046c8 <UART_SetConfig+0x208>
 8004698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800469c:	d011      	beq.n	80046c2 <UART_SetConfig+0x202>
 800469e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046a2:	d811      	bhi.n	80046c8 <UART_SetConfig+0x208>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <UART_SetConfig+0x1f0>
 80046a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ac:	d006      	beq.n	80046bc <UART_SetConfig+0x1fc>
 80046ae:	e00b      	b.n	80046c8 <UART_SetConfig+0x208>
 80046b0:	2300      	movs	r3, #0
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e00d      	b.n	80046d2 <UART_SetConfig+0x212>
 80046b6:	2302      	movs	r3, #2
 80046b8:	77fb      	strb	r3, [r7, #31]
 80046ba:	e00a      	b.n	80046d2 <UART_SetConfig+0x212>
 80046bc:	2304      	movs	r3, #4
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e007      	b.n	80046d2 <UART_SetConfig+0x212>
 80046c2:	2308      	movs	r3, #8
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e004      	b.n	80046d2 <UART_SetConfig+0x212>
 80046c8:	2310      	movs	r3, #16
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e001      	b.n	80046d2 <UART_SetConfig+0x212>
 80046ce:	2310      	movs	r3, #16
 80046d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046da:	d16c      	bne.n	80047b6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80046dc:	7ffb      	ldrb	r3, [r7, #31]
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d838      	bhi.n	8004754 <UART_SetConfig+0x294>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0x228>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	08004755 	.word	0x08004755
 80046f8:	08004723 	.word	0x08004723
 80046fc:	08004755 	.word	0x08004755
 8004700:	08004755 	.word	0x08004755
 8004704:	08004755 	.word	0x08004755
 8004708:	0800472b 	.word	0x0800472b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7ff f846 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 8004710:	61b8      	str	r0, [r7, #24]
        break;
 8004712:	e024      	b.n	800475e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7ff f864 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8004718:	61b8      	str	r0, [r7, #24]
        break;
 800471a:	e020      	b.n	800475e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <UART_SetConfig+0x290>)
 800471e:	61bb      	str	r3, [r7, #24]
        break;
 8004720:	e01d      	b.n	800475e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004722:	f7fe ffc5 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8004726:	61b8      	str	r0, [r7, #24]
        break;
 8004728:	e019      	b.n	800475e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472e:	61bb      	str	r3, [r7, #24]
        break;
 8004730:	e015      	b.n	800475e <UART_SetConfig+0x29e>
 8004732:	bf00      	nop
 8004734:	efff69f3 	.word	0xefff69f3
 8004738:	40013800 	.word	0x40013800
 800473c:	40021000 	.word	0x40021000
 8004740:	40004400 	.word	0x40004400
 8004744:	40004800 	.word	0x40004800
 8004748:	40004c00 	.word	0x40004c00
 800474c:	40005000 	.word	0x40005000
 8004750:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	77bb      	strb	r3, [r7, #30]
        break;
 800475c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d075      	beq.n	8004850 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	005a      	lsls	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	441a      	add	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	b29b      	uxth	r3, r3
 800477a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0f      	cmp	r3, #15
 8004780:	d916      	bls.n	80047b0 <UART_SetConfig+0x2f0>
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004788:	d212      	bcs.n	80047b0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	b29b      	uxth	r3, r3
 800478e:	f023 030f 	bic.w	r3, r3, #15
 8004792:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	b29b      	uxth	r3, r3
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	b29a      	uxth	r2, r3
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	89fa      	ldrh	r2, [r7, #14]
 80047ac:	60da      	str	r2, [r3, #12]
 80047ae:	e04f      	b.n	8004850 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	77bb      	strb	r3, [r7, #30]
 80047b4:	e04c      	b.n	8004850 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d828      	bhi.n	800480e <UART_SetConfig+0x34e>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x304>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	0800480f 	.word	0x0800480f
 80047d4:	080047ff 	.word	0x080047ff
 80047d8:	0800480f 	.word	0x0800480f
 80047dc:	0800480f 	.word	0x0800480f
 80047e0:	0800480f 	.word	0x0800480f
 80047e4:	08004807 	.word	0x08004807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e8:	f7fe ffd8 	bl	800379c <HAL_RCC_GetPCLK1Freq>
 80047ec:	61b8      	str	r0, [r7, #24]
        break;
 80047ee:	e013      	b.n	8004818 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7fe fff6 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 80047f4:	61b8      	str	r0, [r7, #24]
        break;
 80047f6:	e00f      	b.n	8004818 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <UART_SetConfig+0x3a8>)
 80047fa:	61bb      	str	r3, [r7, #24]
        break;
 80047fc:	e00c      	b.n	8004818 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fe:	f7fe ff57 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 8004802:	61b8      	str	r0, [r7, #24]
        break;
 8004804:	e008      	b.n	8004818 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	61bb      	str	r3, [r7, #24]
        break;
 800480c:	e004      	b.n	8004818 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	77bb      	strb	r3, [r7, #30]
        break;
 8004816:	bf00      	nop
    }

    if (pclk != 0U)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	085a      	lsrs	r2, r3, #1
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	441a      	add	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	b29b      	uxth	r3, r3
 8004832:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b0f      	cmp	r3, #15
 8004838:	d908      	bls.n	800484c <UART_SetConfig+0x38c>
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d204      	bcs.n	800484c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	e001      	b.n	8004850 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800485c:	7fbb      	ldrb	r3, [r7, #30]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	007a1200 	.word	0x007a1200

0800486c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00a      	beq.n	8004896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01a      	beq.n	8004982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496a:	d10a      	bne.n	8004982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c0:	f7fd f9d6 	bl	8001d70 <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d10e      	bne.n	80049f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f82d 	bl	8004a42 <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e023      	b.n	8004a3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d10e      	bne.n	8004a1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f817 	bl	8004a42 <UART_WaitOnFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e00d      	b.n	8004a3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b09c      	sub	sp, #112	; 0x70
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a52:	e0a5      	b.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	f000 80a1 	beq.w	8004ba0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5e:	f7fd f987 	bl	8001d70 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d13e      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a88:	667b      	str	r3, [r7, #100]	; 0x64
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e6      	bne.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	663b      	str	r3, [r7, #96]	; 0x60
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ac6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e5      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e067      	b.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d04f      	beq.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d147      	bne.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b6c:	623a      	str	r2, [r7, #32]
 8004b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	6a3a      	ldr	r2, [r7, #32]
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e5      	bne.n	8004b4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e010      	b.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	f43f af4a 	beq.w	8004a54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3770      	adds	r7, #112	; 0x70
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <abs>:
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	bfb8      	it	lt
 8004bce:	4240      	neglt	r0, r0
 8004bd0:	4770      	bx	lr
	...

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	; (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000014 	.word	0x20000014

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4d0d      	ldr	r5, [pc, #52]	; (8004c18 <__libc_init_array+0x38>)
 8004be4:	4c0d      	ldr	r4, [pc, #52]	; (8004c1c <__libc_init_array+0x3c>)
 8004be6:	1b64      	subs	r4, r4, r5
 8004be8:	10a4      	asrs	r4, r4, #2
 8004bea:	2600      	movs	r6, #0
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	4d0b      	ldr	r5, [pc, #44]	; (8004c20 <__libc_init_array+0x40>)
 8004bf2:	4c0c      	ldr	r4, [pc, #48]	; (8004c24 <__libc_init_array+0x44>)
 8004bf4:	f003 fe5e 	bl	80088b4 <_init>
 8004bf8:	1b64      	subs	r4, r4, r5
 8004bfa:	10a4      	asrs	r4, r4, #2
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c08:	4798      	blx	r3
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c12:	4798      	blx	r3
 8004c14:	3601      	adds	r6, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	08008df8 	.word	0x08008df8
 8004c1c:	08008df8 	.word	0x08008df8
 8004c20:	08008df8 	.word	0x08008df8
 8004c24:	08008dfc 	.word	0x08008dfc

08004c28 <memset>:
 8004c28:	4402      	add	r2, r0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d100      	bne.n	8004c32 <memset+0xa>
 8004c30:	4770      	bx	lr
 8004c32:	f803 1b01 	strb.w	r1, [r3], #1
 8004c36:	e7f9      	b.n	8004c2c <memset+0x4>

08004c38 <__cvt>:
 8004c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	ec55 4b10 	vmov	r4, r5, d0
 8004c40:	2d00      	cmp	r5, #0
 8004c42:	460e      	mov	r6, r1
 8004c44:	4619      	mov	r1, r3
 8004c46:	462b      	mov	r3, r5
 8004c48:	bfbb      	ittet	lt
 8004c4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c4e:	461d      	movlt	r5, r3
 8004c50:	2300      	movge	r3, #0
 8004c52:	232d      	movlt	r3, #45	; 0x2d
 8004c54:	700b      	strb	r3, [r1, #0]
 8004c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c5c:	4691      	mov	r9, r2
 8004c5e:	f023 0820 	bic.w	r8, r3, #32
 8004c62:	bfbc      	itt	lt
 8004c64:	4622      	movlt	r2, r4
 8004c66:	4614      	movlt	r4, r2
 8004c68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c6c:	d005      	beq.n	8004c7a <__cvt+0x42>
 8004c6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c72:	d100      	bne.n	8004c76 <__cvt+0x3e>
 8004c74:	3601      	adds	r6, #1
 8004c76:	2102      	movs	r1, #2
 8004c78:	e000      	b.n	8004c7c <__cvt+0x44>
 8004c7a:	2103      	movs	r1, #3
 8004c7c:	ab03      	add	r3, sp, #12
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	ab02      	add	r3, sp, #8
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	ec45 4b10 	vmov	d0, r4, r5
 8004c88:	4653      	mov	r3, sl
 8004c8a:	4632      	mov	r2, r6
 8004c8c:	f000 fd00 	bl	8005690 <_dtoa_r>
 8004c90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c94:	4607      	mov	r7, r0
 8004c96:	d102      	bne.n	8004c9e <__cvt+0x66>
 8004c98:	f019 0f01 	tst.w	r9, #1
 8004c9c:	d022      	beq.n	8004ce4 <__cvt+0xac>
 8004c9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ca2:	eb07 0906 	add.w	r9, r7, r6
 8004ca6:	d110      	bne.n	8004cca <__cvt+0x92>
 8004ca8:	783b      	ldrb	r3, [r7, #0]
 8004caa:	2b30      	cmp	r3, #48	; 0x30
 8004cac:	d10a      	bne.n	8004cc4 <__cvt+0x8c>
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb ff0f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cba:	b918      	cbnz	r0, 8004cc4 <__cvt+0x8c>
 8004cbc:	f1c6 0601 	rsb	r6, r6, #1
 8004cc0:	f8ca 6000 	str.w	r6, [sl]
 8004cc4:	f8da 3000 	ldr.w	r3, [sl]
 8004cc8:	4499      	add	r9, r3
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cd6:	b108      	cbz	r0, 8004cdc <__cvt+0xa4>
 8004cd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004cdc:	2230      	movs	r2, #48	; 0x30
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	454b      	cmp	r3, r9
 8004ce2:	d307      	bcc.n	8004cf4 <__cvt+0xbc>
 8004ce4:	9b03      	ldr	r3, [sp, #12]
 8004ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ce8:	1bdb      	subs	r3, r3, r7
 8004cea:	4638      	mov	r0, r7
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	b004      	add	sp, #16
 8004cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf4:	1c59      	adds	r1, r3, #1
 8004cf6:	9103      	str	r1, [sp, #12]
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e7f0      	b.n	8004cde <__cvt+0xa6>

08004cfc <__exponent>:
 8004cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2900      	cmp	r1, #0
 8004d02:	bfb8      	it	lt
 8004d04:	4249      	neglt	r1, r1
 8004d06:	f803 2b02 	strb.w	r2, [r3], #2
 8004d0a:	bfb4      	ite	lt
 8004d0c:	222d      	movlt	r2, #45	; 0x2d
 8004d0e:	222b      	movge	r2, #43	; 0x2b
 8004d10:	2909      	cmp	r1, #9
 8004d12:	7042      	strb	r2, [r0, #1]
 8004d14:	dd2a      	ble.n	8004d6c <__exponent+0x70>
 8004d16:	f10d 0407 	add.w	r4, sp, #7
 8004d1a:	46a4      	mov	ip, r4
 8004d1c:	270a      	movs	r7, #10
 8004d1e:	46a6      	mov	lr, r4
 8004d20:	460a      	mov	r2, r1
 8004d22:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d26:	fb07 1516 	mls	r5, r7, r6, r1
 8004d2a:	3530      	adds	r5, #48	; 0x30
 8004d2c:	2a63      	cmp	r2, #99	; 0x63
 8004d2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d36:	4631      	mov	r1, r6
 8004d38:	dcf1      	bgt.n	8004d1e <__exponent+0x22>
 8004d3a:	3130      	adds	r1, #48	; 0x30
 8004d3c:	f1ae 0502 	sub.w	r5, lr, #2
 8004d40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d44:	1c44      	adds	r4, r0, #1
 8004d46:	4629      	mov	r1, r5
 8004d48:	4561      	cmp	r1, ip
 8004d4a:	d30a      	bcc.n	8004d62 <__exponent+0x66>
 8004d4c:	f10d 0209 	add.w	r2, sp, #9
 8004d50:	eba2 020e 	sub.w	r2, r2, lr
 8004d54:	4565      	cmp	r5, ip
 8004d56:	bf88      	it	hi
 8004d58:	2200      	movhi	r2, #0
 8004d5a:	4413      	add	r3, r2
 8004d5c:	1a18      	subs	r0, r3, r0
 8004d5e:	b003      	add	sp, #12
 8004d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d6a:	e7ed      	b.n	8004d48 <__exponent+0x4c>
 8004d6c:	2330      	movs	r3, #48	; 0x30
 8004d6e:	3130      	adds	r1, #48	; 0x30
 8004d70:	7083      	strb	r3, [r0, #2]
 8004d72:	70c1      	strb	r1, [r0, #3]
 8004d74:	1d03      	adds	r3, r0, #4
 8004d76:	e7f1      	b.n	8004d5c <__exponent+0x60>

08004d78 <_printf_float>:
 8004d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7c:	ed2d 8b02 	vpush	{d8}
 8004d80:	b08d      	sub	sp, #52	; 0x34
 8004d82:	460c      	mov	r4, r1
 8004d84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d88:	4616      	mov	r6, r2
 8004d8a:	461f      	mov	r7, r3
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	f001 fa6d 	bl	800626c <_localeconv_r>
 8004d92:	f8d0 a000 	ldr.w	sl, [r0]
 8004d96:	4650      	mov	r0, sl
 8004d98:	f7fb fa22 	bl	80001e0 <strlen>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	9305      	str	r3, [sp, #20]
 8004da4:	f8d8 3000 	ldr.w	r3, [r8]
 8004da8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004dac:	3307      	adds	r3, #7
 8004dae:	f023 0307 	bic.w	r3, r3, #7
 8004db2:	f103 0208 	add.w	r2, r3, #8
 8004db6:	f8c8 2000 	str.w	r2, [r8]
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dc2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004dc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dca:	9307      	str	r3, [sp, #28]
 8004dcc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dd0:	ee08 0a10 	vmov	s16, r0
 8004dd4:	4b9f      	ldr	r3, [pc, #636]	; (8005054 <_printf_float+0x2dc>)
 8004dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dda:	f04f 32ff 	mov.w	r2, #4294967295
 8004dde:	f7fb fead 	bl	8000b3c <__aeabi_dcmpun>
 8004de2:	bb88      	cbnz	r0, 8004e48 <_printf_float+0xd0>
 8004de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004de8:	4b9a      	ldr	r3, [pc, #616]	; (8005054 <_printf_float+0x2dc>)
 8004dea:	f04f 32ff 	mov.w	r2, #4294967295
 8004dee:	f7fb fe87 	bl	8000b00 <__aeabi_dcmple>
 8004df2:	bb48      	cbnz	r0, 8004e48 <_printf_float+0xd0>
 8004df4:	2200      	movs	r2, #0
 8004df6:	2300      	movs	r3, #0
 8004df8:	4640      	mov	r0, r8
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	f7fb fe76 	bl	8000aec <__aeabi_dcmplt>
 8004e00:	b110      	cbz	r0, 8004e08 <_printf_float+0x90>
 8004e02:	232d      	movs	r3, #45	; 0x2d
 8004e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e08:	4b93      	ldr	r3, [pc, #588]	; (8005058 <_printf_float+0x2e0>)
 8004e0a:	4894      	ldr	r0, [pc, #592]	; (800505c <_printf_float+0x2e4>)
 8004e0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e10:	bf94      	ite	ls
 8004e12:	4698      	movls	r8, r3
 8004e14:	4680      	movhi	r8, r0
 8004e16:	2303      	movs	r3, #3
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	9b05      	ldr	r3, [sp, #20]
 8004e1c:	f023 0204 	bic.w	r2, r3, #4
 8004e20:	6022      	str	r2, [r4, #0]
 8004e22:	f04f 0900 	mov.w	r9, #0
 8004e26:	9700      	str	r7, [sp, #0]
 8004e28:	4633      	mov	r3, r6
 8004e2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f000 f9d8 	bl	80051e4 <_printf_common>
 8004e34:	3001      	adds	r0, #1
 8004e36:	f040 8090 	bne.w	8004f5a <_printf_float+0x1e2>
 8004e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3e:	b00d      	add	sp, #52	; 0x34
 8004e40:	ecbd 8b02 	vpop	{d8}
 8004e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e48:	4642      	mov	r2, r8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	4649      	mov	r1, r9
 8004e50:	f7fb fe74 	bl	8000b3c <__aeabi_dcmpun>
 8004e54:	b140      	cbz	r0, 8004e68 <_printf_float+0xf0>
 8004e56:	464b      	mov	r3, r9
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bfbc      	itt	lt
 8004e5c:	232d      	movlt	r3, #45	; 0x2d
 8004e5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e62:	487f      	ldr	r0, [pc, #508]	; (8005060 <_printf_float+0x2e8>)
 8004e64:	4b7f      	ldr	r3, [pc, #508]	; (8005064 <_printf_float+0x2ec>)
 8004e66:	e7d1      	b.n	8004e0c <_printf_float+0x94>
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e6e:	9206      	str	r2, [sp, #24]
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	d13f      	bne.n	8004ef4 <_printf_float+0x17c>
 8004e74:	2306      	movs	r3, #6
 8004e76:	6063      	str	r3, [r4, #4]
 8004e78:	9b05      	ldr	r3, [sp, #20]
 8004e7a:	6861      	ldr	r1, [r4, #4]
 8004e7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e80:	2300      	movs	r3, #0
 8004e82:	9303      	str	r3, [sp, #12]
 8004e84:	ab0a      	add	r3, sp, #40	; 0x28
 8004e86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e8a:	ab09      	add	r3, sp, #36	; 0x24
 8004e8c:	ec49 8b10 	vmov	d0, r8, r9
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	6022      	str	r2, [r4, #0]
 8004e94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f7ff fecd 	bl	8004c38 <__cvt>
 8004e9e:	9b06      	ldr	r3, [sp, #24]
 8004ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ea2:	2b47      	cmp	r3, #71	; 0x47
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	d108      	bne.n	8004eba <_printf_float+0x142>
 8004ea8:	1cc8      	adds	r0, r1, #3
 8004eaa:	db02      	blt.n	8004eb2 <_printf_float+0x13a>
 8004eac:	6863      	ldr	r3, [r4, #4]
 8004eae:	4299      	cmp	r1, r3
 8004eb0:	dd41      	ble.n	8004f36 <_printf_float+0x1be>
 8004eb2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004eb6:	fa5f fb8b 	uxtb.w	fp, fp
 8004eba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ebe:	d820      	bhi.n	8004f02 <_printf_float+0x18a>
 8004ec0:	3901      	subs	r1, #1
 8004ec2:	465a      	mov	r2, fp
 8004ec4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ec8:	9109      	str	r1, [sp, #36]	; 0x24
 8004eca:	f7ff ff17 	bl	8004cfc <__exponent>
 8004ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ed0:	1813      	adds	r3, r2, r0
 8004ed2:	2a01      	cmp	r2, #1
 8004ed4:	4681      	mov	r9, r0
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	dc02      	bgt.n	8004ee0 <_printf_float+0x168>
 8004eda:	6822      	ldr	r2, [r4, #0]
 8004edc:	07d2      	lsls	r2, r2, #31
 8004ede:	d501      	bpl.n	8004ee4 <_printf_float+0x16c>
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d09c      	beq.n	8004e26 <_printf_float+0xae>
 8004eec:	232d      	movs	r3, #45	; 0x2d
 8004eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef2:	e798      	b.n	8004e26 <_printf_float+0xae>
 8004ef4:	9a06      	ldr	r2, [sp, #24]
 8004ef6:	2a47      	cmp	r2, #71	; 0x47
 8004ef8:	d1be      	bne.n	8004e78 <_printf_float+0x100>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1bc      	bne.n	8004e78 <_printf_float+0x100>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e7b9      	b.n	8004e76 <_printf_float+0xfe>
 8004f02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f06:	d118      	bne.n	8004f3a <_printf_float+0x1c2>
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	dd0b      	ble.n	8004f26 <_printf_float+0x1ae>
 8004f0e:	6121      	str	r1, [r4, #16]
 8004f10:	b913      	cbnz	r3, 8004f18 <_printf_float+0x1a0>
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	07d0      	lsls	r0, r2, #31
 8004f16:	d502      	bpl.n	8004f1e <_printf_float+0x1a6>
 8004f18:	3301      	adds	r3, #1
 8004f1a:	440b      	add	r3, r1
 8004f1c:	6123      	str	r3, [r4, #16]
 8004f1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f20:	f04f 0900 	mov.w	r9, #0
 8004f24:	e7de      	b.n	8004ee4 <_printf_float+0x16c>
 8004f26:	b913      	cbnz	r3, 8004f2e <_printf_float+0x1b6>
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	07d2      	lsls	r2, r2, #31
 8004f2c:	d501      	bpl.n	8004f32 <_printf_float+0x1ba>
 8004f2e:	3302      	adds	r3, #2
 8004f30:	e7f4      	b.n	8004f1c <_printf_float+0x1a4>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e7f2      	b.n	8004f1c <_printf_float+0x1a4>
 8004f36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f3c:	4299      	cmp	r1, r3
 8004f3e:	db05      	blt.n	8004f4c <_printf_float+0x1d4>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	6121      	str	r1, [r4, #16]
 8004f44:	07d8      	lsls	r0, r3, #31
 8004f46:	d5ea      	bpl.n	8004f1e <_printf_float+0x1a6>
 8004f48:	1c4b      	adds	r3, r1, #1
 8004f4a:	e7e7      	b.n	8004f1c <_printf_float+0x1a4>
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	bfd4      	ite	le
 8004f50:	f1c1 0202 	rsble	r2, r1, #2
 8004f54:	2201      	movgt	r2, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	e7e0      	b.n	8004f1c <_printf_float+0x1a4>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	055a      	lsls	r2, r3, #21
 8004f5e:	d407      	bmi.n	8004f70 <_printf_float+0x1f8>
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	4642      	mov	r2, r8
 8004f64:	4631      	mov	r1, r6
 8004f66:	4628      	mov	r0, r5
 8004f68:	47b8      	blx	r7
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d12c      	bne.n	8004fc8 <_printf_float+0x250>
 8004f6e:	e764      	b.n	8004e3a <_printf_float+0xc2>
 8004f70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f74:	f240 80e0 	bls.w	8005138 <_printf_float+0x3c0>
 8004f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f7fb fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d034      	beq.n	8004ff2 <_printf_float+0x27a>
 8004f88:	4a37      	ldr	r2, [pc, #220]	; (8005068 <_printf_float+0x2f0>)
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f af51 	beq.w	8004e3a <_printf_float+0xc2>
 8004f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	db02      	blt.n	8004fa6 <_printf_float+0x22e>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	07d8      	lsls	r0, r3, #31
 8004fa4:	d510      	bpl.n	8004fc8 <_printf_float+0x250>
 8004fa6:	ee18 3a10 	vmov	r3, s16
 8004faa:	4652      	mov	r2, sl
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f af41 	beq.w	8004e3a <_printf_float+0xc2>
 8004fb8:	f04f 0800 	mov.w	r8, #0
 8004fbc:	f104 091a 	add.w	r9, r4, #26
 8004fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	4543      	cmp	r3, r8
 8004fc6:	dc09      	bgt.n	8004fdc <_printf_float+0x264>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	079b      	lsls	r3, r3, #30
 8004fcc:	f100 8105 	bmi.w	80051da <_printf_float+0x462>
 8004fd0:	68e0      	ldr	r0, [r4, #12]
 8004fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd4:	4298      	cmp	r0, r3
 8004fd6:	bfb8      	it	lt
 8004fd8:	4618      	movlt	r0, r3
 8004fda:	e730      	b.n	8004e3e <_printf_float+0xc6>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	464a      	mov	r2, r9
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b8      	blx	r7
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f43f af27 	beq.w	8004e3a <_printf_float+0xc2>
 8004fec:	f108 0801 	add.w	r8, r8, #1
 8004ff0:	e7e6      	b.n	8004fc0 <_printf_float+0x248>
 8004ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	dc39      	bgt.n	800506c <_printf_float+0x2f4>
 8004ff8:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <_printf_float+0x2f0>)
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	3001      	adds	r0, #1
 8005004:	f43f af19 	beq.w	8004e3a <_printf_float+0xc2>
 8005008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800500c:	4313      	orrs	r3, r2
 800500e:	d102      	bne.n	8005016 <_printf_float+0x29e>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	07d9      	lsls	r1, r3, #31
 8005014:	d5d8      	bpl.n	8004fc8 <_printf_float+0x250>
 8005016:	ee18 3a10 	vmov	r3, s16
 800501a:	4652      	mov	r2, sl
 800501c:	4631      	mov	r1, r6
 800501e:	4628      	mov	r0, r5
 8005020:	47b8      	blx	r7
 8005022:	3001      	adds	r0, #1
 8005024:	f43f af09 	beq.w	8004e3a <_printf_float+0xc2>
 8005028:	f04f 0900 	mov.w	r9, #0
 800502c:	f104 0a1a 	add.w	sl, r4, #26
 8005030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005032:	425b      	negs	r3, r3
 8005034:	454b      	cmp	r3, r9
 8005036:	dc01      	bgt.n	800503c <_printf_float+0x2c4>
 8005038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800503a:	e792      	b.n	8004f62 <_printf_float+0x1ea>
 800503c:	2301      	movs	r3, #1
 800503e:	4652      	mov	r2, sl
 8005040:	4631      	mov	r1, r6
 8005042:	4628      	mov	r0, r5
 8005044:	47b8      	blx	r7
 8005046:	3001      	adds	r0, #1
 8005048:	f43f aef7 	beq.w	8004e3a <_printf_float+0xc2>
 800504c:	f109 0901 	add.w	r9, r9, #1
 8005050:	e7ee      	b.n	8005030 <_printf_float+0x2b8>
 8005052:	bf00      	nop
 8005054:	7fefffff 	.word	0x7fefffff
 8005058:	080089ec 	.word	0x080089ec
 800505c:	080089f0 	.word	0x080089f0
 8005060:	080089f8 	.word	0x080089f8
 8005064:	080089f4 	.word	0x080089f4
 8005068:	080089fc 	.word	0x080089fc
 800506c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800506e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005070:	429a      	cmp	r2, r3
 8005072:	bfa8      	it	ge
 8005074:	461a      	movge	r2, r3
 8005076:	2a00      	cmp	r2, #0
 8005078:	4691      	mov	r9, r2
 800507a:	dc37      	bgt.n	80050ec <_printf_float+0x374>
 800507c:	f04f 0b00 	mov.w	fp, #0
 8005080:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005084:	f104 021a 	add.w	r2, r4, #26
 8005088:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800508a:	9305      	str	r3, [sp, #20]
 800508c:	eba3 0309 	sub.w	r3, r3, r9
 8005090:	455b      	cmp	r3, fp
 8005092:	dc33      	bgt.n	80050fc <_printf_float+0x384>
 8005094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005098:	429a      	cmp	r2, r3
 800509a:	db3b      	blt.n	8005114 <_printf_float+0x39c>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	07da      	lsls	r2, r3, #31
 80050a0:	d438      	bmi.n	8005114 <_printf_float+0x39c>
 80050a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a4:	9a05      	ldr	r2, [sp, #20]
 80050a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050a8:	1a9a      	subs	r2, r3, r2
 80050aa:	eba3 0901 	sub.w	r9, r3, r1
 80050ae:	4591      	cmp	r9, r2
 80050b0:	bfa8      	it	ge
 80050b2:	4691      	movge	r9, r2
 80050b4:	f1b9 0f00 	cmp.w	r9, #0
 80050b8:	dc35      	bgt.n	8005126 <_printf_float+0x3ae>
 80050ba:	f04f 0800 	mov.w	r8, #0
 80050be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050c2:	f104 0a1a 	add.w	sl, r4, #26
 80050c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	eba3 0309 	sub.w	r3, r3, r9
 80050d0:	4543      	cmp	r3, r8
 80050d2:	f77f af79 	ble.w	8004fc8 <_printf_float+0x250>
 80050d6:	2301      	movs	r3, #1
 80050d8:	4652      	mov	r2, sl
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	f43f aeaa 	beq.w	8004e3a <_printf_float+0xc2>
 80050e6:	f108 0801 	add.w	r8, r8, #1
 80050ea:	e7ec      	b.n	80050c6 <_printf_float+0x34e>
 80050ec:	4613      	mov	r3, r2
 80050ee:	4631      	mov	r1, r6
 80050f0:	4642      	mov	r2, r8
 80050f2:	4628      	mov	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	d1c0      	bne.n	800507c <_printf_float+0x304>
 80050fa:	e69e      	b.n	8004e3a <_printf_float+0xc2>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4631      	mov	r1, r6
 8005100:	4628      	mov	r0, r5
 8005102:	9205      	str	r2, [sp, #20]
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f43f ae97 	beq.w	8004e3a <_printf_float+0xc2>
 800510c:	9a05      	ldr	r2, [sp, #20]
 800510e:	f10b 0b01 	add.w	fp, fp, #1
 8005112:	e7b9      	b.n	8005088 <_printf_float+0x310>
 8005114:	ee18 3a10 	vmov	r3, s16
 8005118:	4652      	mov	r2, sl
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	d1be      	bne.n	80050a2 <_printf_float+0x32a>
 8005124:	e689      	b.n	8004e3a <_printf_float+0xc2>
 8005126:	9a05      	ldr	r2, [sp, #20]
 8005128:	464b      	mov	r3, r9
 800512a:	4442      	add	r2, r8
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	d1c1      	bne.n	80050ba <_printf_float+0x342>
 8005136:	e680      	b.n	8004e3a <_printf_float+0xc2>
 8005138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800513a:	2a01      	cmp	r2, #1
 800513c:	dc01      	bgt.n	8005142 <_printf_float+0x3ca>
 800513e:	07db      	lsls	r3, r3, #31
 8005140:	d538      	bpl.n	80051b4 <_printf_float+0x43c>
 8005142:	2301      	movs	r3, #1
 8005144:	4642      	mov	r2, r8
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	f43f ae74 	beq.w	8004e3a <_printf_float+0xc2>
 8005152:	ee18 3a10 	vmov	r3, s16
 8005156:	4652      	mov	r2, sl
 8005158:	4631      	mov	r1, r6
 800515a:	4628      	mov	r0, r5
 800515c:	47b8      	blx	r7
 800515e:	3001      	adds	r0, #1
 8005160:	f43f ae6b 	beq.w	8004e3a <_printf_float+0xc2>
 8005164:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005168:	2200      	movs	r2, #0
 800516a:	2300      	movs	r3, #0
 800516c:	f7fb fcb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005170:	b9d8      	cbnz	r0, 80051aa <_printf_float+0x432>
 8005172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005174:	f108 0201 	add.w	r2, r8, #1
 8005178:	3b01      	subs	r3, #1
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	d10e      	bne.n	80051a2 <_printf_float+0x42a>
 8005184:	e659      	b.n	8004e3a <_printf_float+0xc2>
 8005186:	2301      	movs	r3, #1
 8005188:	4652      	mov	r2, sl
 800518a:	4631      	mov	r1, r6
 800518c:	4628      	mov	r0, r5
 800518e:	47b8      	blx	r7
 8005190:	3001      	adds	r0, #1
 8005192:	f43f ae52 	beq.w	8004e3a <_printf_float+0xc2>
 8005196:	f108 0801 	add.w	r8, r8, #1
 800519a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800519c:	3b01      	subs	r3, #1
 800519e:	4543      	cmp	r3, r8
 80051a0:	dcf1      	bgt.n	8005186 <_printf_float+0x40e>
 80051a2:	464b      	mov	r3, r9
 80051a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051a8:	e6dc      	b.n	8004f64 <_printf_float+0x1ec>
 80051aa:	f04f 0800 	mov.w	r8, #0
 80051ae:	f104 0a1a 	add.w	sl, r4, #26
 80051b2:	e7f2      	b.n	800519a <_printf_float+0x422>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4642      	mov	r2, r8
 80051b8:	e7df      	b.n	800517a <_printf_float+0x402>
 80051ba:	2301      	movs	r3, #1
 80051bc:	464a      	mov	r2, r9
 80051be:	4631      	mov	r1, r6
 80051c0:	4628      	mov	r0, r5
 80051c2:	47b8      	blx	r7
 80051c4:	3001      	adds	r0, #1
 80051c6:	f43f ae38 	beq.w	8004e3a <_printf_float+0xc2>
 80051ca:	f108 0801 	add.w	r8, r8, #1
 80051ce:	68e3      	ldr	r3, [r4, #12]
 80051d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051d2:	1a5b      	subs	r3, r3, r1
 80051d4:	4543      	cmp	r3, r8
 80051d6:	dcf0      	bgt.n	80051ba <_printf_float+0x442>
 80051d8:	e6fa      	b.n	8004fd0 <_printf_float+0x258>
 80051da:	f04f 0800 	mov.w	r8, #0
 80051de:	f104 0919 	add.w	r9, r4, #25
 80051e2:	e7f4      	b.n	80051ce <_printf_float+0x456>

080051e4 <_printf_common>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	4616      	mov	r6, r2
 80051ea:	4699      	mov	r9, r3
 80051ec:	688a      	ldr	r2, [r1, #8]
 80051ee:	690b      	ldr	r3, [r1, #16]
 80051f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	bfb8      	it	lt
 80051f8:	4613      	movlt	r3, r2
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005200:	4607      	mov	r7, r0
 8005202:	460c      	mov	r4, r1
 8005204:	b10a      	cbz	r2, 800520a <_printf_common+0x26>
 8005206:	3301      	adds	r3, #1
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	0699      	lsls	r1, r3, #26
 800520e:	bf42      	ittt	mi
 8005210:	6833      	ldrmi	r3, [r6, #0]
 8005212:	3302      	addmi	r3, #2
 8005214:	6033      	strmi	r3, [r6, #0]
 8005216:	6825      	ldr	r5, [r4, #0]
 8005218:	f015 0506 	ands.w	r5, r5, #6
 800521c:	d106      	bne.n	800522c <_printf_common+0x48>
 800521e:	f104 0a19 	add.w	sl, r4, #25
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	6832      	ldr	r2, [r6, #0]
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	42ab      	cmp	r3, r5
 800522a:	dc26      	bgt.n	800527a <_printf_common+0x96>
 800522c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005230:	1e13      	subs	r3, r2, #0
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	bf18      	it	ne
 8005236:	2301      	movne	r3, #1
 8005238:	0692      	lsls	r2, r2, #26
 800523a:	d42b      	bmi.n	8005294 <_printf_common+0xb0>
 800523c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005240:	4649      	mov	r1, r9
 8005242:	4638      	mov	r0, r7
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d01e      	beq.n	8005288 <_printf_common+0xa4>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	68e5      	ldr	r5, [r4, #12]
 800524e:	6832      	ldr	r2, [r6, #0]
 8005250:	f003 0306 	and.w	r3, r3, #6
 8005254:	2b04      	cmp	r3, #4
 8005256:	bf08      	it	eq
 8005258:	1aad      	subeq	r5, r5, r2
 800525a:	68a3      	ldr	r3, [r4, #8]
 800525c:	6922      	ldr	r2, [r4, #16]
 800525e:	bf0c      	ite	eq
 8005260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005264:	2500      	movne	r5, #0
 8005266:	4293      	cmp	r3, r2
 8005268:	bfc4      	itt	gt
 800526a:	1a9b      	subgt	r3, r3, r2
 800526c:	18ed      	addgt	r5, r5, r3
 800526e:	2600      	movs	r6, #0
 8005270:	341a      	adds	r4, #26
 8005272:	42b5      	cmp	r5, r6
 8005274:	d11a      	bne.n	80052ac <_printf_common+0xc8>
 8005276:	2000      	movs	r0, #0
 8005278:	e008      	b.n	800528c <_printf_common+0xa8>
 800527a:	2301      	movs	r3, #1
 800527c:	4652      	mov	r2, sl
 800527e:	4649      	mov	r1, r9
 8005280:	4638      	mov	r0, r7
 8005282:	47c0      	blx	r8
 8005284:	3001      	adds	r0, #1
 8005286:	d103      	bne.n	8005290 <_printf_common+0xac>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005290:	3501      	adds	r5, #1
 8005292:	e7c6      	b.n	8005222 <_printf_common+0x3e>
 8005294:	18e1      	adds	r1, r4, r3
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	2030      	movs	r0, #48	; 0x30
 800529a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800529e:	4422      	add	r2, r4
 80052a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052a8:	3302      	adds	r3, #2
 80052aa:	e7c7      	b.n	800523c <_printf_common+0x58>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4622      	mov	r2, r4
 80052b0:	4649      	mov	r1, r9
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d0e6      	beq.n	8005288 <_printf_common+0xa4>
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7d9      	b.n	8005272 <_printf_common+0x8e>
	...

080052c0 <_printf_i>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	7e0f      	ldrb	r7, [r1, #24]
 80052c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052c8:	2f78      	cmp	r7, #120	; 0x78
 80052ca:	4691      	mov	r9, r2
 80052cc:	4680      	mov	r8, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	469a      	mov	sl, r3
 80052d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052d6:	d807      	bhi.n	80052e8 <_printf_i+0x28>
 80052d8:	2f62      	cmp	r7, #98	; 0x62
 80052da:	d80a      	bhi.n	80052f2 <_printf_i+0x32>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f000 80d8 	beq.w	8005492 <_printf_i+0x1d2>
 80052e2:	2f58      	cmp	r7, #88	; 0x58
 80052e4:	f000 80a3 	beq.w	800542e <_printf_i+0x16e>
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f0:	e03a      	b.n	8005368 <_printf_i+0xa8>
 80052f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052f6:	2b15      	cmp	r3, #21
 80052f8:	d8f6      	bhi.n	80052e8 <_printf_i+0x28>
 80052fa:	a101      	add	r1, pc, #4	; (adr r1, 8005300 <_printf_i+0x40>)
 80052fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005300:	08005359 	.word	0x08005359
 8005304:	0800536d 	.word	0x0800536d
 8005308:	080052e9 	.word	0x080052e9
 800530c:	080052e9 	.word	0x080052e9
 8005310:	080052e9 	.word	0x080052e9
 8005314:	080052e9 	.word	0x080052e9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052e9 	.word	0x080052e9
 8005320:	080052e9 	.word	0x080052e9
 8005324:	080052e9 	.word	0x080052e9
 8005328:	080052e9 	.word	0x080052e9
 800532c:	08005479 	.word	0x08005479
 8005330:	0800539d 	.word	0x0800539d
 8005334:	0800545b 	.word	0x0800545b
 8005338:	080052e9 	.word	0x080052e9
 800533c:	080052e9 	.word	0x080052e9
 8005340:	0800549b 	.word	0x0800549b
 8005344:	080052e9 	.word	0x080052e9
 8005348:	0800539d 	.word	0x0800539d
 800534c:	080052e9 	.word	0x080052e9
 8005350:	080052e9 	.word	0x080052e9
 8005354:	08005463 	.word	0x08005463
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	602a      	str	r2, [r5, #0]
 8005360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005368:	2301      	movs	r3, #1
 800536a:	e0a3      	b.n	80054b4 <_printf_i+0x1f4>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	6829      	ldr	r1, [r5, #0]
 8005370:	0606      	lsls	r6, r0, #24
 8005372:	f101 0304 	add.w	r3, r1, #4
 8005376:	d50a      	bpl.n	800538e <_printf_i+0xce>
 8005378:	680e      	ldr	r6, [r1, #0]
 800537a:	602b      	str	r3, [r5, #0]
 800537c:	2e00      	cmp	r6, #0
 800537e:	da03      	bge.n	8005388 <_printf_i+0xc8>
 8005380:	232d      	movs	r3, #45	; 0x2d
 8005382:	4276      	negs	r6, r6
 8005384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005388:	485e      	ldr	r0, [pc, #376]	; (8005504 <_printf_i+0x244>)
 800538a:	230a      	movs	r3, #10
 800538c:	e019      	b.n	80053c2 <_printf_i+0x102>
 800538e:	680e      	ldr	r6, [r1, #0]
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005396:	bf18      	it	ne
 8005398:	b236      	sxthne	r6, r6
 800539a:	e7ef      	b.n	800537c <_printf_i+0xbc>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	6820      	ldr	r0, [r4, #0]
 80053a0:	1d19      	adds	r1, r3, #4
 80053a2:	6029      	str	r1, [r5, #0]
 80053a4:	0601      	lsls	r1, r0, #24
 80053a6:	d501      	bpl.n	80053ac <_printf_i+0xec>
 80053a8:	681e      	ldr	r6, [r3, #0]
 80053aa:	e002      	b.n	80053b2 <_printf_i+0xf2>
 80053ac:	0646      	lsls	r6, r0, #25
 80053ae:	d5fb      	bpl.n	80053a8 <_printf_i+0xe8>
 80053b0:	881e      	ldrh	r6, [r3, #0]
 80053b2:	4854      	ldr	r0, [pc, #336]	; (8005504 <_printf_i+0x244>)
 80053b4:	2f6f      	cmp	r7, #111	; 0x6f
 80053b6:	bf0c      	ite	eq
 80053b8:	2308      	moveq	r3, #8
 80053ba:	230a      	movne	r3, #10
 80053bc:	2100      	movs	r1, #0
 80053be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c2:	6865      	ldr	r5, [r4, #4]
 80053c4:	60a5      	str	r5, [r4, #8]
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	bfa2      	ittt	ge
 80053ca:	6821      	ldrge	r1, [r4, #0]
 80053cc:	f021 0104 	bicge.w	r1, r1, #4
 80053d0:	6021      	strge	r1, [r4, #0]
 80053d2:	b90e      	cbnz	r6, 80053d8 <_printf_i+0x118>
 80053d4:	2d00      	cmp	r5, #0
 80053d6:	d04d      	beq.n	8005474 <_printf_i+0x1b4>
 80053d8:	4615      	mov	r5, r2
 80053da:	fbb6 f1f3 	udiv	r1, r6, r3
 80053de:	fb03 6711 	mls	r7, r3, r1, r6
 80053e2:	5dc7      	ldrb	r7, [r0, r7]
 80053e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053e8:	4637      	mov	r7, r6
 80053ea:	42bb      	cmp	r3, r7
 80053ec:	460e      	mov	r6, r1
 80053ee:	d9f4      	bls.n	80053da <_printf_i+0x11a>
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d10b      	bne.n	800540c <_printf_i+0x14c>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	07de      	lsls	r6, r3, #31
 80053f8:	d508      	bpl.n	800540c <_printf_i+0x14c>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	6861      	ldr	r1, [r4, #4]
 80053fe:	4299      	cmp	r1, r3
 8005400:	bfde      	ittt	le
 8005402:	2330      	movle	r3, #48	; 0x30
 8005404:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005408:	f105 35ff 	addle.w	r5, r5, #4294967295
 800540c:	1b52      	subs	r2, r2, r5
 800540e:	6122      	str	r2, [r4, #16]
 8005410:	f8cd a000 	str.w	sl, [sp]
 8005414:	464b      	mov	r3, r9
 8005416:	aa03      	add	r2, sp, #12
 8005418:	4621      	mov	r1, r4
 800541a:	4640      	mov	r0, r8
 800541c:	f7ff fee2 	bl	80051e4 <_printf_common>
 8005420:	3001      	adds	r0, #1
 8005422:	d14c      	bne.n	80054be <_printf_i+0x1fe>
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	b004      	add	sp, #16
 800542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542e:	4835      	ldr	r0, [pc, #212]	; (8005504 <_printf_i+0x244>)
 8005430:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005434:	6829      	ldr	r1, [r5, #0]
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	f851 6b04 	ldr.w	r6, [r1], #4
 800543c:	6029      	str	r1, [r5, #0]
 800543e:	061d      	lsls	r5, r3, #24
 8005440:	d514      	bpl.n	800546c <_printf_i+0x1ac>
 8005442:	07df      	lsls	r7, r3, #31
 8005444:	bf44      	itt	mi
 8005446:	f043 0320 	orrmi.w	r3, r3, #32
 800544a:	6023      	strmi	r3, [r4, #0]
 800544c:	b91e      	cbnz	r6, 8005456 <_printf_i+0x196>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	f023 0320 	bic.w	r3, r3, #32
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	2310      	movs	r3, #16
 8005458:	e7b0      	b.n	80053bc <_printf_i+0xfc>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	f043 0320 	orr.w	r3, r3, #32
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	2378      	movs	r3, #120	; 0x78
 8005464:	4828      	ldr	r0, [pc, #160]	; (8005508 <_printf_i+0x248>)
 8005466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800546a:	e7e3      	b.n	8005434 <_printf_i+0x174>
 800546c:	0659      	lsls	r1, r3, #25
 800546e:	bf48      	it	mi
 8005470:	b2b6      	uxthmi	r6, r6
 8005472:	e7e6      	b.n	8005442 <_printf_i+0x182>
 8005474:	4615      	mov	r5, r2
 8005476:	e7bb      	b.n	80053f0 <_printf_i+0x130>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	6826      	ldr	r6, [r4, #0]
 800547c:	6961      	ldr	r1, [r4, #20]
 800547e:	1d18      	adds	r0, r3, #4
 8005480:	6028      	str	r0, [r5, #0]
 8005482:	0635      	lsls	r5, r6, #24
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	d501      	bpl.n	800548c <_printf_i+0x1cc>
 8005488:	6019      	str	r1, [r3, #0]
 800548a:	e002      	b.n	8005492 <_printf_i+0x1d2>
 800548c:	0670      	lsls	r0, r6, #25
 800548e:	d5fb      	bpl.n	8005488 <_printf_i+0x1c8>
 8005490:	8019      	strh	r1, [r3, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	4615      	mov	r5, r2
 8005498:	e7ba      	b.n	8005410 <_printf_i+0x150>
 800549a:	682b      	ldr	r3, [r5, #0]
 800549c:	1d1a      	adds	r2, r3, #4
 800549e:	602a      	str	r2, [r5, #0]
 80054a0:	681d      	ldr	r5, [r3, #0]
 80054a2:	6862      	ldr	r2, [r4, #4]
 80054a4:	2100      	movs	r1, #0
 80054a6:	4628      	mov	r0, r5
 80054a8:	f7fa fea2 	bl	80001f0 <memchr>
 80054ac:	b108      	cbz	r0, 80054b2 <_printf_i+0x1f2>
 80054ae:	1b40      	subs	r0, r0, r5
 80054b0:	6060      	str	r0, [r4, #4]
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	2300      	movs	r3, #0
 80054b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054bc:	e7a8      	b.n	8005410 <_printf_i+0x150>
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	462a      	mov	r2, r5
 80054c2:	4649      	mov	r1, r9
 80054c4:	4640      	mov	r0, r8
 80054c6:	47d0      	blx	sl
 80054c8:	3001      	adds	r0, #1
 80054ca:	d0ab      	beq.n	8005424 <_printf_i+0x164>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	079b      	lsls	r3, r3, #30
 80054d0:	d413      	bmi.n	80054fa <_printf_i+0x23a>
 80054d2:	68e0      	ldr	r0, [r4, #12]
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	4298      	cmp	r0, r3
 80054d8:	bfb8      	it	lt
 80054da:	4618      	movlt	r0, r3
 80054dc:	e7a4      	b.n	8005428 <_printf_i+0x168>
 80054de:	2301      	movs	r3, #1
 80054e0:	4632      	mov	r2, r6
 80054e2:	4649      	mov	r1, r9
 80054e4:	4640      	mov	r0, r8
 80054e6:	47d0      	blx	sl
 80054e8:	3001      	adds	r0, #1
 80054ea:	d09b      	beq.n	8005424 <_printf_i+0x164>
 80054ec:	3501      	adds	r5, #1
 80054ee:	68e3      	ldr	r3, [r4, #12]
 80054f0:	9903      	ldr	r1, [sp, #12]
 80054f2:	1a5b      	subs	r3, r3, r1
 80054f4:	42ab      	cmp	r3, r5
 80054f6:	dcf2      	bgt.n	80054de <_printf_i+0x21e>
 80054f8:	e7eb      	b.n	80054d2 <_printf_i+0x212>
 80054fa:	2500      	movs	r5, #0
 80054fc:	f104 0619 	add.w	r6, r4, #25
 8005500:	e7f5      	b.n	80054ee <_printf_i+0x22e>
 8005502:	bf00      	nop
 8005504:	080089fe 	.word	0x080089fe
 8005508:	08008a0f 	.word	0x08008a0f

0800550c <sniprintf>:
 800550c:	b40c      	push	{r2, r3}
 800550e:	b530      	push	{r4, r5, lr}
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <sniprintf+0x64>)
 8005512:	1e0c      	subs	r4, r1, #0
 8005514:	681d      	ldr	r5, [r3, #0]
 8005516:	b09d      	sub	sp, #116	; 0x74
 8005518:	da08      	bge.n	800552c <sniprintf+0x20>
 800551a:	238b      	movs	r3, #139	; 0x8b
 800551c:	602b      	str	r3, [r5, #0]
 800551e:	f04f 30ff 	mov.w	r0, #4294967295
 8005522:	b01d      	add	sp, #116	; 0x74
 8005524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005528:	b002      	add	sp, #8
 800552a:	4770      	bx	lr
 800552c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005530:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005534:	bf14      	ite	ne
 8005536:	f104 33ff 	addne.w	r3, r4, #4294967295
 800553a:	4623      	moveq	r3, r4
 800553c:	9304      	str	r3, [sp, #16]
 800553e:	9307      	str	r3, [sp, #28]
 8005540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005544:	9002      	str	r0, [sp, #8]
 8005546:	9006      	str	r0, [sp, #24]
 8005548:	f8ad 3016 	strh.w	r3, [sp, #22]
 800554c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800554e:	ab21      	add	r3, sp, #132	; 0x84
 8005550:	a902      	add	r1, sp, #8
 8005552:	4628      	mov	r0, r5
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	f001 fb79 	bl	8006c4c <_svfiprintf_r>
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	bfbc      	itt	lt
 800555e:	238b      	movlt	r3, #139	; 0x8b
 8005560:	602b      	strlt	r3, [r5, #0]
 8005562:	2c00      	cmp	r4, #0
 8005564:	d0dd      	beq.n	8005522 <sniprintf+0x16>
 8005566:	9b02      	ldr	r3, [sp, #8]
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	e7d9      	b.n	8005522 <sniprintf+0x16>
 800556e:	bf00      	nop
 8005570:	20000014 	.word	0x20000014

08005574 <quorem>:
 8005574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	6903      	ldr	r3, [r0, #16]
 800557a:	690c      	ldr	r4, [r1, #16]
 800557c:	42a3      	cmp	r3, r4
 800557e:	4607      	mov	r7, r0
 8005580:	f2c0 8081 	blt.w	8005686 <quorem+0x112>
 8005584:	3c01      	subs	r4, #1
 8005586:	f101 0814 	add.w	r8, r1, #20
 800558a:	f100 0514 	add.w	r5, r0, #20
 800558e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800559c:	3301      	adds	r3, #1
 800559e:	429a      	cmp	r2, r3
 80055a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80055ac:	d331      	bcc.n	8005612 <quorem+0x9e>
 80055ae:	f04f 0e00 	mov.w	lr, #0
 80055b2:	4640      	mov	r0, r8
 80055b4:	46ac      	mov	ip, r5
 80055b6:	46f2      	mov	sl, lr
 80055b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80055bc:	b293      	uxth	r3, r2
 80055be:	fb06 e303 	mla	r3, r6, r3, lr
 80055c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	ebaa 0303 	sub.w	r3, sl, r3
 80055cc:	f8dc a000 	ldr.w	sl, [ip]
 80055d0:	0c12      	lsrs	r2, r2, #16
 80055d2:	fa13 f38a 	uxtah	r3, r3, sl
 80055d6:	fb06 e202 	mla	r2, r6, r2, lr
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	9b00      	ldr	r3, [sp, #0]
 80055de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055e2:	b292      	uxth	r2, r2
 80055e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80055f0:	4581      	cmp	r9, r0
 80055f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055f6:	f84c 3b04 	str.w	r3, [ip], #4
 80055fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055fe:	d2db      	bcs.n	80055b8 <quorem+0x44>
 8005600:	f855 300b 	ldr.w	r3, [r5, fp]
 8005604:	b92b      	cbnz	r3, 8005612 <quorem+0x9e>
 8005606:	9b01      	ldr	r3, [sp, #4]
 8005608:	3b04      	subs	r3, #4
 800560a:	429d      	cmp	r5, r3
 800560c:	461a      	mov	r2, r3
 800560e:	d32e      	bcc.n	800566e <quorem+0xfa>
 8005610:	613c      	str	r4, [r7, #16]
 8005612:	4638      	mov	r0, r7
 8005614:	f001 f8c6 	bl	80067a4 <__mcmp>
 8005618:	2800      	cmp	r0, #0
 800561a:	db24      	blt.n	8005666 <quorem+0xf2>
 800561c:	3601      	adds	r6, #1
 800561e:	4628      	mov	r0, r5
 8005620:	f04f 0c00 	mov.w	ip, #0
 8005624:	f858 2b04 	ldr.w	r2, [r8], #4
 8005628:	f8d0 e000 	ldr.w	lr, [r0]
 800562c:	b293      	uxth	r3, r2
 800562e:	ebac 0303 	sub.w	r3, ip, r3
 8005632:	0c12      	lsrs	r2, r2, #16
 8005634:	fa13 f38e 	uxtah	r3, r3, lr
 8005638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800563c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005640:	b29b      	uxth	r3, r3
 8005642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005646:	45c1      	cmp	r9, r8
 8005648:	f840 3b04 	str.w	r3, [r0], #4
 800564c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005650:	d2e8      	bcs.n	8005624 <quorem+0xb0>
 8005652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800565a:	b922      	cbnz	r2, 8005666 <quorem+0xf2>
 800565c:	3b04      	subs	r3, #4
 800565e:	429d      	cmp	r5, r3
 8005660:	461a      	mov	r2, r3
 8005662:	d30a      	bcc.n	800567a <quorem+0x106>
 8005664:	613c      	str	r4, [r7, #16]
 8005666:	4630      	mov	r0, r6
 8005668:	b003      	add	sp, #12
 800566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	3b04      	subs	r3, #4
 8005672:	2a00      	cmp	r2, #0
 8005674:	d1cc      	bne.n	8005610 <quorem+0x9c>
 8005676:	3c01      	subs	r4, #1
 8005678:	e7c7      	b.n	800560a <quorem+0x96>
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	3b04      	subs	r3, #4
 800567e:	2a00      	cmp	r2, #0
 8005680:	d1f0      	bne.n	8005664 <quorem+0xf0>
 8005682:	3c01      	subs	r4, #1
 8005684:	e7eb      	b.n	800565e <quorem+0xea>
 8005686:	2000      	movs	r0, #0
 8005688:	e7ee      	b.n	8005668 <quorem+0xf4>
 800568a:	0000      	movs	r0, r0
 800568c:	0000      	movs	r0, r0
	...

08005690 <_dtoa_r>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	ed2d 8b04 	vpush	{d8-d9}
 8005698:	ec57 6b10 	vmov	r6, r7, d0
 800569c:	b093      	sub	sp, #76	; 0x4c
 800569e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056a4:	9106      	str	r1, [sp, #24]
 80056a6:	ee10 aa10 	vmov	sl, s0
 80056aa:	4604      	mov	r4, r0
 80056ac:	9209      	str	r2, [sp, #36]	; 0x24
 80056ae:	930c      	str	r3, [sp, #48]	; 0x30
 80056b0:	46bb      	mov	fp, r7
 80056b2:	b975      	cbnz	r5, 80056d2 <_dtoa_r+0x42>
 80056b4:	2010      	movs	r0, #16
 80056b6:	f000 fddd 	bl	8006274 <malloc>
 80056ba:	4602      	mov	r2, r0
 80056bc:	6260      	str	r0, [r4, #36]	; 0x24
 80056be:	b920      	cbnz	r0, 80056ca <_dtoa_r+0x3a>
 80056c0:	4ba7      	ldr	r3, [pc, #668]	; (8005960 <_dtoa_r+0x2d0>)
 80056c2:	21ea      	movs	r1, #234	; 0xea
 80056c4:	48a7      	ldr	r0, [pc, #668]	; (8005964 <_dtoa_r+0x2d4>)
 80056c6:	f001 fbd1 	bl	8006e6c <__assert_func>
 80056ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056ce:	6005      	str	r5, [r0, #0]
 80056d0:	60c5      	str	r5, [r0, #12]
 80056d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	b151      	cbz	r1, 80056ee <_dtoa_r+0x5e>
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	604a      	str	r2, [r1, #4]
 80056dc:	2301      	movs	r3, #1
 80056de:	4093      	lsls	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 fe1c 	bl	8006320 <_Bfree>
 80056e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	1e3b      	subs	r3, r7, #0
 80056f0:	bfaa      	itet	ge
 80056f2:	2300      	movge	r3, #0
 80056f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80056f8:	f8c8 3000 	strge.w	r3, [r8]
 80056fc:	4b9a      	ldr	r3, [pc, #616]	; (8005968 <_dtoa_r+0x2d8>)
 80056fe:	bfbc      	itt	lt
 8005700:	2201      	movlt	r2, #1
 8005702:	f8c8 2000 	strlt.w	r2, [r8]
 8005706:	ea33 030b 	bics.w	r3, r3, fp
 800570a:	d11b      	bne.n	8005744 <_dtoa_r+0xb4>
 800570c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800570e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005718:	4333      	orrs	r3, r6
 800571a:	f000 8592 	beq.w	8006242 <_dtoa_r+0xbb2>
 800571e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005720:	b963      	cbnz	r3, 800573c <_dtoa_r+0xac>
 8005722:	4b92      	ldr	r3, [pc, #584]	; (800596c <_dtoa_r+0x2dc>)
 8005724:	e022      	b.n	800576c <_dtoa_r+0xdc>
 8005726:	4b92      	ldr	r3, [pc, #584]	; (8005970 <_dtoa_r+0x2e0>)
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	3308      	adds	r3, #8
 800572c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	9801      	ldr	r0, [sp, #4]
 8005732:	b013      	add	sp, #76	; 0x4c
 8005734:	ecbd 8b04 	vpop	{d8-d9}
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	4b8b      	ldr	r3, [pc, #556]	; (800596c <_dtoa_r+0x2dc>)
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	3303      	adds	r3, #3
 8005742:	e7f3      	b.n	800572c <_dtoa_r+0x9c>
 8005744:	2200      	movs	r2, #0
 8005746:	2300      	movs	r3, #0
 8005748:	4650      	mov	r0, sl
 800574a:	4659      	mov	r1, fp
 800574c:	f7fb f9c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005750:	ec4b ab19 	vmov	d9, sl, fp
 8005754:	4680      	mov	r8, r0
 8005756:	b158      	cbz	r0, 8005770 <_dtoa_r+0xe0>
 8005758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800575a:	2301      	movs	r3, #1
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 856b 	beq.w	800623c <_dtoa_r+0xbac>
 8005766:	4883      	ldr	r0, [pc, #524]	; (8005974 <_dtoa_r+0x2e4>)
 8005768:	6018      	str	r0, [r3, #0]
 800576a:	1e43      	subs	r3, r0, #1
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	e7df      	b.n	8005730 <_dtoa_r+0xa0>
 8005770:	ec4b ab10 	vmov	d0, sl, fp
 8005774:	aa10      	add	r2, sp, #64	; 0x40
 8005776:	a911      	add	r1, sp, #68	; 0x44
 8005778:	4620      	mov	r0, r4
 800577a:	f001 f8b9 	bl	80068f0 <__d2b>
 800577e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005782:	ee08 0a10 	vmov	s16, r0
 8005786:	2d00      	cmp	r5, #0
 8005788:	f000 8084 	beq.w	8005894 <_dtoa_r+0x204>
 800578c:	ee19 3a90 	vmov	r3, s19
 8005790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005798:	4656      	mov	r6, sl
 800579a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800579e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80057a6:	4b74      	ldr	r3, [pc, #464]	; (8005978 <_dtoa_r+0x2e8>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	4630      	mov	r0, r6
 80057ac:	4639      	mov	r1, r7
 80057ae:	f7fa fd73 	bl	8000298 <__aeabi_dsub>
 80057b2:	a365      	add	r3, pc, #404	; (adr r3, 8005948 <_dtoa_r+0x2b8>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa ff26 	bl	8000608 <__aeabi_dmul>
 80057bc:	a364      	add	r3, pc, #400	; (adr r3, 8005950 <_dtoa_r+0x2c0>)
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	f7fa fd6b 	bl	800029c <__adddf3>
 80057c6:	4606      	mov	r6, r0
 80057c8:	4628      	mov	r0, r5
 80057ca:	460f      	mov	r7, r1
 80057cc:	f7fa feb2 	bl	8000534 <__aeabi_i2d>
 80057d0:	a361      	add	r3, pc, #388	; (adr r3, 8005958 <_dtoa_r+0x2c8>)
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f7fa ff17 	bl	8000608 <__aeabi_dmul>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4630      	mov	r0, r6
 80057e0:	4639      	mov	r1, r7
 80057e2:	f7fa fd5b 	bl	800029c <__adddf3>
 80057e6:	4606      	mov	r6, r0
 80057e8:	460f      	mov	r7, r1
 80057ea:	f7fb f9bd 	bl	8000b68 <__aeabi_d2iz>
 80057ee:	2200      	movs	r2, #0
 80057f0:	9000      	str	r0, [sp, #0]
 80057f2:	2300      	movs	r3, #0
 80057f4:	4630      	mov	r0, r6
 80057f6:	4639      	mov	r1, r7
 80057f8:	f7fb f978 	bl	8000aec <__aeabi_dcmplt>
 80057fc:	b150      	cbz	r0, 8005814 <_dtoa_r+0x184>
 80057fe:	9800      	ldr	r0, [sp, #0]
 8005800:	f7fa fe98 	bl	8000534 <__aeabi_i2d>
 8005804:	4632      	mov	r2, r6
 8005806:	463b      	mov	r3, r7
 8005808:	f7fb f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800580c:	b910      	cbnz	r0, 8005814 <_dtoa_r+0x184>
 800580e:	9b00      	ldr	r3, [sp, #0]
 8005810:	3b01      	subs	r3, #1
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	9b00      	ldr	r3, [sp, #0]
 8005816:	2b16      	cmp	r3, #22
 8005818:	d85a      	bhi.n	80058d0 <_dtoa_r+0x240>
 800581a:	9a00      	ldr	r2, [sp, #0]
 800581c:	4b57      	ldr	r3, [pc, #348]	; (800597c <_dtoa_r+0x2ec>)
 800581e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	ec51 0b19 	vmov	r0, r1, d9
 800582a:	f7fb f95f 	bl	8000aec <__aeabi_dcmplt>
 800582e:	2800      	cmp	r0, #0
 8005830:	d050      	beq.n	80058d4 <_dtoa_r+0x244>
 8005832:	9b00      	ldr	r3, [sp, #0]
 8005834:	3b01      	subs	r3, #1
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	930b      	str	r3, [sp, #44]	; 0x2c
 800583c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800583e:	1b5d      	subs	r5, r3, r5
 8005840:	1e6b      	subs	r3, r5, #1
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	bf45      	ittet	mi
 8005846:	f1c5 0301 	rsbmi	r3, r5, #1
 800584a:	9304      	strmi	r3, [sp, #16]
 800584c:	2300      	movpl	r3, #0
 800584e:	2300      	movmi	r3, #0
 8005850:	bf4c      	ite	mi
 8005852:	9305      	strmi	r3, [sp, #20]
 8005854:	9304      	strpl	r3, [sp, #16]
 8005856:	9b00      	ldr	r3, [sp, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	db3d      	blt.n	80058d8 <_dtoa_r+0x248>
 800585c:	9b05      	ldr	r3, [sp, #20]
 800585e:	9a00      	ldr	r2, [sp, #0]
 8005860:	920a      	str	r2, [sp, #40]	; 0x28
 8005862:	4413      	add	r3, r2
 8005864:	9305      	str	r3, [sp, #20]
 8005866:	2300      	movs	r3, #0
 8005868:	9307      	str	r3, [sp, #28]
 800586a:	9b06      	ldr	r3, [sp, #24]
 800586c:	2b09      	cmp	r3, #9
 800586e:	f200 8089 	bhi.w	8005984 <_dtoa_r+0x2f4>
 8005872:	2b05      	cmp	r3, #5
 8005874:	bfc4      	itt	gt
 8005876:	3b04      	subgt	r3, #4
 8005878:	9306      	strgt	r3, [sp, #24]
 800587a:	9b06      	ldr	r3, [sp, #24]
 800587c:	f1a3 0302 	sub.w	r3, r3, #2
 8005880:	bfcc      	ite	gt
 8005882:	2500      	movgt	r5, #0
 8005884:	2501      	movle	r5, #1
 8005886:	2b03      	cmp	r3, #3
 8005888:	f200 8087 	bhi.w	800599a <_dtoa_r+0x30a>
 800588c:	e8df f003 	tbb	[pc, r3]
 8005890:	59383a2d 	.word	0x59383a2d
 8005894:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005898:	441d      	add	r5, r3
 800589a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800589e:	2b20      	cmp	r3, #32
 80058a0:	bfc1      	itttt	gt
 80058a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80058aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80058ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80058b2:	bfda      	itte	le
 80058b4:	f1c3 0320 	rsble	r3, r3, #32
 80058b8:	fa06 f003 	lslle.w	r0, r6, r3
 80058bc:	4318      	orrgt	r0, r3
 80058be:	f7fa fe29 	bl	8000514 <__aeabi_ui2d>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4606      	mov	r6, r0
 80058c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80058ca:	3d01      	subs	r5, #1
 80058cc:	930e      	str	r3, [sp, #56]	; 0x38
 80058ce:	e76a      	b.n	80057a6 <_dtoa_r+0x116>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e7b2      	b.n	800583a <_dtoa_r+0x1aa>
 80058d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80058d6:	e7b1      	b.n	800583c <_dtoa_r+0x1ac>
 80058d8:	9b04      	ldr	r3, [sp, #16]
 80058da:	9a00      	ldr	r2, [sp, #0]
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	9304      	str	r3, [sp, #16]
 80058e0:	4253      	negs	r3, r2
 80058e2:	9307      	str	r3, [sp, #28]
 80058e4:	2300      	movs	r3, #0
 80058e6:	930a      	str	r3, [sp, #40]	; 0x28
 80058e8:	e7bf      	b.n	800586a <_dtoa_r+0x1da>
 80058ea:	2300      	movs	r3, #0
 80058ec:	9308      	str	r3, [sp, #32]
 80058ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dc55      	bgt.n	80059a0 <_dtoa_r+0x310>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058fa:	461a      	mov	r2, r3
 80058fc:	9209      	str	r2, [sp, #36]	; 0x24
 80058fe:	e00c      	b.n	800591a <_dtoa_r+0x28a>
 8005900:	2301      	movs	r3, #1
 8005902:	e7f3      	b.n	80058ec <_dtoa_r+0x25c>
 8005904:	2300      	movs	r3, #0
 8005906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005908:	9308      	str	r3, [sp, #32]
 800590a:	9b00      	ldr	r3, [sp, #0]
 800590c:	4413      	add	r3, r2
 800590e:	9302      	str	r3, [sp, #8]
 8005910:	3301      	adds	r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	9303      	str	r3, [sp, #12]
 8005916:	bfb8      	it	lt
 8005918:	2301      	movlt	r3, #1
 800591a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800591c:	2200      	movs	r2, #0
 800591e:	6042      	str	r2, [r0, #4]
 8005920:	2204      	movs	r2, #4
 8005922:	f102 0614 	add.w	r6, r2, #20
 8005926:	429e      	cmp	r6, r3
 8005928:	6841      	ldr	r1, [r0, #4]
 800592a:	d93d      	bls.n	80059a8 <_dtoa_r+0x318>
 800592c:	4620      	mov	r0, r4
 800592e:	f000 fcb7 	bl	80062a0 <_Balloc>
 8005932:	9001      	str	r0, [sp, #4]
 8005934:	2800      	cmp	r0, #0
 8005936:	d13b      	bne.n	80059b0 <_dtoa_r+0x320>
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <_dtoa_r+0x2f0>)
 800593a:	4602      	mov	r2, r0
 800593c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005940:	e6c0      	b.n	80056c4 <_dtoa_r+0x34>
 8005942:	2301      	movs	r3, #1
 8005944:	e7df      	b.n	8005906 <_dtoa_r+0x276>
 8005946:	bf00      	nop
 8005948:	636f4361 	.word	0x636f4361
 800594c:	3fd287a7 	.word	0x3fd287a7
 8005950:	8b60c8b3 	.word	0x8b60c8b3
 8005954:	3fc68a28 	.word	0x3fc68a28
 8005958:	509f79fb 	.word	0x509f79fb
 800595c:	3fd34413 	.word	0x3fd34413
 8005960:	08008a2d 	.word	0x08008a2d
 8005964:	08008a44 	.word	0x08008a44
 8005968:	7ff00000 	.word	0x7ff00000
 800596c:	08008a29 	.word	0x08008a29
 8005970:	08008a20 	.word	0x08008a20
 8005974:	080089fd 	.word	0x080089fd
 8005978:	3ff80000 	.word	0x3ff80000
 800597c:	08008b38 	.word	0x08008b38
 8005980:	08008a9f 	.word	0x08008a9f
 8005984:	2501      	movs	r5, #1
 8005986:	2300      	movs	r3, #0
 8005988:	9306      	str	r3, [sp, #24]
 800598a:	9508      	str	r5, [sp, #32]
 800598c:	f04f 33ff 	mov.w	r3, #4294967295
 8005990:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	2312      	movs	r3, #18
 8005998:	e7b0      	b.n	80058fc <_dtoa_r+0x26c>
 800599a:	2301      	movs	r3, #1
 800599c:	9308      	str	r3, [sp, #32]
 800599e:	e7f5      	b.n	800598c <_dtoa_r+0x2fc>
 80059a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059a6:	e7b8      	b.n	800591a <_dtoa_r+0x28a>
 80059a8:	3101      	adds	r1, #1
 80059aa:	6041      	str	r1, [r0, #4]
 80059ac:	0052      	lsls	r2, r2, #1
 80059ae:	e7b8      	b.n	8005922 <_dtoa_r+0x292>
 80059b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059b2:	9a01      	ldr	r2, [sp, #4]
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	2b0e      	cmp	r3, #14
 80059ba:	f200 809d 	bhi.w	8005af8 <_dtoa_r+0x468>
 80059be:	2d00      	cmp	r5, #0
 80059c0:	f000 809a 	beq.w	8005af8 <_dtoa_r+0x468>
 80059c4:	9b00      	ldr	r3, [sp, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	dd32      	ble.n	8005a30 <_dtoa_r+0x3a0>
 80059ca:	4ab7      	ldr	r2, [pc, #732]	; (8005ca8 <_dtoa_r+0x618>)
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059d8:	9b00      	ldr	r3, [sp, #0]
 80059da:	05d8      	lsls	r0, r3, #23
 80059dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80059e0:	d516      	bpl.n	8005a10 <_dtoa_r+0x380>
 80059e2:	4bb2      	ldr	r3, [pc, #712]	; (8005cac <_dtoa_r+0x61c>)
 80059e4:	ec51 0b19 	vmov	r0, r1, d9
 80059e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059ec:	f7fa ff36 	bl	800085c <__aeabi_ddiv>
 80059f0:	f007 070f 	and.w	r7, r7, #15
 80059f4:	4682      	mov	sl, r0
 80059f6:	468b      	mov	fp, r1
 80059f8:	2503      	movs	r5, #3
 80059fa:	4eac      	ldr	r6, [pc, #688]	; (8005cac <_dtoa_r+0x61c>)
 80059fc:	b957      	cbnz	r7, 8005a14 <_dtoa_r+0x384>
 80059fe:	4642      	mov	r2, r8
 8005a00:	464b      	mov	r3, r9
 8005a02:	4650      	mov	r0, sl
 8005a04:	4659      	mov	r1, fp
 8005a06:	f7fa ff29 	bl	800085c <__aeabi_ddiv>
 8005a0a:	4682      	mov	sl, r0
 8005a0c:	468b      	mov	fp, r1
 8005a0e:	e028      	b.n	8005a62 <_dtoa_r+0x3d2>
 8005a10:	2502      	movs	r5, #2
 8005a12:	e7f2      	b.n	80059fa <_dtoa_r+0x36a>
 8005a14:	07f9      	lsls	r1, r7, #31
 8005a16:	d508      	bpl.n	8005a2a <_dtoa_r+0x39a>
 8005a18:	4640      	mov	r0, r8
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a20:	f7fa fdf2 	bl	8000608 <__aeabi_dmul>
 8005a24:	3501      	adds	r5, #1
 8005a26:	4680      	mov	r8, r0
 8005a28:	4689      	mov	r9, r1
 8005a2a:	107f      	asrs	r7, r7, #1
 8005a2c:	3608      	adds	r6, #8
 8005a2e:	e7e5      	b.n	80059fc <_dtoa_r+0x36c>
 8005a30:	f000 809b 	beq.w	8005b6a <_dtoa_r+0x4da>
 8005a34:	9b00      	ldr	r3, [sp, #0]
 8005a36:	4f9d      	ldr	r7, [pc, #628]	; (8005cac <_dtoa_r+0x61c>)
 8005a38:	425e      	negs	r6, r3
 8005a3a:	4b9b      	ldr	r3, [pc, #620]	; (8005ca8 <_dtoa_r+0x618>)
 8005a3c:	f006 020f 	and.w	r2, r6, #15
 8005a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	ec51 0b19 	vmov	r0, r1, d9
 8005a4c:	f7fa fddc 	bl	8000608 <__aeabi_dmul>
 8005a50:	1136      	asrs	r6, r6, #4
 8005a52:	4682      	mov	sl, r0
 8005a54:	468b      	mov	fp, r1
 8005a56:	2300      	movs	r3, #0
 8005a58:	2502      	movs	r5, #2
 8005a5a:	2e00      	cmp	r6, #0
 8005a5c:	d17a      	bne.n	8005b54 <_dtoa_r+0x4c4>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1d3      	bne.n	8005a0a <_dtoa_r+0x37a>
 8005a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8082 	beq.w	8005b6e <_dtoa_r+0x4de>
 8005a6a:	4b91      	ldr	r3, [pc, #580]	; (8005cb0 <_dtoa_r+0x620>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4650      	mov	r0, sl
 8005a70:	4659      	mov	r1, fp
 8005a72:	f7fb f83b 	bl	8000aec <__aeabi_dcmplt>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d079      	beq.n	8005b6e <_dtoa_r+0x4de>
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d076      	beq.n	8005b6e <_dtoa_r+0x4de>
 8005a80:	9b02      	ldr	r3, [sp, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	dd36      	ble.n	8005af4 <_dtoa_r+0x464>
 8005a86:	9b00      	ldr	r3, [sp, #0]
 8005a88:	4650      	mov	r0, sl
 8005a8a:	4659      	mov	r1, fp
 8005a8c:	1e5f      	subs	r7, r3, #1
 8005a8e:	2200      	movs	r2, #0
 8005a90:	4b88      	ldr	r3, [pc, #544]	; (8005cb4 <_dtoa_r+0x624>)
 8005a92:	f7fa fdb9 	bl	8000608 <__aeabi_dmul>
 8005a96:	9e02      	ldr	r6, [sp, #8]
 8005a98:	4682      	mov	sl, r0
 8005a9a:	468b      	mov	fp, r1
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f7fa fd48 	bl	8000534 <__aeabi_i2d>
 8005aa4:	4652      	mov	r2, sl
 8005aa6:	465b      	mov	r3, fp
 8005aa8:	f7fa fdae 	bl	8000608 <__aeabi_dmul>
 8005aac:	4b82      	ldr	r3, [pc, #520]	; (8005cb8 <_dtoa_r+0x628>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f7fa fbf4 	bl	800029c <__adddf3>
 8005ab4:	46d0      	mov	r8, sl
 8005ab6:	46d9      	mov	r9, fp
 8005ab8:	4682      	mov	sl, r0
 8005aba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005abe:	2e00      	cmp	r6, #0
 8005ac0:	d158      	bne.n	8005b74 <_dtoa_r+0x4e4>
 8005ac2:	4b7e      	ldr	r3, [pc, #504]	; (8005cbc <_dtoa_r+0x62c>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4649      	mov	r1, r9
 8005aca:	f7fa fbe5 	bl	8000298 <__aeabi_dsub>
 8005ace:	4652      	mov	r2, sl
 8005ad0:	465b      	mov	r3, fp
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	4689      	mov	r9, r1
 8005ad6:	f7fb f827 	bl	8000b28 <__aeabi_dcmpgt>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	f040 8295 	bne.w	800600a <_dtoa_r+0x97a>
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	4649      	mov	r1, r9
 8005aea:	f7fa ffff 	bl	8000aec <__aeabi_dcmplt>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	f040 8289 	bne.w	8006006 <_dtoa_r+0x976>
 8005af4:	ec5b ab19 	vmov	sl, fp, d9
 8005af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f2c0 8148 	blt.w	8005d90 <_dtoa_r+0x700>
 8005b00:	9a00      	ldr	r2, [sp, #0]
 8005b02:	2a0e      	cmp	r2, #14
 8005b04:	f300 8144 	bgt.w	8005d90 <_dtoa_r+0x700>
 8005b08:	4b67      	ldr	r3, [pc, #412]	; (8005ca8 <_dtoa_r+0x618>)
 8005b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f280 80d5 	bge.w	8005cc4 <_dtoa_r+0x634>
 8005b1a:	9b03      	ldr	r3, [sp, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f300 80d1 	bgt.w	8005cc4 <_dtoa_r+0x634>
 8005b22:	f040 826f 	bne.w	8006004 <_dtoa_r+0x974>
 8005b26:	4b65      	ldr	r3, [pc, #404]	; (8005cbc <_dtoa_r+0x62c>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	f7fa fd6b 	bl	8000608 <__aeabi_dmul>
 8005b32:	4652      	mov	r2, sl
 8005b34:	465b      	mov	r3, fp
 8005b36:	f7fa ffed 	bl	8000b14 <__aeabi_dcmpge>
 8005b3a:	9e03      	ldr	r6, [sp, #12]
 8005b3c:	4637      	mov	r7, r6
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f040 8245 	bne.w	8005fce <_dtoa_r+0x93e>
 8005b44:	9d01      	ldr	r5, [sp, #4]
 8005b46:	2331      	movs	r3, #49	; 0x31
 8005b48:	f805 3b01 	strb.w	r3, [r5], #1
 8005b4c:	9b00      	ldr	r3, [sp, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	e240      	b.n	8005fd6 <_dtoa_r+0x946>
 8005b54:	07f2      	lsls	r2, r6, #31
 8005b56:	d505      	bpl.n	8005b64 <_dtoa_r+0x4d4>
 8005b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b5c:	f7fa fd54 	bl	8000608 <__aeabi_dmul>
 8005b60:	3501      	adds	r5, #1
 8005b62:	2301      	movs	r3, #1
 8005b64:	1076      	asrs	r6, r6, #1
 8005b66:	3708      	adds	r7, #8
 8005b68:	e777      	b.n	8005a5a <_dtoa_r+0x3ca>
 8005b6a:	2502      	movs	r5, #2
 8005b6c:	e779      	b.n	8005a62 <_dtoa_r+0x3d2>
 8005b6e:	9f00      	ldr	r7, [sp, #0]
 8005b70:	9e03      	ldr	r6, [sp, #12]
 8005b72:	e794      	b.n	8005a9e <_dtoa_r+0x40e>
 8005b74:	9901      	ldr	r1, [sp, #4]
 8005b76:	4b4c      	ldr	r3, [pc, #304]	; (8005ca8 <_dtoa_r+0x618>)
 8005b78:	4431      	add	r1, r6
 8005b7a:	910d      	str	r1, [sp, #52]	; 0x34
 8005b7c:	9908      	ldr	r1, [sp, #32]
 8005b7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b86:	2900      	cmp	r1, #0
 8005b88:	d043      	beq.n	8005c12 <_dtoa_r+0x582>
 8005b8a:	494d      	ldr	r1, [pc, #308]	; (8005cc0 <_dtoa_r+0x630>)
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f7fa fe65 	bl	800085c <__aeabi_ddiv>
 8005b92:	4652      	mov	r2, sl
 8005b94:	465b      	mov	r3, fp
 8005b96:	f7fa fb7f 	bl	8000298 <__aeabi_dsub>
 8005b9a:	9d01      	ldr	r5, [sp, #4]
 8005b9c:	4682      	mov	sl, r0
 8005b9e:	468b      	mov	fp, r1
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	f7fa ffe0 	bl	8000b68 <__aeabi_d2iz>
 8005ba8:	4606      	mov	r6, r0
 8005baa:	f7fa fcc3 	bl	8000534 <__aeabi_i2d>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	f7fa fb6f 	bl	8000298 <__aeabi_dsub>
 8005bba:	3630      	adds	r6, #48	; 0x30
 8005bbc:	f805 6b01 	strb.w	r6, [r5], #1
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	465b      	mov	r3, fp
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	4689      	mov	r9, r1
 8005bc8:	f7fa ff90 	bl	8000aec <__aeabi_dcmplt>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d163      	bne.n	8005c98 <_dtoa_r+0x608>
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	4936      	ldr	r1, [pc, #216]	; (8005cb0 <_dtoa_r+0x620>)
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	f7fa fb5e 	bl	8000298 <__aeabi_dsub>
 8005bdc:	4652      	mov	r2, sl
 8005bde:	465b      	mov	r3, fp
 8005be0:	f7fa ff84 	bl	8000aec <__aeabi_dcmplt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f040 80b5 	bne.w	8005d54 <_dtoa_r+0x6c4>
 8005bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bec:	429d      	cmp	r5, r3
 8005bee:	d081      	beq.n	8005af4 <_dtoa_r+0x464>
 8005bf0:	4b30      	ldr	r3, [pc, #192]	; (8005cb4 <_dtoa_r+0x624>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	4650      	mov	r0, sl
 8005bf6:	4659      	mov	r1, fp
 8005bf8:	f7fa fd06 	bl	8000608 <__aeabi_dmul>
 8005bfc:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <_dtoa_r+0x624>)
 8005bfe:	4682      	mov	sl, r0
 8005c00:	468b      	mov	fp, r1
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	2200      	movs	r2, #0
 8005c08:	f7fa fcfe 	bl	8000608 <__aeabi_dmul>
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	4689      	mov	r9, r1
 8005c10:	e7c6      	b.n	8005ba0 <_dtoa_r+0x510>
 8005c12:	4650      	mov	r0, sl
 8005c14:	4659      	mov	r1, fp
 8005c16:	f7fa fcf7 	bl	8000608 <__aeabi_dmul>
 8005c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c1c:	9d01      	ldr	r5, [sp, #4]
 8005c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c20:	4682      	mov	sl, r0
 8005c22:	468b      	mov	fp, r1
 8005c24:	4649      	mov	r1, r9
 8005c26:	4640      	mov	r0, r8
 8005c28:	f7fa ff9e 	bl	8000b68 <__aeabi_d2iz>
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	f7fa fc81 	bl	8000534 <__aeabi_i2d>
 8005c32:	3630      	adds	r6, #48	; 0x30
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	f7fa fb2c 	bl	8000298 <__aeabi_dsub>
 8005c40:	f805 6b01 	strb.w	r6, [r5], #1
 8005c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c46:	429d      	cmp	r5, r3
 8005c48:	4680      	mov	r8, r0
 8005c4a:	4689      	mov	r9, r1
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	d124      	bne.n	8005c9c <_dtoa_r+0x60c>
 8005c52:	4b1b      	ldr	r3, [pc, #108]	; (8005cc0 <_dtoa_r+0x630>)
 8005c54:	4650      	mov	r0, sl
 8005c56:	4659      	mov	r1, fp
 8005c58:	f7fa fb20 	bl	800029c <__adddf3>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa ff60 	bl	8000b28 <__aeabi_dcmpgt>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d173      	bne.n	8005d54 <_dtoa_r+0x6c4>
 8005c6c:	4652      	mov	r2, sl
 8005c6e:	465b      	mov	r3, fp
 8005c70:	4913      	ldr	r1, [pc, #76]	; (8005cc0 <_dtoa_r+0x630>)
 8005c72:	2000      	movs	r0, #0
 8005c74:	f7fa fb10 	bl	8000298 <__aeabi_dsub>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4640      	mov	r0, r8
 8005c7e:	4649      	mov	r1, r9
 8005c80:	f7fa ff34 	bl	8000aec <__aeabi_dcmplt>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	f43f af35 	beq.w	8005af4 <_dtoa_r+0x464>
 8005c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c8c:	1e6b      	subs	r3, r5, #1
 8005c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d0f8      	beq.n	8005c8a <_dtoa_r+0x5fa>
 8005c98:	9700      	str	r7, [sp, #0]
 8005c9a:	e049      	b.n	8005d30 <_dtoa_r+0x6a0>
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <_dtoa_r+0x624>)
 8005c9e:	f7fa fcb3 	bl	8000608 <__aeabi_dmul>
 8005ca2:	4680      	mov	r8, r0
 8005ca4:	4689      	mov	r9, r1
 8005ca6:	e7bd      	b.n	8005c24 <_dtoa_r+0x594>
 8005ca8:	08008b38 	.word	0x08008b38
 8005cac:	08008b10 	.word	0x08008b10
 8005cb0:	3ff00000 	.word	0x3ff00000
 8005cb4:	40240000 	.word	0x40240000
 8005cb8:	401c0000 	.word	0x401c0000
 8005cbc:	40140000 	.word	0x40140000
 8005cc0:	3fe00000 	.word	0x3fe00000
 8005cc4:	9d01      	ldr	r5, [sp, #4]
 8005cc6:	4656      	mov	r6, sl
 8005cc8:	465f      	mov	r7, fp
 8005cca:	4642      	mov	r2, r8
 8005ccc:	464b      	mov	r3, r9
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	f7fa fdc3 	bl	800085c <__aeabi_ddiv>
 8005cd6:	f7fa ff47 	bl	8000b68 <__aeabi_d2iz>
 8005cda:	4682      	mov	sl, r0
 8005cdc:	f7fa fc2a 	bl	8000534 <__aeabi_i2d>
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	f7fa fc90 	bl	8000608 <__aeabi_dmul>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4630      	mov	r0, r6
 8005cee:	4639      	mov	r1, r7
 8005cf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005cf4:	f7fa fad0 	bl	8000298 <__aeabi_dsub>
 8005cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8005cfc:	9e01      	ldr	r6, [sp, #4]
 8005cfe:	9f03      	ldr	r7, [sp, #12]
 8005d00:	1bae      	subs	r6, r5, r6
 8005d02:	42b7      	cmp	r7, r6
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	d135      	bne.n	8005d76 <_dtoa_r+0x6e6>
 8005d0a:	f7fa fac7 	bl	800029c <__adddf3>
 8005d0e:	4642      	mov	r2, r8
 8005d10:	464b      	mov	r3, r9
 8005d12:	4606      	mov	r6, r0
 8005d14:	460f      	mov	r7, r1
 8005d16:	f7fa ff07 	bl	8000b28 <__aeabi_dcmpgt>
 8005d1a:	b9d0      	cbnz	r0, 8005d52 <_dtoa_r+0x6c2>
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	464b      	mov	r3, r9
 8005d20:	4630      	mov	r0, r6
 8005d22:	4639      	mov	r1, r7
 8005d24:	f7fa fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d28:	b110      	cbz	r0, 8005d30 <_dtoa_r+0x6a0>
 8005d2a:	f01a 0f01 	tst.w	sl, #1
 8005d2e:	d110      	bne.n	8005d52 <_dtoa_r+0x6c2>
 8005d30:	4620      	mov	r0, r4
 8005d32:	ee18 1a10 	vmov	r1, s16
 8005d36:	f000 faf3 	bl	8006320 <_Bfree>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9800      	ldr	r0, [sp, #0]
 8005d3e:	702b      	strb	r3, [r5, #0]
 8005d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d42:	3001      	adds	r0, #1
 8005d44:	6018      	str	r0, [r3, #0]
 8005d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f43f acf1 	beq.w	8005730 <_dtoa_r+0xa0>
 8005d4e:	601d      	str	r5, [r3, #0]
 8005d50:	e4ee      	b.n	8005730 <_dtoa_r+0xa0>
 8005d52:	9f00      	ldr	r7, [sp, #0]
 8005d54:	462b      	mov	r3, r5
 8005d56:	461d      	mov	r5, r3
 8005d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d5c:	2a39      	cmp	r2, #57	; 0x39
 8005d5e:	d106      	bne.n	8005d6e <_dtoa_r+0x6de>
 8005d60:	9a01      	ldr	r2, [sp, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d1f7      	bne.n	8005d56 <_dtoa_r+0x6c6>
 8005d66:	9901      	ldr	r1, [sp, #4]
 8005d68:	2230      	movs	r2, #48	; 0x30
 8005d6a:	3701      	adds	r7, #1
 8005d6c:	700a      	strb	r2, [r1, #0]
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	3201      	adds	r2, #1
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e790      	b.n	8005c98 <_dtoa_r+0x608>
 8005d76:	4ba6      	ldr	r3, [pc, #664]	; (8006010 <_dtoa_r+0x980>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f7fa fc45 	bl	8000608 <__aeabi_dmul>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	4606      	mov	r6, r0
 8005d84:	460f      	mov	r7, r1
 8005d86:	f7fa fea7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	d09d      	beq.n	8005cca <_dtoa_r+0x63a>
 8005d8e:	e7cf      	b.n	8005d30 <_dtoa_r+0x6a0>
 8005d90:	9a08      	ldr	r2, [sp, #32]
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	f000 80d7 	beq.w	8005f46 <_dtoa_r+0x8b6>
 8005d98:	9a06      	ldr	r2, [sp, #24]
 8005d9a:	2a01      	cmp	r2, #1
 8005d9c:	f300 80ba 	bgt.w	8005f14 <_dtoa_r+0x884>
 8005da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	f000 80b2 	beq.w	8005f0c <_dtoa_r+0x87c>
 8005da8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dac:	9e07      	ldr	r6, [sp, #28]
 8005dae:	9d04      	ldr	r5, [sp, #16]
 8005db0:	9a04      	ldr	r2, [sp, #16]
 8005db2:	441a      	add	r2, r3
 8005db4:	9204      	str	r2, [sp, #16]
 8005db6:	9a05      	ldr	r2, [sp, #20]
 8005db8:	2101      	movs	r1, #1
 8005dba:	441a      	add	r2, r3
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	9205      	str	r2, [sp, #20]
 8005dc0:	f000 fb66 	bl	8006490 <__i2b>
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	2d00      	cmp	r5, #0
 8005dc8:	dd0c      	ble.n	8005de4 <_dtoa_r+0x754>
 8005dca:	9b05      	ldr	r3, [sp, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dd09      	ble.n	8005de4 <_dtoa_r+0x754>
 8005dd0:	42ab      	cmp	r3, r5
 8005dd2:	9a04      	ldr	r2, [sp, #16]
 8005dd4:	bfa8      	it	ge
 8005dd6:	462b      	movge	r3, r5
 8005dd8:	1ad2      	subs	r2, r2, r3
 8005dda:	9204      	str	r2, [sp, #16]
 8005ddc:	9a05      	ldr	r2, [sp, #20]
 8005dde:	1aed      	subs	r5, r5, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	9305      	str	r3, [sp, #20]
 8005de4:	9b07      	ldr	r3, [sp, #28]
 8005de6:	b31b      	cbz	r3, 8005e30 <_dtoa_r+0x7a0>
 8005de8:	9b08      	ldr	r3, [sp, #32]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80af 	beq.w	8005f4e <_dtoa_r+0x8be>
 8005df0:	2e00      	cmp	r6, #0
 8005df2:	dd13      	ble.n	8005e1c <_dtoa_r+0x78c>
 8005df4:	4639      	mov	r1, r7
 8005df6:	4632      	mov	r2, r6
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 fc09 	bl	8006610 <__pow5mult>
 8005dfe:	ee18 2a10 	vmov	r2, s16
 8005e02:	4601      	mov	r1, r0
 8005e04:	4607      	mov	r7, r0
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 fb58 	bl	80064bc <__multiply>
 8005e0c:	ee18 1a10 	vmov	r1, s16
 8005e10:	4680      	mov	r8, r0
 8005e12:	4620      	mov	r0, r4
 8005e14:	f000 fa84 	bl	8006320 <_Bfree>
 8005e18:	ee08 8a10 	vmov	s16, r8
 8005e1c:	9b07      	ldr	r3, [sp, #28]
 8005e1e:	1b9a      	subs	r2, r3, r6
 8005e20:	d006      	beq.n	8005e30 <_dtoa_r+0x7a0>
 8005e22:	ee18 1a10 	vmov	r1, s16
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 fbf2 	bl	8006610 <__pow5mult>
 8005e2c:	ee08 0a10 	vmov	s16, r0
 8005e30:	2101      	movs	r1, #1
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 fb2c 	bl	8006490 <__i2b>
 8005e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	f340 8088 	ble.w	8005f52 <_dtoa_r+0x8c2>
 8005e42:	461a      	mov	r2, r3
 8005e44:	4601      	mov	r1, r0
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 fbe2 	bl	8006610 <__pow5mult>
 8005e4c:	9b06      	ldr	r3, [sp, #24]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	4606      	mov	r6, r0
 8005e52:	f340 8081 	ble.w	8005f58 <_dtoa_r+0x8c8>
 8005e56:	f04f 0800 	mov.w	r8, #0
 8005e5a:	6933      	ldr	r3, [r6, #16]
 8005e5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e60:	6918      	ldr	r0, [r3, #16]
 8005e62:	f000 fac5 	bl	80063f0 <__hi0bits>
 8005e66:	f1c0 0020 	rsb	r0, r0, #32
 8005e6a:	9b05      	ldr	r3, [sp, #20]
 8005e6c:	4418      	add	r0, r3
 8005e6e:	f010 001f 	ands.w	r0, r0, #31
 8005e72:	f000 8092 	beq.w	8005f9a <_dtoa_r+0x90a>
 8005e76:	f1c0 0320 	rsb	r3, r0, #32
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	f340 808a 	ble.w	8005f94 <_dtoa_r+0x904>
 8005e80:	f1c0 001c 	rsb	r0, r0, #28
 8005e84:	9b04      	ldr	r3, [sp, #16]
 8005e86:	4403      	add	r3, r0
 8005e88:	9304      	str	r3, [sp, #16]
 8005e8a:	9b05      	ldr	r3, [sp, #20]
 8005e8c:	4403      	add	r3, r0
 8005e8e:	4405      	add	r5, r0
 8005e90:	9305      	str	r3, [sp, #20]
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	dd07      	ble.n	8005ea8 <_dtoa_r+0x818>
 8005e98:	ee18 1a10 	vmov	r1, s16
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 fc10 	bl	80066c4 <__lshift>
 8005ea4:	ee08 0a10 	vmov	s16, r0
 8005ea8:	9b05      	ldr	r3, [sp, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dd05      	ble.n	8005eba <_dtoa_r+0x82a>
 8005eae:	4631      	mov	r1, r6
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 fc06 	bl	80066c4 <__lshift>
 8005eb8:	4606      	mov	r6, r0
 8005eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d06e      	beq.n	8005f9e <_dtoa_r+0x90e>
 8005ec0:	ee18 0a10 	vmov	r0, s16
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	f000 fc6d 	bl	80067a4 <__mcmp>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	da67      	bge.n	8005f9e <_dtoa_r+0x90e>
 8005ece:	9b00      	ldr	r3, [sp, #0]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	ee18 1a10 	vmov	r1, s16
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	220a      	movs	r2, #10
 8005eda:	2300      	movs	r3, #0
 8005edc:	4620      	mov	r0, r4
 8005ede:	f000 fa41 	bl	8006364 <__multadd>
 8005ee2:	9b08      	ldr	r3, [sp, #32]
 8005ee4:	ee08 0a10 	vmov	s16, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 81b1 	beq.w	8006250 <_dtoa_r+0xbc0>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	220a      	movs	r2, #10
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 fa35 	bl	8006364 <__multadd>
 8005efa:	9b02      	ldr	r3, [sp, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	4607      	mov	r7, r0
 8005f00:	f300 808e 	bgt.w	8006020 <_dtoa_r+0x990>
 8005f04:	9b06      	ldr	r3, [sp, #24]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	dc51      	bgt.n	8005fae <_dtoa_r+0x91e>
 8005f0a:	e089      	b.n	8006020 <_dtoa_r+0x990>
 8005f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f12:	e74b      	b.n	8005dac <_dtoa_r+0x71c>
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	1e5e      	subs	r6, r3, #1
 8005f18:	9b07      	ldr	r3, [sp, #28]
 8005f1a:	42b3      	cmp	r3, r6
 8005f1c:	bfbf      	itttt	lt
 8005f1e:	9b07      	ldrlt	r3, [sp, #28]
 8005f20:	9607      	strlt	r6, [sp, #28]
 8005f22:	1af2      	sublt	r2, r6, r3
 8005f24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005f26:	bfb6      	itet	lt
 8005f28:	189b      	addlt	r3, r3, r2
 8005f2a:	1b9e      	subge	r6, r3, r6
 8005f2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	bfb8      	it	lt
 8005f32:	2600      	movlt	r6, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bfb7      	itett	lt
 8005f38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005f3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005f40:	1a9d      	sublt	r5, r3, r2
 8005f42:	2300      	movlt	r3, #0
 8005f44:	e734      	b.n	8005db0 <_dtoa_r+0x720>
 8005f46:	9e07      	ldr	r6, [sp, #28]
 8005f48:	9d04      	ldr	r5, [sp, #16]
 8005f4a:	9f08      	ldr	r7, [sp, #32]
 8005f4c:	e73b      	b.n	8005dc6 <_dtoa_r+0x736>
 8005f4e:	9a07      	ldr	r2, [sp, #28]
 8005f50:	e767      	b.n	8005e22 <_dtoa_r+0x792>
 8005f52:	9b06      	ldr	r3, [sp, #24]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	dc18      	bgt.n	8005f8a <_dtoa_r+0x8fa>
 8005f58:	f1ba 0f00 	cmp.w	sl, #0
 8005f5c:	d115      	bne.n	8005f8a <_dtoa_r+0x8fa>
 8005f5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f62:	b993      	cbnz	r3, 8005f8a <_dtoa_r+0x8fa>
 8005f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f68:	0d1b      	lsrs	r3, r3, #20
 8005f6a:	051b      	lsls	r3, r3, #20
 8005f6c:	b183      	cbz	r3, 8005f90 <_dtoa_r+0x900>
 8005f6e:	9b04      	ldr	r3, [sp, #16]
 8005f70:	3301      	adds	r3, #1
 8005f72:	9304      	str	r3, [sp, #16]
 8005f74:	9b05      	ldr	r3, [sp, #20]
 8005f76:	3301      	adds	r3, #1
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	f04f 0801 	mov.w	r8, #1
 8005f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f47f af6a 	bne.w	8005e5a <_dtoa_r+0x7ca>
 8005f86:	2001      	movs	r0, #1
 8005f88:	e76f      	b.n	8005e6a <_dtoa_r+0x7da>
 8005f8a:	f04f 0800 	mov.w	r8, #0
 8005f8e:	e7f6      	b.n	8005f7e <_dtoa_r+0x8ee>
 8005f90:	4698      	mov	r8, r3
 8005f92:	e7f4      	b.n	8005f7e <_dtoa_r+0x8ee>
 8005f94:	f43f af7d 	beq.w	8005e92 <_dtoa_r+0x802>
 8005f98:	4618      	mov	r0, r3
 8005f9a:	301c      	adds	r0, #28
 8005f9c:	e772      	b.n	8005e84 <_dtoa_r+0x7f4>
 8005f9e:	9b03      	ldr	r3, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dc37      	bgt.n	8006014 <_dtoa_r+0x984>
 8005fa4:	9b06      	ldr	r3, [sp, #24]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	dd34      	ble.n	8006014 <_dtoa_r+0x984>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	9302      	str	r3, [sp, #8]
 8005fae:	9b02      	ldr	r3, [sp, #8]
 8005fb0:	b96b      	cbnz	r3, 8005fce <_dtoa_r+0x93e>
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f000 f9d4 	bl	8006364 <__multadd>
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	ee18 0a10 	vmov	r0, s16
 8005fc4:	f000 fbee 	bl	80067a4 <__mcmp>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f73f adbb 	bgt.w	8005b44 <_dtoa_r+0x4b4>
 8005fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd0:	9d01      	ldr	r5, [sp, #4]
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	f04f 0800 	mov.w	r8, #0
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f000 f99f 	bl	8006320 <_Bfree>
 8005fe2:	2f00      	cmp	r7, #0
 8005fe4:	f43f aea4 	beq.w	8005d30 <_dtoa_r+0x6a0>
 8005fe8:	f1b8 0f00 	cmp.w	r8, #0
 8005fec:	d005      	beq.n	8005ffa <_dtoa_r+0x96a>
 8005fee:	45b8      	cmp	r8, r7
 8005ff0:	d003      	beq.n	8005ffa <_dtoa_r+0x96a>
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 f993 	bl	8006320 <_Bfree>
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 f98f 	bl	8006320 <_Bfree>
 8006002:	e695      	b.n	8005d30 <_dtoa_r+0x6a0>
 8006004:	2600      	movs	r6, #0
 8006006:	4637      	mov	r7, r6
 8006008:	e7e1      	b.n	8005fce <_dtoa_r+0x93e>
 800600a:	9700      	str	r7, [sp, #0]
 800600c:	4637      	mov	r7, r6
 800600e:	e599      	b.n	8005b44 <_dtoa_r+0x4b4>
 8006010:	40240000 	.word	0x40240000
 8006014:	9b08      	ldr	r3, [sp, #32]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80ca 	beq.w	80061b0 <_dtoa_r+0xb20>
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	9302      	str	r3, [sp, #8]
 8006020:	2d00      	cmp	r5, #0
 8006022:	dd05      	ble.n	8006030 <_dtoa_r+0x9a0>
 8006024:	4639      	mov	r1, r7
 8006026:	462a      	mov	r2, r5
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fb4b 	bl	80066c4 <__lshift>
 800602e:	4607      	mov	r7, r0
 8006030:	f1b8 0f00 	cmp.w	r8, #0
 8006034:	d05b      	beq.n	80060ee <_dtoa_r+0xa5e>
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f931 	bl	80062a0 <_Balloc>
 800603e:	4605      	mov	r5, r0
 8006040:	b928      	cbnz	r0, 800604e <_dtoa_r+0x9be>
 8006042:	4b87      	ldr	r3, [pc, #540]	; (8006260 <_dtoa_r+0xbd0>)
 8006044:	4602      	mov	r2, r0
 8006046:	f240 21ea 	movw	r1, #746	; 0x2ea
 800604a:	f7ff bb3b 	b.w	80056c4 <_dtoa_r+0x34>
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	3202      	adds	r2, #2
 8006052:	0092      	lsls	r2, r2, #2
 8006054:	f107 010c 	add.w	r1, r7, #12
 8006058:	300c      	adds	r0, #12
 800605a:	f000 f913 	bl	8006284 <memcpy>
 800605e:	2201      	movs	r2, #1
 8006060:	4629      	mov	r1, r5
 8006062:	4620      	mov	r0, r4
 8006064:	f000 fb2e 	bl	80066c4 <__lshift>
 8006068:	9b01      	ldr	r3, [sp, #4]
 800606a:	f103 0901 	add.w	r9, r3, #1
 800606e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006072:	4413      	add	r3, r2
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	f00a 0301 	and.w	r3, sl, #1
 800607a:	46b8      	mov	r8, r7
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	4607      	mov	r7, r0
 8006080:	4631      	mov	r1, r6
 8006082:	ee18 0a10 	vmov	r0, s16
 8006086:	f7ff fa75 	bl	8005574 <quorem>
 800608a:	4641      	mov	r1, r8
 800608c:	9002      	str	r0, [sp, #8]
 800608e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006092:	ee18 0a10 	vmov	r0, s16
 8006096:	f000 fb85 	bl	80067a4 <__mcmp>
 800609a:	463a      	mov	r2, r7
 800609c:	9003      	str	r0, [sp, #12]
 800609e:	4631      	mov	r1, r6
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 fb9b 	bl	80067dc <__mdiff>
 80060a6:	68c2      	ldr	r2, [r0, #12]
 80060a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80060ac:	4605      	mov	r5, r0
 80060ae:	bb02      	cbnz	r2, 80060f2 <_dtoa_r+0xa62>
 80060b0:	4601      	mov	r1, r0
 80060b2:	ee18 0a10 	vmov	r0, s16
 80060b6:	f000 fb75 	bl	80067a4 <__mcmp>
 80060ba:	4602      	mov	r2, r0
 80060bc:	4629      	mov	r1, r5
 80060be:	4620      	mov	r0, r4
 80060c0:	9207      	str	r2, [sp, #28]
 80060c2:	f000 f92d 	bl	8006320 <_Bfree>
 80060c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80060ca:	ea43 0102 	orr.w	r1, r3, r2
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	430b      	orrs	r3, r1
 80060d2:	464d      	mov	r5, r9
 80060d4:	d10f      	bne.n	80060f6 <_dtoa_r+0xa66>
 80060d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060da:	d02a      	beq.n	8006132 <_dtoa_r+0xaa2>
 80060dc:	9b03      	ldr	r3, [sp, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd02      	ble.n	80060e8 <_dtoa_r+0xa58>
 80060e2:	9b02      	ldr	r3, [sp, #8]
 80060e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80060e8:	f88b a000 	strb.w	sl, [fp]
 80060ec:	e775      	b.n	8005fda <_dtoa_r+0x94a>
 80060ee:	4638      	mov	r0, r7
 80060f0:	e7ba      	b.n	8006068 <_dtoa_r+0x9d8>
 80060f2:	2201      	movs	r2, #1
 80060f4:	e7e2      	b.n	80060bc <_dtoa_r+0xa2c>
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db04      	blt.n	8006106 <_dtoa_r+0xa76>
 80060fc:	9906      	ldr	r1, [sp, #24]
 80060fe:	430b      	orrs	r3, r1
 8006100:	9904      	ldr	r1, [sp, #16]
 8006102:	430b      	orrs	r3, r1
 8006104:	d122      	bne.n	800614c <_dtoa_r+0xabc>
 8006106:	2a00      	cmp	r2, #0
 8006108:	ddee      	ble.n	80060e8 <_dtoa_r+0xa58>
 800610a:	ee18 1a10 	vmov	r1, s16
 800610e:	2201      	movs	r2, #1
 8006110:	4620      	mov	r0, r4
 8006112:	f000 fad7 	bl	80066c4 <__lshift>
 8006116:	4631      	mov	r1, r6
 8006118:	ee08 0a10 	vmov	s16, r0
 800611c:	f000 fb42 	bl	80067a4 <__mcmp>
 8006120:	2800      	cmp	r0, #0
 8006122:	dc03      	bgt.n	800612c <_dtoa_r+0xa9c>
 8006124:	d1e0      	bne.n	80060e8 <_dtoa_r+0xa58>
 8006126:	f01a 0f01 	tst.w	sl, #1
 800612a:	d0dd      	beq.n	80060e8 <_dtoa_r+0xa58>
 800612c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006130:	d1d7      	bne.n	80060e2 <_dtoa_r+0xa52>
 8006132:	2339      	movs	r3, #57	; 0x39
 8006134:	f88b 3000 	strb.w	r3, [fp]
 8006138:	462b      	mov	r3, r5
 800613a:	461d      	mov	r5, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006142:	2a39      	cmp	r2, #57	; 0x39
 8006144:	d071      	beq.n	800622a <_dtoa_r+0xb9a>
 8006146:	3201      	adds	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e746      	b.n	8005fda <_dtoa_r+0x94a>
 800614c:	2a00      	cmp	r2, #0
 800614e:	dd07      	ble.n	8006160 <_dtoa_r+0xad0>
 8006150:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006154:	d0ed      	beq.n	8006132 <_dtoa_r+0xaa2>
 8006156:	f10a 0301 	add.w	r3, sl, #1
 800615a:	f88b 3000 	strb.w	r3, [fp]
 800615e:	e73c      	b.n	8005fda <_dtoa_r+0x94a>
 8006160:	9b05      	ldr	r3, [sp, #20]
 8006162:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006166:	4599      	cmp	r9, r3
 8006168:	d047      	beq.n	80061fa <_dtoa_r+0xb6a>
 800616a:	ee18 1a10 	vmov	r1, s16
 800616e:	2300      	movs	r3, #0
 8006170:	220a      	movs	r2, #10
 8006172:	4620      	mov	r0, r4
 8006174:	f000 f8f6 	bl	8006364 <__multadd>
 8006178:	45b8      	cmp	r8, r7
 800617a:	ee08 0a10 	vmov	s16, r0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	f04f 020a 	mov.w	r2, #10
 8006186:	4641      	mov	r1, r8
 8006188:	4620      	mov	r0, r4
 800618a:	d106      	bne.n	800619a <_dtoa_r+0xb0a>
 800618c:	f000 f8ea 	bl	8006364 <__multadd>
 8006190:	4680      	mov	r8, r0
 8006192:	4607      	mov	r7, r0
 8006194:	f109 0901 	add.w	r9, r9, #1
 8006198:	e772      	b.n	8006080 <_dtoa_r+0x9f0>
 800619a:	f000 f8e3 	bl	8006364 <__multadd>
 800619e:	4639      	mov	r1, r7
 80061a0:	4680      	mov	r8, r0
 80061a2:	2300      	movs	r3, #0
 80061a4:	220a      	movs	r2, #10
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 f8dc 	bl	8006364 <__multadd>
 80061ac:	4607      	mov	r7, r0
 80061ae:	e7f1      	b.n	8006194 <_dtoa_r+0xb04>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	9302      	str	r3, [sp, #8]
 80061b4:	9d01      	ldr	r5, [sp, #4]
 80061b6:	ee18 0a10 	vmov	r0, s16
 80061ba:	4631      	mov	r1, r6
 80061bc:	f7ff f9da 	bl	8005574 <quorem>
 80061c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	f805 ab01 	strb.w	sl, [r5], #1
 80061ca:	1aea      	subs	r2, r5, r3
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	4293      	cmp	r3, r2
 80061d0:	dd09      	ble.n	80061e6 <_dtoa_r+0xb56>
 80061d2:	ee18 1a10 	vmov	r1, s16
 80061d6:	2300      	movs	r3, #0
 80061d8:	220a      	movs	r2, #10
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 f8c2 	bl	8006364 <__multadd>
 80061e0:	ee08 0a10 	vmov	s16, r0
 80061e4:	e7e7      	b.n	80061b6 <_dtoa_r+0xb26>
 80061e6:	9b02      	ldr	r3, [sp, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bfc8      	it	gt
 80061ec:	461d      	movgt	r5, r3
 80061ee:	9b01      	ldr	r3, [sp, #4]
 80061f0:	bfd8      	it	le
 80061f2:	2501      	movle	r5, #1
 80061f4:	441d      	add	r5, r3
 80061f6:	f04f 0800 	mov.w	r8, #0
 80061fa:	ee18 1a10 	vmov	r1, s16
 80061fe:	2201      	movs	r2, #1
 8006200:	4620      	mov	r0, r4
 8006202:	f000 fa5f 	bl	80066c4 <__lshift>
 8006206:	4631      	mov	r1, r6
 8006208:	ee08 0a10 	vmov	s16, r0
 800620c:	f000 faca 	bl	80067a4 <__mcmp>
 8006210:	2800      	cmp	r0, #0
 8006212:	dc91      	bgt.n	8006138 <_dtoa_r+0xaa8>
 8006214:	d102      	bne.n	800621c <_dtoa_r+0xb8c>
 8006216:	f01a 0f01 	tst.w	sl, #1
 800621a:	d18d      	bne.n	8006138 <_dtoa_r+0xaa8>
 800621c:	462b      	mov	r3, r5
 800621e:	461d      	mov	r5, r3
 8006220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006224:	2a30      	cmp	r2, #48	; 0x30
 8006226:	d0fa      	beq.n	800621e <_dtoa_r+0xb8e>
 8006228:	e6d7      	b.n	8005fda <_dtoa_r+0x94a>
 800622a:	9a01      	ldr	r2, [sp, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	d184      	bne.n	800613a <_dtoa_r+0xaaa>
 8006230:	9b00      	ldr	r3, [sp, #0]
 8006232:	3301      	adds	r3, #1
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	2331      	movs	r3, #49	; 0x31
 8006238:	7013      	strb	r3, [r2, #0]
 800623a:	e6ce      	b.n	8005fda <_dtoa_r+0x94a>
 800623c:	4b09      	ldr	r3, [pc, #36]	; (8006264 <_dtoa_r+0xbd4>)
 800623e:	f7ff ba95 	b.w	800576c <_dtoa_r+0xdc>
 8006242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f aa6e 	bne.w	8005726 <_dtoa_r+0x96>
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <_dtoa_r+0xbd8>)
 800624c:	f7ff ba8e 	b.w	800576c <_dtoa_r+0xdc>
 8006250:	9b02      	ldr	r3, [sp, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	dcae      	bgt.n	80061b4 <_dtoa_r+0xb24>
 8006256:	9b06      	ldr	r3, [sp, #24]
 8006258:	2b02      	cmp	r3, #2
 800625a:	f73f aea8 	bgt.w	8005fae <_dtoa_r+0x91e>
 800625e:	e7a9      	b.n	80061b4 <_dtoa_r+0xb24>
 8006260:	08008a9f 	.word	0x08008a9f
 8006264:	080089fc 	.word	0x080089fc
 8006268:	08008a20 	.word	0x08008a20

0800626c <_localeconv_r>:
 800626c:	4800      	ldr	r0, [pc, #0]	; (8006270 <_localeconv_r+0x4>)
 800626e:	4770      	bx	lr
 8006270:	20000168 	.word	0x20000168

08006274 <malloc>:
 8006274:	4b02      	ldr	r3, [pc, #8]	; (8006280 <malloc+0xc>)
 8006276:	4601      	mov	r1, r0
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	f000 bc17 	b.w	8006aac <_malloc_r>
 800627e:	bf00      	nop
 8006280:	20000014 	.word	0x20000014

08006284 <memcpy>:
 8006284:	440a      	add	r2, r1
 8006286:	4291      	cmp	r1, r2
 8006288:	f100 33ff 	add.w	r3, r0, #4294967295
 800628c:	d100      	bne.n	8006290 <memcpy+0xc>
 800628e:	4770      	bx	lr
 8006290:	b510      	push	{r4, lr}
 8006292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800629a:	4291      	cmp	r1, r2
 800629c:	d1f9      	bne.n	8006292 <memcpy+0xe>
 800629e:	bd10      	pop	{r4, pc}

080062a0 <_Balloc>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062a4:	4604      	mov	r4, r0
 80062a6:	460d      	mov	r5, r1
 80062a8:	b976      	cbnz	r6, 80062c8 <_Balloc+0x28>
 80062aa:	2010      	movs	r0, #16
 80062ac:	f7ff ffe2 	bl	8006274 <malloc>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6260      	str	r0, [r4, #36]	; 0x24
 80062b4:	b920      	cbnz	r0, 80062c0 <_Balloc+0x20>
 80062b6:	4b18      	ldr	r3, [pc, #96]	; (8006318 <_Balloc+0x78>)
 80062b8:	4818      	ldr	r0, [pc, #96]	; (800631c <_Balloc+0x7c>)
 80062ba:	2166      	movs	r1, #102	; 0x66
 80062bc:	f000 fdd6 	bl	8006e6c <__assert_func>
 80062c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062c4:	6006      	str	r6, [r0, #0]
 80062c6:	60c6      	str	r6, [r0, #12]
 80062c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062ca:	68f3      	ldr	r3, [r6, #12]
 80062cc:	b183      	cbz	r3, 80062f0 <_Balloc+0x50>
 80062ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062d6:	b9b8      	cbnz	r0, 8006308 <_Balloc+0x68>
 80062d8:	2101      	movs	r1, #1
 80062da:	fa01 f605 	lsl.w	r6, r1, r5
 80062de:	1d72      	adds	r2, r6, #5
 80062e0:	0092      	lsls	r2, r2, #2
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 fb60 	bl	80069a8 <_calloc_r>
 80062e8:	b160      	cbz	r0, 8006304 <_Balloc+0x64>
 80062ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062ee:	e00e      	b.n	800630e <_Balloc+0x6e>
 80062f0:	2221      	movs	r2, #33	; 0x21
 80062f2:	2104      	movs	r1, #4
 80062f4:	4620      	mov	r0, r4
 80062f6:	f000 fb57 	bl	80069a8 <_calloc_r>
 80062fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062fc:	60f0      	str	r0, [r6, #12]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e4      	bne.n	80062ce <_Balloc+0x2e>
 8006304:	2000      	movs	r0, #0
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	6802      	ldr	r2, [r0, #0]
 800630a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800630e:	2300      	movs	r3, #0
 8006310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006314:	e7f7      	b.n	8006306 <_Balloc+0x66>
 8006316:	bf00      	nop
 8006318:	08008a2d 	.word	0x08008a2d
 800631c:	08008ab0 	.word	0x08008ab0

08006320 <_Bfree>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006324:	4605      	mov	r5, r0
 8006326:	460c      	mov	r4, r1
 8006328:	b976      	cbnz	r6, 8006348 <_Bfree+0x28>
 800632a:	2010      	movs	r0, #16
 800632c:	f7ff ffa2 	bl	8006274 <malloc>
 8006330:	4602      	mov	r2, r0
 8006332:	6268      	str	r0, [r5, #36]	; 0x24
 8006334:	b920      	cbnz	r0, 8006340 <_Bfree+0x20>
 8006336:	4b09      	ldr	r3, [pc, #36]	; (800635c <_Bfree+0x3c>)
 8006338:	4809      	ldr	r0, [pc, #36]	; (8006360 <_Bfree+0x40>)
 800633a:	218a      	movs	r1, #138	; 0x8a
 800633c:	f000 fd96 	bl	8006e6c <__assert_func>
 8006340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006344:	6006      	str	r6, [r0, #0]
 8006346:	60c6      	str	r6, [r0, #12]
 8006348:	b13c      	cbz	r4, 800635a <_Bfree+0x3a>
 800634a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800634c:	6862      	ldr	r2, [r4, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006354:	6021      	str	r1, [r4, #0]
 8006356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	08008a2d 	.word	0x08008a2d
 8006360:	08008ab0 	.word	0x08008ab0

08006364 <__multadd>:
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	690d      	ldr	r5, [r1, #16]
 800636a:	4607      	mov	r7, r0
 800636c:	460c      	mov	r4, r1
 800636e:	461e      	mov	r6, r3
 8006370:	f101 0c14 	add.w	ip, r1, #20
 8006374:	2000      	movs	r0, #0
 8006376:	f8dc 3000 	ldr.w	r3, [ip]
 800637a:	b299      	uxth	r1, r3
 800637c:	fb02 6101 	mla	r1, r2, r1, r6
 8006380:	0c1e      	lsrs	r6, r3, #16
 8006382:	0c0b      	lsrs	r3, r1, #16
 8006384:	fb02 3306 	mla	r3, r2, r6, r3
 8006388:	b289      	uxth	r1, r1
 800638a:	3001      	adds	r0, #1
 800638c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006390:	4285      	cmp	r5, r0
 8006392:	f84c 1b04 	str.w	r1, [ip], #4
 8006396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800639a:	dcec      	bgt.n	8006376 <__multadd+0x12>
 800639c:	b30e      	cbz	r6, 80063e2 <__multadd+0x7e>
 800639e:	68a3      	ldr	r3, [r4, #8]
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	dc19      	bgt.n	80063d8 <__multadd+0x74>
 80063a4:	6861      	ldr	r1, [r4, #4]
 80063a6:	4638      	mov	r0, r7
 80063a8:	3101      	adds	r1, #1
 80063aa:	f7ff ff79 	bl	80062a0 <_Balloc>
 80063ae:	4680      	mov	r8, r0
 80063b0:	b928      	cbnz	r0, 80063be <__multadd+0x5a>
 80063b2:	4602      	mov	r2, r0
 80063b4:	4b0c      	ldr	r3, [pc, #48]	; (80063e8 <__multadd+0x84>)
 80063b6:	480d      	ldr	r0, [pc, #52]	; (80063ec <__multadd+0x88>)
 80063b8:	21b5      	movs	r1, #181	; 0xb5
 80063ba:	f000 fd57 	bl	8006e6c <__assert_func>
 80063be:	6922      	ldr	r2, [r4, #16]
 80063c0:	3202      	adds	r2, #2
 80063c2:	f104 010c 	add.w	r1, r4, #12
 80063c6:	0092      	lsls	r2, r2, #2
 80063c8:	300c      	adds	r0, #12
 80063ca:	f7ff ff5b 	bl	8006284 <memcpy>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff ffa5 	bl	8006320 <_Bfree>
 80063d6:	4644      	mov	r4, r8
 80063d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063dc:	3501      	adds	r5, #1
 80063de:	615e      	str	r6, [r3, #20]
 80063e0:	6125      	str	r5, [r4, #16]
 80063e2:	4620      	mov	r0, r4
 80063e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e8:	08008a9f 	.word	0x08008a9f
 80063ec:	08008ab0 	.word	0x08008ab0

080063f0 <__hi0bits>:
 80063f0:	0c03      	lsrs	r3, r0, #16
 80063f2:	041b      	lsls	r3, r3, #16
 80063f4:	b9d3      	cbnz	r3, 800642c <__hi0bits+0x3c>
 80063f6:	0400      	lsls	r0, r0, #16
 80063f8:	2310      	movs	r3, #16
 80063fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80063fe:	bf04      	itt	eq
 8006400:	0200      	lsleq	r0, r0, #8
 8006402:	3308      	addeq	r3, #8
 8006404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006408:	bf04      	itt	eq
 800640a:	0100      	lsleq	r0, r0, #4
 800640c:	3304      	addeq	r3, #4
 800640e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006412:	bf04      	itt	eq
 8006414:	0080      	lsleq	r0, r0, #2
 8006416:	3302      	addeq	r3, #2
 8006418:	2800      	cmp	r0, #0
 800641a:	db05      	blt.n	8006428 <__hi0bits+0x38>
 800641c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006420:	f103 0301 	add.w	r3, r3, #1
 8006424:	bf08      	it	eq
 8006426:	2320      	moveq	r3, #32
 8006428:	4618      	mov	r0, r3
 800642a:	4770      	bx	lr
 800642c:	2300      	movs	r3, #0
 800642e:	e7e4      	b.n	80063fa <__hi0bits+0xa>

08006430 <__lo0bits>:
 8006430:	6803      	ldr	r3, [r0, #0]
 8006432:	f013 0207 	ands.w	r2, r3, #7
 8006436:	4601      	mov	r1, r0
 8006438:	d00b      	beq.n	8006452 <__lo0bits+0x22>
 800643a:	07da      	lsls	r2, r3, #31
 800643c:	d423      	bmi.n	8006486 <__lo0bits+0x56>
 800643e:	0798      	lsls	r0, r3, #30
 8006440:	bf49      	itett	mi
 8006442:	085b      	lsrmi	r3, r3, #1
 8006444:	089b      	lsrpl	r3, r3, #2
 8006446:	2001      	movmi	r0, #1
 8006448:	600b      	strmi	r3, [r1, #0]
 800644a:	bf5c      	itt	pl
 800644c:	600b      	strpl	r3, [r1, #0]
 800644e:	2002      	movpl	r0, #2
 8006450:	4770      	bx	lr
 8006452:	b298      	uxth	r0, r3
 8006454:	b9a8      	cbnz	r0, 8006482 <__lo0bits+0x52>
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	2010      	movs	r0, #16
 800645a:	b2da      	uxtb	r2, r3
 800645c:	b90a      	cbnz	r2, 8006462 <__lo0bits+0x32>
 800645e:	3008      	adds	r0, #8
 8006460:	0a1b      	lsrs	r3, r3, #8
 8006462:	071a      	lsls	r2, r3, #28
 8006464:	bf04      	itt	eq
 8006466:	091b      	lsreq	r3, r3, #4
 8006468:	3004      	addeq	r0, #4
 800646a:	079a      	lsls	r2, r3, #30
 800646c:	bf04      	itt	eq
 800646e:	089b      	lsreq	r3, r3, #2
 8006470:	3002      	addeq	r0, #2
 8006472:	07da      	lsls	r2, r3, #31
 8006474:	d403      	bmi.n	800647e <__lo0bits+0x4e>
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	f100 0001 	add.w	r0, r0, #1
 800647c:	d005      	beq.n	800648a <__lo0bits+0x5a>
 800647e:	600b      	str	r3, [r1, #0]
 8006480:	4770      	bx	lr
 8006482:	4610      	mov	r0, r2
 8006484:	e7e9      	b.n	800645a <__lo0bits+0x2a>
 8006486:	2000      	movs	r0, #0
 8006488:	4770      	bx	lr
 800648a:	2020      	movs	r0, #32
 800648c:	4770      	bx	lr
	...

08006490 <__i2b>:
 8006490:	b510      	push	{r4, lr}
 8006492:	460c      	mov	r4, r1
 8006494:	2101      	movs	r1, #1
 8006496:	f7ff ff03 	bl	80062a0 <_Balloc>
 800649a:	4602      	mov	r2, r0
 800649c:	b928      	cbnz	r0, 80064aa <__i2b+0x1a>
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <__i2b+0x24>)
 80064a0:	4805      	ldr	r0, [pc, #20]	; (80064b8 <__i2b+0x28>)
 80064a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064a6:	f000 fce1 	bl	8006e6c <__assert_func>
 80064aa:	2301      	movs	r3, #1
 80064ac:	6144      	str	r4, [r0, #20]
 80064ae:	6103      	str	r3, [r0, #16]
 80064b0:	bd10      	pop	{r4, pc}
 80064b2:	bf00      	nop
 80064b4:	08008a9f 	.word	0x08008a9f
 80064b8:	08008ab0 	.word	0x08008ab0

080064bc <__multiply>:
 80064bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	4691      	mov	r9, r2
 80064c2:	690a      	ldr	r2, [r1, #16]
 80064c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	bfb8      	it	lt
 80064cc:	460b      	movlt	r3, r1
 80064ce:	460c      	mov	r4, r1
 80064d0:	bfbc      	itt	lt
 80064d2:	464c      	movlt	r4, r9
 80064d4:	4699      	movlt	r9, r3
 80064d6:	6927      	ldr	r7, [r4, #16]
 80064d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064dc:	68a3      	ldr	r3, [r4, #8]
 80064de:	6861      	ldr	r1, [r4, #4]
 80064e0:	eb07 060a 	add.w	r6, r7, sl
 80064e4:	42b3      	cmp	r3, r6
 80064e6:	b085      	sub	sp, #20
 80064e8:	bfb8      	it	lt
 80064ea:	3101      	addlt	r1, #1
 80064ec:	f7ff fed8 	bl	80062a0 <_Balloc>
 80064f0:	b930      	cbnz	r0, 8006500 <__multiply+0x44>
 80064f2:	4602      	mov	r2, r0
 80064f4:	4b44      	ldr	r3, [pc, #272]	; (8006608 <__multiply+0x14c>)
 80064f6:	4845      	ldr	r0, [pc, #276]	; (800660c <__multiply+0x150>)
 80064f8:	f240 115d 	movw	r1, #349	; 0x15d
 80064fc:	f000 fcb6 	bl	8006e6c <__assert_func>
 8006500:	f100 0514 	add.w	r5, r0, #20
 8006504:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006508:	462b      	mov	r3, r5
 800650a:	2200      	movs	r2, #0
 800650c:	4543      	cmp	r3, r8
 800650e:	d321      	bcc.n	8006554 <__multiply+0x98>
 8006510:	f104 0314 	add.w	r3, r4, #20
 8006514:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006518:	f109 0314 	add.w	r3, r9, #20
 800651c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006520:	9202      	str	r2, [sp, #8]
 8006522:	1b3a      	subs	r2, r7, r4
 8006524:	3a15      	subs	r2, #21
 8006526:	f022 0203 	bic.w	r2, r2, #3
 800652a:	3204      	adds	r2, #4
 800652c:	f104 0115 	add.w	r1, r4, #21
 8006530:	428f      	cmp	r7, r1
 8006532:	bf38      	it	cc
 8006534:	2204      	movcc	r2, #4
 8006536:	9201      	str	r2, [sp, #4]
 8006538:	9a02      	ldr	r2, [sp, #8]
 800653a:	9303      	str	r3, [sp, #12]
 800653c:	429a      	cmp	r2, r3
 800653e:	d80c      	bhi.n	800655a <__multiply+0x9e>
 8006540:	2e00      	cmp	r6, #0
 8006542:	dd03      	ble.n	800654c <__multiply+0x90>
 8006544:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05a      	beq.n	8006602 <__multiply+0x146>
 800654c:	6106      	str	r6, [r0, #16]
 800654e:	b005      	add	sp, #20
 8006550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006554:	f843 2b04 	str.w	r2, [r3], #4
 8006558:	e7d8      	b.n	800650c <__multiply+0x50>
 800655a:	f8b3 a000 	ldrh.w	sl, [r3]
 800655e:	f1ba 0f00 	cmp.w	sl, #0
 8006562:	d024      	beq.n	80065ae <__multiply+0xf2>
 8006564:	f104 0e14 	add.w	lr, r4, #20
 8006568:	46a9      	mov	r9, r5
 800656a:	f04f 0c00 	mov.w	ip, #0
 800656e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006572:	f8d9 1000 	ldr.w	r1, [r9]
 8006576:	fa1f fb82 	uxth.w	fp, r2
 800657a:	b289      	uxth	r1, r1
 800657c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006580:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006584:	f8d9 2000 	ldr.w	r2, [r9]
 8006588:	4461      	add	r1, ip
 800658a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800658e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006592:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006596:	b289      	uxth	r1, r1
 8006598:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800659c:	4577      	cmp	r7, lr
 800659e:	f849 1b04 	str.w	r1, [r9], #4
 80065a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065a6:	d8e2      	bhi.n	800656e <__multiply+0xb2>
 80065a8:	9a01      	ldr	r2, [sp, #4]
 80065aa:	f845 c002 	str.w	ip, [r5, r2]
 80065ae:	9a03      	ldr	r2, [sp, #12]
 80065b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80065b4:	3304      	adds	r3, #4
 80065b6:	f1b9 0f00 	cmp.w	r9, #0
 80065ba:	d020      	beq.n	80065fe <__multiply+0x142>
 80065bc:	6829      	ldr	r1, [r5, #0]
 80065be:	f104 0c14 	add.w	ip, r4, #20
 80065c2:	46ae      	mov	lr, r5
 80065c4:	f04f 0a00 	mov.w	sl, #0
 80065c8:	f8bc b000 	ldrh.w	fp, [ip]
 80065cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80065d0:	fb09 220b 	mla	r2, r9, fp, r2
 80065d4:	4492      	add	sl, r2
 80065d6:	b289      	uxth	r1, r1
 80065d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80065dc:	f84e 1b04 	str.w	r1, [lr], #4
 80065e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80065e4:	f8be 1000 	ldrh.w	r1, [lr]
 80065e8:	0c12      	lsrs	r2, r2, #16
 80065ea:	fb09 1102 	mla	r1, r9, r2, r1
 80065ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80065f2:	4567      	cmp	r7, ip
 80065f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065f8:	d8e6      	bhi.n	80065c8 <__multiply+0x10c>
 80065fa:	9a01      	ldr	r2, [sp, #4]
 80065fc:	50a9      	str	r1, [r5, r2]
 80065fe:	3504      	adds	r5, #4
 8006600:	e79a      	b.n	8006538 <__multiply+0x7c>
 8006602:	3e01      	subs	r6, #1
 8006604:	e79c      	b.n	8006540 <__multiply+0x84>
 8006606:	bf00      	nop
 8006608:	08008a9f 	.word	0x08008a9f
 800660c:	08008ab0 	.word	0x08008ab0

08006610 <__pow5mult>:
 8006610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006614:	4615      	mov	r5, r2
 8006616:	f012 0203 	ands.w	r2, r2, #3
 800661a:	4606      	mov	r6, r0
 800661c:	460f      	mov	r7, r1
 800661e:	d007      	beq.n	8006630 <__pow5mult+0x20>
 8006620:	4c25      	ldr	r4, [pc, #148]	; (80066b8 <__pow5mult+0xa8>)
 8006622:	3a01      	subs	r2, #1
 8006624:	2300      	movs	r3, #0
 8006626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800662a:	f7ff fe9b 	bl	8006364 <__multadd>
 800662e:	4607      	mov	r7, r0
 8006630:	10ad      	asrs	r5, r5, #2
 8006632:	d03d      	beq.n	80066b0 <__pow5mult+0xa0>
 8006634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006636:	b97c      	cbnz	r4, 8006658 <__pow5mult+0x48>
 8006638:	2010      	movs	r0, #16
 800663a:	f7ff fe1b 	bl	8006274 <malloc>
 800663e:	4602      	mov	r2, r0
 8006640:	6270      	str	r0, [r6, #36]	; 0x24
 8006642:	b928      	cbnz	r0, 8006650 <__pow5mult+0x40>
 8006644:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <__pow5mult+0xac>)
 8006646:	481e      	ldr	r0, [pc, #120]	; (80066c0 <__pow5mult+0xb0>)
 8006648:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800664c:	f000 fc0e 	bl	8006e6c <__assert_func>
 8006650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006654:	6004      	str	r4, [r0, #0]
 8006656:	60c4      	str	r4, [r0, #12]
 8006658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800665c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006660:	b94c      	cbnz	r4, 8006676 <__pow5mult+0x66>
 8006662:	f240 2171 	movw	r1, #625	; 0x271
 8006666:	4630      	mov	r0, r6
 8006668:	f7ff ff12 	bl	8006490 <__i2b>
 800666c:	2300      	movs	r3, #0
 800666e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006672:	4604      	mov	r4, r0
 8006674:	6003      	str	r3, [r0, #0]
 8006676:	f04f 0900 	mov.w	r9, #0
 800667a:	07eb      	lsls	r3, r5, #31
 800667c:	d50a      	bpl.n	8006694 <__pow5mult+0x84>
 800667e:	4639      	mov	r1, r7
 8006680:	4622      	mov	r2, r4
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff ff1a 	bl	80064bc <__multiply>
 8006688:	4639      	mov	r1, r7
 800668a:	4680      	mov	r8, r0
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff fe47 	bl	8006320 <_Bfree>
 8006692:	4647      	mov	r7, r8
 8006694:	106d      	asrs	r5, r5, #1
 8006696:	d00b      	beq.n	80066b0 <__pow5mult+0xa0>
 8006698:	6820      	ldr	r0, [r4, #0]
 800669a:	b938      	cbnz	r0, 80066ac <__pow5mult+0x9c>
 800669c:	4622      	mov	r2, r4
 800669e:	4621      	mov	r1, r4
 80066a0:	4630      	mov	r0, r6
 80066a2:	f7ff ff0b 	bl	80064bc <__multiply>
 80066a6:	6020      	str	r0, [r4, #0]
 80066a8:	f8c0 9000 	str.w	r9, [r0]
 80066ac:	4604      	mov	r4, r0
 80066ae:	e7e4      	b.n	800667a <__pow5mult+0x6a>
 80066b0:	4638      	mov	r0, r7
 80066b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b6:	bf00      	nop
 80066b8:	08008c00 	.word	0x08008c00
 80066bc:	08008a2d 	.word	0x08008a2d
 80066c0:	08008ab0 	.word	0x08008ab0

080066c4 <__lshift>:
 80066c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c8:	460c      	mov	r4, r1
 80066ca:	6849      	ldr	r1, [r1, #4]
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	4607      	mov	r7, r0
 80066d6:	4691      	mov	r9, r2
 80066d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066dc:	f108 0601 	add.w	r6, r8, #1
 80066e0:	42b3      	cmp	r3, r6
 80066e2:	db0b      	blt.n	80066fc <__lshift+0x38>
 80066e4:	4638      	mov	r0, r7
 80066e6:	f7ff fddb 	bl	80062a0 <_Balloc>
 80066ea:	4605      	mov	r5, r0
 80066ec:	b948      	cbnz	r0, 8006702 <__lshift+0x3e>
 80066ee:	4602      	mov	r2, r0
 80066f0:	4b2a      	ldr	r3, [pc, #168]	; (800679c <__lshift+0xd8>)
 80066f2:	482b      	ldr	r0, [pc, #172]	; (80067a0 <__lshift+0xdc>)
 80066f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066f8:	f000 fbb8 	bl	8006e6c <__assert_func>
 80066fc:	3101      	adds	r1, #1
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	e7ee      	b.n	80066e0 <__lshift+0x1c>
 8006702:	2300      	movs	r3, #0
 8006704:	f100 0114 	add.w	r1, r0, #20
 8006708:	f100 0210 	add.w	r2, r0, #16
 800670c:	4618      	mov	r0, r3
 800670e:	4553      	cmp	r3, sl
 8006710:	db37      	blt.n	8006782 <__lshift+0xbe>
 8006712:	6920      	ldr	r0, [r4, #16]
 8006714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006718:	f104 0314 	add.w	r3, r4, #20
 800671c:	f019 091f 	ands.w	r9, r9, #31
 8006720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006724:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006728:	d02f      	beq.n	800678a <__lshift+0xc6>
 800672a:	f1c9 0e20 	rsb	lr, r9, #32
 800672e:	468a      	mov	sl, r1
 8006730:	f04f 0c00 	mov.w	ip, #0
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	fa02 f209 	lsl.w	r2, r2, r9
 800673a:	ea42 020c 	orr.w	r2, r2, ip
 800673e:	f84a 2b04 	str.w	r2, [sl], #4
 8006742:	f853 2b04 	ldr.w	r2, [r3], #4
 8006746:	4298      	cmp	r0, r3
 8006748:	fa22 fc0e 	lsr.w	ip, r2, lr
 800674c:	d8f2      	bhi.n	8006734 <__lshift+0x70>
 800674e:	1b03      	subs	r3, r0, r4
 8006750:	3b15      	subs	r3, #21
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	3304      	adds	r3, #4
 8006758:	f104 0215 	add.w	r2, r4, #21
 800675c:	4290      	cmp	r0, r2
 800675e:	bf38      	it	cc
 8006760:	2304      	movcc	r3, #4
 8006762:	f841 c003 	str.w	ip, [r1, r3]
 8006766:	f1bc 0f00 	cmp.w	ip, #0
 800676a:	d001      	beq.n	8006770 <__lshift+0xac>
 800676c:	f108 0602 	add.w	r6, r8, #2
 8006770:	3e01      	subs	r6, #1
 8006772:	4638      	mov	r0, r7
 8006774:	612e      	str	r6, [r5, #16]
 8006776:	4621      	mov	r1, r4
 8006778:	f7ff fdd2 	bl	8006320 <_Bfree>
 800677c:	4628      	mov	r0, r5
 800677e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006782:	f842 0f04 	str.w	r0, [r2, #4]!
 8006786:	3301      	adds	r3, #1
 8006788:	e7c1      	b.n	800670e <__lshift+0x4a>
 800678a:	3904      	subs	r1, #4
 800678c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006790:	f841 2f04 	str.w	r2, [r1, #4]!
 8006794:	4298      	cmp	r0, r3
 8006796:	d8f9      	bhi.n	800678c <__lshift+0xc8>
 8006798:	e7ea      	b.n	8006770 <__lshift+0xac>
 800679a:	bf00      	nop
 800679c:	08008a9f 	.word	0x08008a9f
 80067a0:	08008ab0 	.word	0x08008ab0

080067a4 <__mcmp>:
 80067a4:	b530      	push	{r4, r5, lr}
 80067a6:	6902      	ldr	r2, [r0, #16]
 80067a8:	690c      	ldr	r4, [r1, #16]
 80067aa:	1b12      	subs	r2, r2, r4
 80067ac:	d10e      	bne.n	80067cc <__mcmp+0x28>
 80067ae:	f100 0314 	add.w	r3, r0, #20
 80067b2:	3114      	adds	r1, #20
 80067b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80067b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80067c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80067c4:	42a5      	cmp	r5, r4
 80067c6:	d003      	beq.n	80067d0 <__mcmp+0x2c>
 80067c8:	d305      	bcc.n	80067d6 <__mcmp+0x32>
 80067ca:	2201      	movs	r2, #1
 80067cc:	4610      	mov	r0, r2
 80067ce:	bd30      	pop	{r4, r5, pc}
 80067d0:	4283      	cmp	r3, r0
 80067d2:	d3f3      	bcc.n	80067bc <__mcmp+0x18>
 80067d4:	e7fa      	b.n	80067cc <__mcmp+0x28>
 80067d6:	f04f 32ff 	mov.w	r2, #4294967295
 80067da:	e7f7      	b.n	80067cc <__mcmp+0x28>

080067dc <__mdiff>:
 80067dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e0:	460c      	mov	r4, r1
 80067e2:	4606      	mov	r6, r0
 80067e4:	4611      	mov	r1, r2
 80067e6:	4620      	mov	r0, r4
 80067e8:	4690      	mov	r8, r2
 80067ea:	f7ff ffdb 	bl	80067a4 <__mcmp>
 80067ee:	1e05      	subs	r5, r0, #0
 80067f0:	d110      	bne.n	8006814 <__mdiff+0x38>
 80067f2:	4629      	mov	r1, r5
 80067f4:	4630      	mov	r0, r6
 80067f6:	f7ff fd53 	bl	80062a0 <_Balloc>
 80067fa:	b930      	cbnz	r0, 800680a <__mdiff+0x2e>
 80067fc:	4b3a      	ldr	r3, [pc, #232]	; (80068e8 <__mdiff+0x10c>)
 80067fe:	4602      	mov	r2, r0
 8006800:	f240 2132 	movw	r1, #562	; 0x232
 8006804:	4839      	ldr	r0, [pc, #228]	; (80068ec <__mdiff+0x110>)
 8006806:	f000 fb31 	bl	8006e6c <__assert_func>
 800680a:	2301      	movs	r3, #1
 800680c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	bfa4      	itt	ge
 8006816:	4643      	movge	r3, r8
 8006818:	46a0      	movge	r8, r4
 800681a:	4630      	mov	r0, r6
 800681c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006820:	bfa6      	itte	ge
 8006822:	461c      	movge	r4, r3
 8006824:	2500      	movge	r5, #0
 8006826:	2501      	movlt	r5, #1
 8006828:	f7ff fd3a 	bl	80062a0 <_Balloc>
 800682c:	b920      	cbnz	r0, 8006838 <__mdiff+0x5c>
 800682e:	4b2e      	ldr	r3, [pc, #184]	; (80068e8 <__mdiff+0x10c>)
 8006830:	4602      	mov	r2, r0
 8006832:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006836:	e7e5      	b.n	8006804 <__mdiff+0x28>
 8006838:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800683c:	6926      	ldr	r6, [r4, #16]
 800683e:	60c5      	str	r5, [r0, #12]
 8006840:	f104 0914 	add.w	r9, r4, #20
 8006844:	f108 0514 	add.w	r5, r8, #20
 8006848:	f100 0e14 	add.w	lr, r0, #20
 800684c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006850:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006854:	f108 0210 	add.w	r2, r8, #16
 8006858:	46f2      	mov	sl, lr
 800685a:	2100      	movs	r1, #0
 800685c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006860:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006864:	fa1f f883 	uxth.w	r8, r3
 8006868:	fa11 f18b 	uxtah	r1, r1, fp
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	eba1 0808 	sub.w	r8, r1, r8
 8006872:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006876:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800687a:	fa1f f888 	uxth.w	r8, r8
 800687e:	1419      	asrs	r1, r3, #16
 8006880:	454e      	cmp	r6, r9
 8006882:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006886:	f84a 3b04 	str.w	r3, [sl], #4
 800688a:	d8e7      	bhi.n	800685c <__mdiff+0x80>
 800688c:	1b33      	subs	r3, r6, r4
 800688e:	3b15      	subs	r3, #21
 8006890:	f023 0303 	bic.w	r3, r3, #3
 8006894:	3304      	adds	r3, #4
 8006896:	3415      	adds	r4, #21
 8006898:	42a6      	cmp	r6, r4
 800689a:	bf38      	it	cc
 800689c:	2304      	movcc	r3, #4
 800689e:	441d      	add	r5, r3
 80068a0:	4473      	add	r3, lr
 80068a2:	469e      	mov	lr, r3
 80068a4:	462e      	mov	r6, r5
 80068a6:	4566      	cmp	r6, ip
 80068a8:	d30e      	bcc.n	80068c8 <__mdiff+0xec>
 80068aa:	f10c 0203 	add.w	r2, ip, #3
 80068ae:	1b52      	subs	r2, r2, r5
 80068b0:	f022 0203 	bic.w	r2, r2, #3
 80068b4:	3d03      	subs	r5, #3
 80068b6:	45ac      	cmp	ip, r5
 80068b8:	bf38      	it	cc
 80068ba:	2200      	movcc	r2, #0
 80068bc:	441a      	add	r2, r3
 80068be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80068c2:	b17b      	cbz	r3, 80068e4 <__mdiff+0x108>
 80068c4:	6107      	str	r7, [r0, #16]
 80068c6:	e7a3      	b.n	8006810 <__mdiff+0x34>
 80068c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80068cc:	fa11 f288 	uxtah	r2, r1, r8
 80068d0:	1414      	asrs	r4, r2, #16
 80068d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80068d6:	b292      	uxth	r2, r2
 80068d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80068dc:	f84e 2b04 	str.w	r2, [lr], #4
 80068e0:	1421      	asrs	r1, r4, #16
 80068e2:	e7e0      	b.n	80068a6 <__mdiff+0xca>
 80068e4:	3f01      	subs	r7, #1
 80068e6:	e7ea      	b.n	80068be <__mdiff+0xe2>
 80068e8:	08008a9f 	.word	0x08008a9f
 80068ec:	08008ab0 	.word	0x08008ab0

080068f0 <__d2b>:
 80068f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068f4:	4689      	mov	r9, r1
 80068f6:	2101      	movs	r1, #1
 80068f8:	ec57 6b10 	vmov	r6, r7, d0
 80068fc:	4690      	mov	r8, r2
 80068fe:	f7ff fccf 	bl	80062a0 <_Balloc>
 8006902:	4604      	mov	r4, r0
 8006904:	b930      	cbnz	r0, 8006914 <__d2b+0x24>
 8006906:	4602      	mov	r2, r0
 8006908:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <__d2b+0xb0>)
 800690a:	4826      	ldr	r0, [pc, #152]	; (80069a4 <__d2b+0xb4>)
 800690c:	f240 310a 	movw	r1, #778	; 0x30a
 8006910:	f000 faac 	bl	8006e6c <__assert_func>
 8006914:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800691c:	bb35      	cbnz	r5, 800696c <__d2b+0x7c>
 800691e:	2e00      	cmp	r6, #0
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	d028      	beq.n	8006976 <__d2b+0x86>
 8006924:	4668      	mov	r0, sp
 8006926:	9600      	str	r6, [sp, #0]
 8006928:	f7ff fd82 	bl	8006430 <__lo0bits>
 800692c:	9900      	ldr	r1, [sp, #0]
 800692e:	b300      	cbz	r0, 8006972 <__d2b+0x82>
 8006930:	9a01      	ldr	r2, [sp, #4]
 8006932:	f1c0 0320 	rsb	r3, r0, #32
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	430b      	orrs	r3, r1
 800693c:	40c2      	lsrs	r2, r0
 800693e:	6163      	str	r3, [r4, #20]
 8006940:	9201      	str	r2, [sp, #4]
 8006942:	9b01      	ldr	r3, [sp, #4]
 8006944:	61a3      	str	r3, [r4, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	bf14      	ite	ne
 800694a:	2202      	movne	r2, #2
 800694c:	2201      	moveq	r2, #1
 800694e:	6122      	str	r2, [r4, #16]
 8006950:	b1d5      	cbz	r5, 8006988 <__d2b+0x98>
 8006952:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006956:	4405      	add	r5, r0
 8006958:	f8c9 5000 	str.w	r5, [r9]
 800695c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006960:	f8c8 0000 	str.w	r0, [r8]
 8006964:	4620      	mov	r0, r4
 8006966:	b003      	add	sp, #12
 8006968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800696c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006970:	e7d5      	b.n	800691e <__d2b+0x2e>
 8006972:	6161      	str	r1, [r4, #20]
 8006974:	e7e5      	b.n	8006942 <__d2b+0x52>
 8006976:	a801      	add	r0, sp, #4
 8006978:	f7ff fd5a 	bl	8006430 <__lo0bits>
 800697c:	9b01      	ldr	r3, [sp, #4]
 800697e:	6163      	str	r3, [r4, #20]
 8006980:	2201      	movs	r2, #1
 8006982:	6122      	str	r2, [r4, #16]
 8006984:	3020      	adds	r0, #32
 8006986:	e7e3      	b.n	8006950 <__d2b+0x60>
 8006988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800698c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006990:	f8c9 0000 	str.w	r0, [r9]
 8006994:	6918      	ldr	r0, [r3, #16]
 8006996:	f7ff fd2b 	bl	80063f0 <__hi0bits>
 800699a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800699e:	e7df      	b.n	8006960 <__d2b+0x70>
 80069a0:	08008a9f 	.word	0x08008a9f
 80069a4:	08008ab0 	.word	0x08008ab0

080069a8 <_calloc_r>:
 80069a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069aa:	fba1 2402 	umull	r2, r4, r1, r2
 80069ae:	b94c      	cbnz	r4, 80069c4 <_calloc_r+0x1c>
 80069b0:	4611      	mov	r1, r2
 80069b2:	9201      	str	r2, [sp, #4]
 80069b4:	f000 f87a 	bl	8006aac <_malloc_r>
 80069b8:	9a01      	ldr	r2, [sp, #4]
 80069ba:	4605      	mov	r5, r0
 80069bc:	b930      	cbnz	r0, 80069cc <_calloc_r+0x24>
 80069be:	4628      	mov	r0, r5
 80069c0:	b003      	add	sp, #12
 80069c2:	bd30      	pop	{r4, r5, pc}
 80069c4:	220c      	movs	r2, #12
 80069c6:	6002      	str	r2, [r0, #0]
 80069c8:	2500      	movs	r5, #0
 80069ca:	e7f8      	b.n	80069be <_calloc_r+0x16>
 80069cc:	4621      	mov	r1, r4
 80069ce:	f7fe f92b 	bl	8004c28 <memset>
 80069d2:	e7f4      	b.n	80069be <_calloc_r+0x16>

080069d4 <_free_r>:
 80069d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069d6:	2900      	cmp	r1, #0
 80069d8:	d044      	beq.n	8006a64 <_free_r+0x90>
 80069da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069de:	9001      	str	r0, [sp, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f1a1 0404 	sub.w	r4, r1, #4
 80069e6:	bfb8      	it	lt
 80069e8:	18e4      	addlt	r4, r4, r3
 80069ea:	f000 fa9b 	bl	8006f24 <__malloc_lock>
 80069ee:	4a1e      	ldr	r2, [pc, #120]	; (8006a68 <_free_r+0x94>)
 80069f0:	9801      	ldr	r0, [sp, #4]
 80069f2:	6813      	ldr	r3, [r2, #0]
 80069f4:	b933      	cbnz	r3, 8006a04 <_free_r+0x30>
 80069f6:	6063      	str	r3, [r4, #4]
 80069f8:	6014      	str	r4, [r2, #0]
 80069fa:	b003      	add	sp, #12
 80069fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a00:	f000 ba96 	b.w	8006f30 <__malloc_unlock>
 8006a04:	42a3      	cmp	r3, r4
 8006a06:	d908      	bls.n	8006a1a <_free_r+0x46>
 8006a08:	6825      	ldr	r5, [r4, #0]
 8006a0a:	1961      	adds	r1, r4, r5
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	bf01      	itttt	eq
 8006a10:	6819      	ldreq	r1, [r3, #0]
 8006a12:	685b      	ldreq	r3, [r3, #4]
 8006a14:	1949      	addeq	r1, r1, r5
 8006a16:	6021      	streq	r1, [r4, #0]
 8006a18:	e7ed      	b.n	80069f6 <_free_r+0x22>
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b10b      	cbz	r3, 8006a24 <_free_r+0x50>
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	d9fa      	bls.n	8006a1a <_free_r+0x46>
 8006a24:	6811      	ldr	r1, [r2, #0]
 8006a26:	1855      	adds	r5, r2, r1
 8006a28:	42a5      	cmp	r5, r4
 8006a2a:	d10b      	bne.n	8006a44 <_free_r+0x70>
 8006a2c:	6824      	ldr	r4, [r4, #0]
 8006a2e:	4421      	add	r1, r4
 8006a30:	1854      	adds	r4, r2, r1
 8006a32:	42a3      	cmp	r3, r4
 8006a34:	6011      	str	r1, [r2, #0]
 8006a36:	d1e0      	bne.n	80069fa <_free_r+0x26>
 8006a38:	681c      	ldr	r4, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	6053      	str	r3, [r2, #4]
 8006a3e:	4421      	add	r1, r4
 8006a40:	6011      	str	r1, [r2, #0]
 8006a42:	e7da      	b.n	80069fa <_free_r+0x26>
 8006a44:	d902      	bls.n	8006a4c <_free_r+0x78>
 8006a46:	230c      	movs	r3, #12
 8006a48:	6003      	str	r3, [r0, #0]
 8006a4a:	e7d6      	b.n	80069fa <_free_r+0x26>
 8006a4c:	6825      	ldr	r5, [r4, #0]
 8006a4e:	1961      	adds	r1, r4, r5
 8006a50:	428b      	cmp	r3, r1
 8006a52:	bf04      	itt	eq
 8006a54:	6819      	ldreq	r1, [r3, #0]
 8006a56:	685b      	ldreq	r3, [r3, #4]
 8006a58:	6063      	str	r3, [r4, #4]
 8006a5a:	bf04      	itt	eq
 8006a5c:	1949      	addeq	r1, r1, r5
 8006a5e:	6021      	streq	r1, [r4, #0]
 8006a60:	6054      	str	r4, [r2, #4]
 8006a62:	e7ca      	b.n	80069fa <_free_r+0x26>
 8006a64:	b003      	add	sp, #12
 8006a66:	bd30      	pop	{r4, r5, pc}
 8006a68:	20000598 	.word	0x20000598

08006a6c <sbrk_aligned>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4e0e      	ldr	r6, [pc, #56]	; (8006aa8 <sbrk_aligned+0x3c>)
 8006a70:	460c      	mov	r4, r1
 8006a72:	6831      	ldr	r1, [r6, #0]
 8006a74:	4605      	mov	r5, r0
 8006a76:	b911      	cbnz	r1, 8006a7e <sbrk_aligned+0x12>
 8006a78:	f000 f9e8 	bl	8006e4c <_sbrk_r>
 8006a7c:	6030      	str	r0, [r6, #0]
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 f9e3 	bl	8006e4c <_sbrk_r>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d00a      	beq.n	8006aa0 <sbrk_aligned+0x34>
 8006a8a:	1cc4      	adds	r4, r0, #3
 8006a8c:	f024 0403 	bic.w	r4, r4, #3
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	d007      	beq.n	8006aa4 <sbrk_aligned+0x38>
 8006a94:	1a21      	subs	r1, r4, r0
 8006a96:	4628      	mov	r0, r5
 8006a98:	f000 f9d8 	bl	8006e4c <_sbrk_r>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d101      	bne.n	8006aa4 <sbrk_aligned+0x38>
 8006aa0:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	2000059c 	.word	0x2000059c

08006aac <_malloc_r>:
 8006aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab0:	1ccd      	adds	r5, r1, #3
 8006ab2:	f025 0503 	bic.w	r5, r5, #3
 8006ab6:	3508      	adds	r5, #8
 8006ab8:	2d0c      	cmp	r5, #12
 8006aba:	bf38      	it	cc
 8006abc:	250c      	movcc	r5, #12
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	db01      	blt.n	8006ac8 <_malloc_r+0x1c>
 8006ac4:	42a9      	cmp	r1, r5
 8006ac6:	d905      	bls.n	8006ad4 <_malloc_r+0x28>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	2600      	movs	r6, #0
 8006ace:	4630      	mov	r0, r6
 8006ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad4:	4e2e      	ldr	r6, [pc, #184]	; (8006b90 <_malloc_r+0xe4>)
 8006ad6:	f000 fa25 	bl	8006f24 <__malloc_lock>
 8006ada:	6833      	ldr	r3, [r6, #0]
 8006adc:	461c      	mov	r4, r3
 8006ade:	bb34      	cbnz	r4, 8006b2e <_malloc_r+0x82>
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	f7ff ffc2 	bl	8006a6c <sbrk_aligned>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	4604      	mov	r4, r0
 8006aec:	d14d      	bne.n	8006b8a <_malloc_r+0xde>
 8006aee:	6834      	ldr	r4, [r6, #0]
 8006af0:	4626      	mov	r6, r4
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	d140      	bne.n	8006b78 <_malloc_r+0xcc>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	4631      	mov	r1, r6
 8006afa:	4638      	mov	r0, r7
 8006afc:	eb04 0803 	add.w	r8, r4, r3
 8006b00:	f000 f9a4 	bl	8006e4c <_sbrk_r>
 8006b04:	4580      	cmp	r8, r0
 8006b06:	d13a      	bne.n	8006b7e <_malloc_r+0xd2>
 8006b08:	6821      	ldr	r1, [r4, #0]
 8006b0a:	3503      	adds	r5, #3
 8006b0c:	1a6d      	subs	r5, r5, r1
 8006b0e:	f025 0503 	bic.w	r5, r5, #3
 8006b12:	3508      	adds	r5, #8
 8006b14:	2d0c      	cmp	r5, #12
 8006b16:	bf38      	it	cc
 8006b18:	250c      	movcc	r5, #12
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	f7ff ffa5 	bl	8006a6c <sbrk_aligned>
 8006b22:	3001      	adds	r0, #1
 8006b24:	d02b      	beq.n	8006b7e <_malloc_r+0xd2>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	442b      	add	r3, r5
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	e00e      	b.n	8006b4c <_malloc_r+0xa0>
 8006b2e:	6822      	ldr	r2, [r4, #0]
 8006b30:	1b52      	subs	r2, r2, r5
 8006b32:	d41e      	bmi.n	8006b72 <_malloc_r+0xc6>
 8006b34:	2a0b      	cmp	r2, #11
 8006b36:	d916      	bls.n	8006b66 <_malloc_r+0xba>
 8006b38:	1961      	adds	r1, r4, r5
 8006b3a:	42a3      	cmp	r3, r4
 8006b3c:	6025      	str	r5, [r4, #0]
 8006b3e:	bf18      	it	ne
 8006b40:	6059      	strne	r1, [r3, #4]
 8006b42:	6863      	ldr	r3, [r4, #4]
 8006b44:	bf08      	it	eq
 8006b46:	6031      	streq	r1, [r6, #0]
 8006b48:	5162      	str	r2, [r4, r5]
 8006b4a:	604b      	str	r3, [r1, #4]
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	f104 060b 	add.w	r6, r4, #11
 8006b52:	f000 f9ed 	bl	8006f30 <__malloc_unlock>
 8006b56:	f026 0607 	bic.w	r6, r6, #7
 8006b5a:	1d23      	adds	r3, r4, #4
 8006b5c:	1af2      	subs	r2, r6, r3
 8006b5e:	d0b6      	beq.n	8006ace <_malloc_r+0x22>
 8006b60:	1b9b      	subs	r3, r3, r6
 8006b62:	50a3      	str	r3, [r4, r2]
 8006b64:	e7b3      	b.n	8006ace <_malloc_r+0x22>
 8006b66:	6862      	ldr	r2, [r4, #4]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	bf0c      	ite	eq
 8006b6c:	6032      	streq	r2, [r6, #0]
 8006b6e:	605a      	strne	r2, [r3, #4]
 8006b70:	e7ec      	b.n	8006b4c <_malloc_r+0xa0>
 8006b72:	4623      	mov	r3, r4
 8006b74:	6864      	ldr	r4, [r4, #4]
 8006b76:	e7b2      	b.n	8006ade <_malloc_r+0x32>
 8006b78:	4634      	mov	r4, r6
 8006b7a:	6876      	ldr	r6, [r6, #4]
 8006b7c:	e7b9      	b.n	8006af2 <_malloc_r+0x46>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	4638      	mov	r0, r7
 8006b84:	f000 f9d4 	bl	8006f30 <__malloc_unlock>
 8006b88:	e7a1      	b.n	8006ace <_malloc_r+0x22>
 8006b8a:	6025      	str	r5, [r4, #0]
 8006b8c:	e7de      	b.n	8006b4c <_malloc_r+0xa0>
 8006b8e:	bf00      	nop
 8006b90:	20000598 	.word	0x20000598

08006b94 <__ssputs_r>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	688e      	ldr	r6, [r1, #8]
 8006b9a:	429e      	cmp	r6, r3
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	4690      	mov	r8, r2
 8006ba2:	461f      	mov	r7, r3
 8006ba4:	d838      	bhi.n	8006c18 <__ssputs_r+0x84>
 8006ba6:	898a      	ldrh	r2, [r1, #12]
 8006ba8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bac:	d032      	beq.n	8006c14 <__ssputs_r+0x80>
 8006bae:	6825      	ldr	r5, [r4, #0]
 8006bb0:	6909      	ldr	r1, [r1, #16]
 8006bb2:	eba5 0901 	sub.w	r9, r5, r1
 8006bb6:	6965      	ldr	r5, [r4, #20]
 8006bb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	444b      	add	r3, r9
 8006bc4:	106d      	asrs	r5, r5, #1
 8006bc6:	429d      	cmp	r5, r3
 8006bc8:	bf38      	it	cc
 8006bca:	461d      	movcc	r5, r3
 8006bcc:	0553      	lsls	r3, r2, #21
 8006bce:	d531      	bpl.n	8006c34 <__ssputs_r+0xa0>
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7ff ff6b 	bl	8006aac <_malloc_r>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	b950      	cbnz	r0, 8006bf0 <__ssputs_r+0x5c>
 8006bda:	230c      	movs	r3, #12
 8006bdc:	f8ca 3000 	str.w	r3, [sl]
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf0:	6921      	ldr	r1, [r4, #16]
 8006bf2:	464a      	mov	r2, r9
 8006bf4:	f7ff fb46 	bl	8006284 <memcpy>
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c02:	81a3      	strh	r3, [r4, #12]
 8006c04:	6126      	str	r6, [r4, #16]
 8006c06:	6165      	str	r5, [r4, #20]
 8006c08:	444e      	add	r6, r9
 8006c0a:	eba5 0509 	sub.w	r5, r5, r9
 8006c0e:	6026      	str	r6, [r4, #0]
 8006c10:	60a5      	str	r5, [r4, #8]
 8006c12:	463e      	mov	r6, r7
 8006c14:	42be      	cmp	r6, r7
 8006c16:	d900      	bls.n	8006c1a <__ssputs_r+0x86>
 8006c18:	463e      	mov	r6, r7
 8006c1a:	6820      	ldr	r0, [r4, #0]
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	4641      	mov	r1, r8
 8006c20:	f000 f966 	bl	8006ef0 <memmove>
 8006c24:	68a3      	ldr	r3, [r4, #8]
 8006c26:	1b9b      	subs	r3, r3, r6
 8006c28:	60a3      	str	r3, [r4, #8]
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	4433      	add	r3, r6
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	2000      	movs	r0, #0
 8006c32:	e7db      	b.n	8006bec <__ssputs_r+0x58>
 8006c34:	462a      	mov	r2, r5
 8006c36:	f000 f981 	bl	8006f3c <_realloc_r>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d1e1      	bne.n	8006c04 <__ssputs_r+0x70>
 8006c40:	6921      	ldr	r1, [r4, #16]
 8006c42:	4650      	mov	r0, sl
 8006c44:	f7ff fec6 	bl	80069d4 <_free_r>
 8006c48:	e7c7      	b.n	8006bda <__ssputs_r+0x46>
	...

08006c4c <_svfiprintf_r>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	4698      	mov	r8, r3
 8006c52:	898b      	ldrh	r3, [r1, #12]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	b09d      	sub	sp, #116	; 0x74
 8006c58:	4607      	mov	r7, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	d50e      	bpl.n	8006c7e <_svfiprintf_r+0x32>
 8006c60:	690b      	ldr	r3, [r1, #16]
 8006c62:	b963      	cbnz	r3, 8006c7e <_svfiprintf_r+0x32>
 8006c64:	2140      	movs	r1, #64	; 0x40
 8006c66:	f7ff ff21 	bl	8006aac <_malloc_r>
 8006c6a:	6028      	str	r0, [r5, #0]
 8006c6c:	6128      	str	r0, [r5, #16]
 8006c6e:	b920      	cbnz	r0, 8006c7a <_svfiprintf_r+0x2e>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	e0d1      	b.n	8006e1e <_svfiprintf_r+0x1d2>
 8006c7a:	2340      	movs	r3, #64	; 0x40
 8006c7c:	616b      	str	r3, [r5, #20]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	9309      	str	r3, [sp, #36]	; 0x24
 8006c82:	2320      	movs	r3, #32
 8006c84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c8c:	2330      	movs	r3, #48	; 0x30
 8006c8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e38 <_svfiprintf_r+0x1ec>
 8006c92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c96:	f04f 0901 	mov.w	r9, #1
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	469a      	mov	sl, r3
 8006c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca2:	b10a      	cbz	r2, 8006ca8 <_svfiprintf_r+0x5c>
 8006ca4:	2a25      	cmp	r2, #37	; 0x25
 8006ca6:	d1f9      	bne.n	8006c9c <_svfiprintf_r+0x50>
 8006ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8006cac:	d00b      	beq.n	8006cc6 <_svfiprintf_r+0x7a>
 8006cae:	465b      	mov	r3, fp
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff ff6d 	bl	8006b94 <__ssputs_r>
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f000 80aa 	beq.w	8006e14 <_svfiprintf_r+0x1c8>
 8006cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc2:	445a      	add	r2, fp
 8006cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8006cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80a2 	beq.w	8006e14 <_svfiprintf_r+0x1c8>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cda:	f10a 0a01 	add.w	sl, sl, #1
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	9307      	str	r3, [sp, #28]
 8006ce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ce6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce8:	4654      	mov	r4, sl
 8006cea:	2205      	movs	r2, #5
 8006cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf0:	4851      	ldr	r0, [pc, #324]	; (8006e38 <_svfiprintf_r+0x1ec>)
 8006cf2:	f7f9 fa7d 	bl	80001f0 <memchr>
 8006cf6:	9a04      	ldr	r2, [sp, #16]
 8006cf8:	b9d8      	cbnz	r0, 8006d32 <_svfiprintf_r+0xe6>
 8006cfa:	06d0      	lsls	r0, r2, #27
 8006cfc:	bf44      	itt	mi
 8006cfe:	2320      	movmi	r3, #32
 8006d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d04:	0711      	lsls	r1, r2, #28
 8006d06:	bf44      	itt	mi
 8006d08:	232b      	movmi	r3, #43	; 0x2b
 8006d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d12:	2b2a      	cmp	r3, #42	; 0x2a
 8006d14:	d015      	beq.n	8006d42 <_svfiprintf_r+0xf6>
 8006d16:	9a07      	ldr	r2, [sp, #28]
 8006d18:	4654      	mov	r4, sl
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f04f 0c0a 	mov.w	ip, #10
 8006d20:	4621      	mov	r1, r4
 8006d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d26:	3b30      	subs	r3, #48	; 0x30
 8006d28:	2b09      	cmp	r3, #9
 8006d2a:	d94e      	bls.n	8006dca <_svfiprintf_r+0x17e>
 8006d2c:	b1b0      	cbz	r0, 8006d5c <_svfiprintf_r+0x110>
 8006d2e:	9207      	str	r2, [sp, #28]
 8006d30:	e014      	b.n	8006d5c <_svfiprintf_r+0x110>
 8006d32:	eba0 0308 	sub.w	r3, r0, r8
 8006d36:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	46a2      	mov	sl, r4
 8006d40:	e7d2      	b.n	8006ce8 <_svfiprintf_r+0x9c>
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	1d19      	adds	r1, r3, #4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	9103      	str	r1, [sp, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfbb      	ittet	lt
 8006d4e:	425b      	neglt	r3, r3
 8006d50:	f042 0202 	orrlt.w	r2, r2, #2
 8006d54:	9307      	strge	r3, [sp, #28]
 8006d56:	9307      	strlt	r3, [sp, #28]
 8006d58:	bfb8      	it	lt
 8006d5a:	9204      	strlt	r2, [sp, #16]
 8006d5c:	7823      	ldrb	r3, [r4, #0]
 8006d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d60:	d10c      	bne.n	8006d7c <_svfiprintf_r+0x130>
 8006d62:	7863      	ldrb	r3, [r4, #1]
 8006d64:	2b2a      	cmp	r3, #42	; 0x2a
 8006d66:	d135      	bne.n	8006dd4 <_svfiprintf_r+0x188>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	1d1a      	adds	r2, r3, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	9203      	str	r2, [sp, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	bfb8      	it	lt
 8006d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d78:	3402      	adds	r4, #2
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e48 <_svfiprintf_r+0x1fc>
 8006d80:	7821      	ldrb	r1, [r4, #0]
 8006d82:	2203      	movs	r2, #3
 8006d84:	4650      	mov	r0, sl
 8006d86:	f7f9 fa33 	bl	80001f0 <memchr>
 8006d8a:	b140      	cbz	r0, 8006d9e <_svfiprintf_r+0x152>
 8006d8c:	2340      	movs	r3, #64	; 0x40
 8006d8e:	eba0 000a 	sub.w	r0, r0, sl
 8006d92:	fa03 f000 	lsl.w	r0, r3, r0
 8006d96:	9b04      	ldr	r3, [sp, #16]
 8006d98:	4303      	orrs	r3, r0
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	9304      	str	r3, [sp, #16]
 8006d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da2:	4826      	ldr	r0, [pc, #152]	; (8006e3c <_svfiprintf_r+0x1f0>)
 8006da4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006da8:	2206      	movs	r2, #6
 8006daa:	f7f9 fa21 	bl	80001f0 <memchr>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d038      	beq.n	8006e24 <_svfiprintf_r+0x1d8>
 8006db2:	4b23      	ldr	r3, [pc, #140]	; (8006e40 <_svfiprintf_r+0x1f4>)
 8006db4:	bb1b      	cbnz	r3, 8006dfe <_svfiprintf_r+0x1b2>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	3307      	adds	r3, #7
 8006dba:	f023 0307 	bic.w	r3, r3, #7
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	9303      	str	r3, [sp, #12]
 8006dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc4:	4433      	add	r3, r6
 8006dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc8:	e767      	b.n	8006c9a <_svfiprintf_r+0x4e>
 8006dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dce:	460c      	mov	r4, r1
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	e7a5      	b.n	8006d20 <_svfiprintf_r+0xd4>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	3401      	adds	r4, #1
 8006dd8:	9305      	str	r3, [sp, #20]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	f04f 0c0a 	mov.w	ip, #10
 8006de0:	4620      	mov	r0, r4
 8006de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de6:	3a30      	subs	r2, #48	; 0x30
 8006de8:	2a09      	cmp	r2, #9
 8006dea:	d903      	bls.n	8006df4 <_svfiprintf_r+0x1a8>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0c5      	beq.n	8006d7c <_svfiprintf_r+0x130>
 8006df0:	9105      	str	r1, [sp, #20]
 8006df2:	e7c3      	b.n	8006d7c <_svfiprintf_r+0x130>
 8006df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df8:	4604      	mov	r4, r0
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e7f0      	b.n	8006de0 <_svfiprintf_r+0x194>
 8006dfe:	ab03      	add	r3, sp, #12
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	462a      	mov	r2, r5
 8006e04:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <_svfiprintf_r+0x1f8>)
 8006e06:	a904      	add	r1, sp, #16
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f7fd ffb5 	bl	8004d78 <_printf_float>
 8006e0e:	1c42      	adds	r2, r0, #1
 8006e10:	4606      	mov	r6, r0
 8006e12:	d1d6      	bne.n	8006dc2 <_svfiprintf_r+0x176>
 8006e14:	89ab      	ldrh	r3, [r5, #12]
 8006e16:	065b      	lsls	r3, r3, #25
 8006e18:	f53f af2c 	bmi.w	8006c74 <_svfiprintf_r+0x28>
 8006e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1e:	b01d      	add	sp, #116	; 0x74
 8006e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e24:	ab03      	add	r3, sp, #12
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	462a      	mov	r2, r5
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <_svfiprintf_r+0x1f8>)
 8006e2c:	a904      	add	r1, sp, #16
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f7fe fa46 	bl	80052c0 <_printf_i>
 8006e34:	e7eb      	b.n	8006e0e <_svfiprintf_r+0x1c2>
 8006e36:	bf00      	nop
 8006e38:	08008c0c 	.word	0x08008c0c
 8006e3c:	08008c16 	.word	0x08008c16
 8006e40:	08004d79 	.word	0x08004d79
 8006e44:	08006b95 	.word	0x08006b95
 8006e48:	08008c12 	.word	0x08008c12

08006e4c <_sbrk_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d06      	ldr	r5, [pc, #24]	; (8006e68 <_sbrk_r+0x1c>)
 8006e50:	2300      	movs	r3, #0
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	f7fa febe 	bl	8001bd8 <_sbrk>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_sbrk_r+0x1a>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_sbrk_r+0x1a>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	200005a0 	.word	0x200005a0

08006e6c <__assert_func>:
 8006e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e6e:	4614      	mov	r4, r2
 8006e70:	461a      	mov	r2, r3
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <__assert_func+0x2c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4605      	mov	r5, r0
 8006e78:	68d8      	ldr	r0, [r3, #12]
 8006e7a:	b14c      	cbz	r4, 8006e90 <__assert_func+0x24>
 8006e7c:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <__assert_func+0x30>)
 8006e7e:	9100      	str	r1, [sp, #0]
 8006e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e84:	4906      	ldr	r1, [pc, #24]	; (8006ea0 <__assert_func+0x34>)
 8006e86:	462b      	mov	r3, r5
 8006e88:	f000 f80e 	bl	8006ea8 <fiprintf>
 8006e8c:	f000 faac 	bl	80073e8 <abort>
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <__assert_func+0x38>)
 8006e92:	461c      	mov	r4, r3
 8006e94:	e7f3      	b.n	8006e7e <__assert_func+0x12>
 8006e96:	bf00      	nop
 8006e98:	20000014 	.word	0x20000014
 8006e9c:	08008c1d 	.word	0x08008c1d
 8006ea0:	08008c2a 	.word	0x08008c2a
 8006ea4:	08008c58 	.word	0x08008c58

08006ea8 <fiprintf>:
 8006ea8:	b40e      	push	{r1, r2, r3}
 8006eaa:	b503      	push	{r0, r1, lr}
 8006eac:	4601      	mov	r1, r0
 8006eae:	ab03      	add	r3, sp, #12
 8006eb0:	4805      	ldr	r0, [pc, #20]	; (8006ec8 <fiprintf+0x20>)
 8006eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb6:	6800      	ldr	r0, [r0, #0]
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	f000 f897 	bl	8006fec <_vfiprintf_r>
 8006ebe:	b002      	add	sp, #8
 8006ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ec4:	b003      	add	sp, #12
 8006ec6:	4770      	bx	lr
 8006ec8:	20000014 	.word	0x20000014

08006ecc <__ascii_mbtowc>:
 8006ecc:	b082      	sub	sp, #8
 8006ece:	b901      	cbnz	r1, 8006ed2 <__ascii_mbtowc+0x6>
 8006ed0:	a901      	add	r1, sp, #4
 8006ed2:	b142      	cbz	r2, 8006ee6 <__ascii_mbtowc+0x1a>
 8006ed4:	b14b      	cbz	r3, 8006eea <__ascii_mbtowc+0x1e>
 8006ed6:	7813      	ldrb	r3, [r2, #0]
 8006ed8:	600b      	str	r3, [r1, #0]
 8006eda:	7812      	ldrb	r2, [r2, #0]
 8006edc:	1e10      	subs	r0, r2, #0
 8006ede:	bf18      	it	ne
 8006ee0:	2001      	movne	r0, #1
 8006ee2:	b002      	add	sp, #8
 8006ee4:	4770      	bx	lr
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	e7fb      	b.n	8006ee2 <__ascii_mbtowc+0x16>
 8006eea:	f06f 0001 	mvn.w	r0, #1
 8006eee:	e7f8      	b.n	8006ee2 <__ascii_mbtowc+0x16>

08006ef0 <memmove>:
 8006ef0:	4288      	cmp	r0, r1
 8006ef2:	b510      	push	{r4, lr}
 8006ef4:	eb01 0402 	add.w	r4, r1, r2
 8006ef8:	d902      	bls.n	8006f00 <memmove+0x10>
 8006efa:	4284      	cmp	r4, r0
 8006efc:	4623      	mov	r3, r4
 8006efe:	d807      	bhi.n	8006f10 <memmove+0x20>
 8006f00:	1e43      	subs	r3, r0, #1
 8006f02:	42a1      	cmp	r1, r4
 8006f04:	d008      	beq.n	8006f18 <memmove+0x28>
 8006f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f0e:	e7f8      	b.n	8006f02 <memmove+0x12>
 8006f10:	4402      	add	r2, r0
 8006f12:	4601      	mov	r1, r0
 8006f14:	428a      	cmp	r2, r1
 8006f16:	d100      	bne.n	8006f1a <memmove+0x2a>
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f22:	e7f7      	b.n	8006f14 <memmove+0x24>

08006f24 <__malloc_lock>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__malloc_lock+0x8>)
 8006f26:	f000 bc1f 	b.w	8007768 <__retarget_lock_acquire_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	200005a4 	.word	0x200005a4

08006f30 <__malloc_unlock>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__malloc_unlock+0x8>)
 8006f32:	f000 bc1a 	b.w	800776a <__retarget_lock_release_recursive>
 8006f36:	bf00      	nop
 8006f38:	200005a4 	.word	0x200005a4

08006f3c <_realloc_r>:
 8006f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f40:	4680      	mov	r8, r0
 8006f42:	4614      	mov	r4, r2
 8006f44:	460e      	mov	r6, r1
 8006f46:	b921      	cbnz	r1, 8006f52 <_realloc_r+0x16>
 8006f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	f7ff bdad 	b.w	8006aac <_malloc_r>
 8006f52:	b92a      	cbnz	r2, 8006f60 <_realloc_r+0x24>
 8006f54:	f7ff fd3e 	bl	80069d4 <_free_r>
 8006f58:	4625      	mov	r5, r4
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f60:	f000 fc6a 	bl	8007838 <_malloc_usable_size_r>
 8006f64:	4284      	cmp	r4, r0
 8006f66:	4607      	mov	r7, r0
 8006f68:	d802      	bhi.n	8006f70 <_realloc_r+0x34>
 8006f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f6e:	d812      	bhi.n	8006f96 <_realloc_r+0x5a>
 8006f70:	4621      	mov	r1, r4
 8006f72:	4640      	mov	r0, r8
 8006f74:	f7ff fd9a 	bl	8006aac <_malloc_r>
 8006f78:	4605      	mov	r5, r0
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d0ed      	beq.n	8006f5a <_realloc_r+0x1e>
 8006f7e:	42bc      	cmp	r4, r7
 8006f80:	4622      	mov	r2, r4
 8006f82:	4631      	mov	r1, r6
 8006f84:	bf28      	it	cs
 8006f86:	463a      	movcs	r2, r7
 8006f88:	f7ff f97c 	bl	8006284 <memcpy>
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4640      	mov	r0, r8
 8006f90:	f7ff fd20 	bl	80069d4 <_free_r>
 8006f94:	e7e1      	b.n	8006f5a <_realloc_r+0x1e>
 8006f96:	4635      	mov	r5, r6
 8006f98:	e7df      	b.n	8006f5a <_realloc_r+0x1e>

08006f9a <__sfputc_r>:
 8006f9a:	6893      	ldr	r3, [r2, #8]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	b410      	push	{r4}
 8006fa2:	6093      	str	r3, [r2, #8]
 8006fa4:	da08      	bge.n	8006fb8 <__sfputc_r+0x1e>
 8006fa6:	6994      	ldr	r4, [r2, #24]
 8006fa8:	42a3      	cmp	r3, r4
 8006faa:	db01      	blt.n	8006fb0 <__sfputc_r+0x16>
 8006fac:	290a      	cmp	r1, #10
 8006fae:	d103      	bne.n	8006fb8 <__sfputc_r+0x1e>
 8006fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fb4:	f000 b94a 	b.w	800724c <__swbuf_r>
 8006fb8:	6813      	ldr	r3, [r2, #0]
 8006fba:	1c58      	adds	r0, r3, #1
 8006fbc:	6010      	str	r0, [r2, #0]
 8006fbe:	7019      	strb	r1, [r3, #0]
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <__sfputs_r>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460f      	mov	r7, r1
 8006fce:	4614      	mov	r4, r2
 8006fd0:	18d5      	adds	r5, r2, r3
 8006fd2:	42ac      	cmp	r4, r5
 8006fd4:	d101      	bne.n	8006fda <__sfputs_r+0x12>
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	e007      	b.n	8006fea <__sfputs_r+0x22>
 8006fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fde:	463a      	mov	r2, r7
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f7ff ffda 	bl	8006f9a <__sfputc_r>
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	d1f3      	bne.n	8006fd2 <__sfputs_r+0xa>
 8006fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fec <_vfiprintf_r>:
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	b09d      	sub	sp, #116	; 0x74
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	4698      	mov	r8, r3
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	b118      	cbz	r0, 8007004 <_vfiprintf_r+0x18>
 8006ffc:	6983      	ldr	r3, [r0, #24]
 8006ffe:	b90b      	cbnz	r3, 8007004 <_vfiprintf_r+0x18>
 8007000:	f000 fb14 	bl	800762c <__sinit>
 8007004:	4b89      	ldr	r3, [pc, #548]	; (800722c <_vfiprintf_r+0x240>)
 8007006:	429d      	cmp	r5, r3
 8007008:	d11b      	bne.n	8007042 <_vfiprintf_r+0x56>
 800700a:	6875      	ldr	r5, [r6, #4]
 800700c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800700e:	07d9      	lsls	r1, r3, #31
 8007010:	d405      	bmi.n	800701e <_vfiprintf_r+0x32>
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	059a      	lsls	r2, r3, #22
 8007016:	d402      	bmi.n	800701e <_vfiprintf_r+0x32>
 8007018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701a:	f000 fba5 	bl	8007768 <__retarget_lock_acquire_recursive>
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	071b      	lsls	r3, r3, #28
 8007022:	d501      	bpl.n	8007028 <_vfiprintf_r+0x3c>
 8007024:	692b      	ldr	r3, [r5, #16]
 8007026:	b9eb      	cbnz	r3, 8007064 <_vfiprintf_r+0x78>
 8007028:	4629      	mov	r1, r5
 800702a:	4630      	mov	r0, r6
 800702c:	f000 f96e 	bl	800730c <__swsetup_r>
 8007030:	b1c0      	cbz	r0, 8007064 <_vfiprintf_r+0x78>
 8007032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007034:	07dc      	lsls	r4, r3, #31
 8007036:	d50e      	bpl.n	8007056 <_vfiprintf_r+0x6a>
 8007038:	f04f 30ff 	mov.w	r0, #4294967295
 800703c:	b01d      	add	sp, #116	; 0x74
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	4b7b      	ldr	r3, [pc, #492]	; (8007230 <_vfiprintf_r+0x244>)
 8007044:	429d      	cmp	r5, r3
 8007046:	d101      	bne.n	800704c <_vfiprintf_r+0x60>
 8007048:	68b5      	ldr	r5, [r6, #8]
 800704a:	e7df      	b.n	800700c <_vfiprintf_r+0x20>
 800704c:	4b79      	ldr	r3, [pc, #484]	; (8007234 <_vfiprintf_r+0x248>)
 800704e:	429d      	cmp	r5, r3
 8007050:	bf08      	it	eq
 8007052:	68f5      	ldreq	r5, [r6, #12]
 8007054:	e7da      	b.n	800700c <_vfiprintf_r+0x20>
 8007056:	89ab      	ldrh	r3, [r5, #12]
 8007058:	0598      	lsls	r0, r3, #22
 800705a:	d4ed      	bmi.n	8007038 <_vfiprintf_r+0x4c>
 800705c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800705e:	f000 fb84 	bl	800776a <__retarget_lock_release_recursive>
 8007062:	e7e9      	b.n	8007038 <_vfiprintf_r+0x4c>
 8007064:	2300      	movs	r3, #0
 8007066:	9309      	str	r3, [sp, #36]	; 0x24
 8007068:	2320      	movs	r3, #32
 800706a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800706e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007072:	2330      	movs	r3, #48	; 0x30
 8007074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007238 <_vfiprintf_r+0x24c>
 8007078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800707c:	f04f 0901 	mov.w	r9, #1
 8007080:	4623      	mov	r3, r4
 8007082:	469a      	mov	sl, r3
 8007084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007088:	b10a      	cbz	r2, 800708e <_vfiprintf_r+0xa2>
 800708a:	2a25      	cmp	r2, #37	; 0x25
 800708c:	d1f9      	bne.n	8007082 <_vfiprintf_r+0x96>
 800708e:	ebba 0b04 	subs.w	fp, sl, r4
 8007092:	d00b      	beq.n	80070ac <_vfiprintf_r+0xc0>
 8007094:	465b      	mov	r3, fp
 8007096:	4622      	mov	r2, r4
 8007098:	4629      	mov	r1, r5
 800709a:	4630      	mov	r0, r6
 800709c:	f7ff ff94 	bl	8006fc8 <__sfputs_r>
 80070a0:	3001      	adds	r0, #1
 80070a2:	f000 80aa 	beq.w	80071fa <_vfiprintf_r+0x20e>
 80070a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a8:	445a      	add	r2, fp
 80070aa:	9209      	str	r2, [sp, #36]	; 0x24
 80070ac:	f89a 3000 	ldrb.w	r3, [sl]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80a2 	beq.w	80071fa <_vfiprintf_r+0x20e>
 80070b6:	2300      	movs	r3, #0
 80070b8:	f04f 32ff 	mov.w	r2, #4294967295
 80070bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c0:	f10a 0a01 	add.w	sl, sl, #1
 80070c4:	9304      	str	r3, [sp, #16]
 80070c6:	9307      	str	r3, [sp, #28]
 80070c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070cc:	931a      	str	r3, [sp, #104]	; 0x68
 80070ce:	4654      	mov	r4, sl
 80070d0:	2205      	movs	r2, #5
 80070d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d6:	4858      	ldr	r0, [pc, #352]	; (8007238 <_vfiprintf_r+0x24c>)
 80070d8:	f7f9 f88a 	bl	80001f0 <memchr>
 80070dc:	9a04      	ldr	r2, [sp, #16]
 80070de:	b9d8      	cbnz	r0, 8007118 <_vfiprintf_r+0x12c>
 80070e0:	06d1      	lsls	r1, r2, #27
 80070e2:	bf44      	itt	mi
 80070e4:	2320      	movmi	r3, #32
 80070e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ea:	0713      	lsls	r3, r2, #28
 80070ec:	bf44      	itt	mi
 80070ee:	232b      	movmi	r3, #43	; 0x2b
 80070f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f4:	f89a 3000 	ldrb.w	r3, [sl]
 80070f8:	2b2a      	cmp	r3, #42	; 0x2a
 80070fa:	d015      	beq.n	8007128 <_vfiprintf_r+0x13c>
 80070fc:	9a07      	ldr	r2, [sp, #28]
 80070fe:	4654      	mov	r4, sl
 8007100:	2000      	movs	r0, #0
 8007102:	f04f 0c0a 	mov.w	ip, #10
 8007106:	4621      	mov	r1, r4
 8007108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710c:	3b30      	subs	r3, #48	; 0x30
 800710e:	2b09      	cmp	r3, #9
 8007110:	d94e      	bls.n	80071b0 <_vfiprintf_r+0x1c4>
 8007112:	b1b0      	cbz	r0, 8007142 <_vfiprintf_r+0x156>
 8007114:	9207      	str	r2, [sp, #28]
 8007116:	e014      	b.n	8007142 <_vfiprintf_r+0x156>
 8007118:	eba0 0308 	sub.w	r3, r0, r8
 800711c:	fa09 f303 	lsl.w	r3, r9, r3
 8007120:	4313      	orrs	r3, r2
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	46a2      	mov	sl, r4
 8007126:	e7d2      	b.n	80070ce <_vfiprintf_r+0xe2>
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	1d19      	adds	r1, r3, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	9103      	str	r1, [sp, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	bfbb      	ittet	lt
 8007134:	425b      	neglt	r3, r3
 8007136:	f042 0202 	orrlt.w	r2, r2, #2
 800713a:	9307      	strge	r3, [sp, #28]
 800713c:	9307      	strlt	r3, [sp, #28]
 800713e:	bfb8      	it	lt
 8007140:	9204      	strlt	r2, [sp, #16]
 8007142:	7823      	ldrb	r3, [r4, #0]
 8007144:	2b2e      	cmp	r3, #46	; 0x2e
 8007146:	d10c      	bne.n	8007162 <_vfiprintf_r+0x176>
 8007148:	7863      	ldrb	r3, [r4, #1]
 800714a:	2b2a      	cmp	r3, #42	; 0x2a
 800714c:	d135      	bne.n	80071ba <_vfiprintf_r+0x1ce>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	1d1a      	adds	r2, r3, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	9203      	str	r2, [sp, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfb8      	it	lt
 800715a:	f04f 33ff 	movlt.w	r3, #4294967295
 800715e:	3402      	adds	r4, #2
 8007160:	9305      	str	r3, [sp, #20]
 8007162:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007248 <_vfiprintf_r+0x25c>
 8007166:	7821      	ldrb	r1, [r4, #0]
 8007168:	2203      	movs	r2, #3
 800716a:	4650      	mov	r0, sl
 800716c:	f7f9 f840 	bl	80001f0 <memchr>
 8007170:	b140      	cbz	r0, 8007184 <_vfiprintf_r+0x198>
 8007172:	2340      	movs	r3, #64	; 0x40
 8007174:	eba0 000a 	sub.w	r0, r0, sl
 8007178:	fa03 f000 	lsl.w	r0, r3, r0
 800717c:	9b04      	ldr	r3, [sp, #16]
 800717e:	4303      	orrs	r3, r0
 8007180:	3401      	adds	r4, #1
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007188:	482c      	ldr	r0, [pc, #176]	; (800723c <_vfiprintf_r+0x250>)
 800718a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800718e:	2206      	movs	r2, #6
 8007190:	f7f9 f82e 	bl	80001f0 <memchr>
 8007194:	2800      	cmp	r0, #0
 8007196:	d03f      	beq.n	8007218 <_vfiprintf_r+0x22c>
 8007198:	4b29      	ldr	r3, [pc, #164]	; (8007240 <_vfiprintf_r+0x254>)
 800719a:	bb1b      	cbnz	r3, 80071e4 <_vfiprintf_r+0x1f8>
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	3307      	adds	r3, #7
 80071a0:	f023 0307 	bic.w	r3, r3, #7
 80071a4:	3308      	adds	r3, #8
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071aa:	443b      	add	r3, r7
 80071ac:	9309      	str	r3, [sp, #36]	; 0x24
 80071ae:	e767      	b.n	8007080 <_vfiprintf_r+0x94>
 80071b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b4:	460c      	mov	r4, r1
 80071b6:	2001      	movs	r0, #1
 80071b8:	e7a5      	b.n	8007106 <_vfiprintf_r+0x11a>
 80071ba:	2300      	movs	r3, #0
 80071bc:	3401      	adds	r4, #1
 80071be:	9305      	str	r3, [sp, #20]
 80071c0:	4619      	mov	r1, r3
 80071c2:	f04f 0c0a 	mov.w	ip, #10
 80071c6:	4620      	mov	r0, r4
 80071c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071cc:	3a30      	subs	r2, #48	; 0x30
 80071ce:	2a09      	cmp	r2, #9
 80071d0:	d903      	bls.n	80071da <_vfiprintf_r+0x1ee>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0c5      	beq.n	8007162 <_vfiprintf_r+0x176>
 80071d6:	9105      	str	r1, [sp, #20]
 80071d8:	e7c3      	b.n	8007162 <_vfiprintf_r+0x176>
 80071da:	fb0c 2101 	mla	r1, ip, r1, r2
 80071de:	4604      	mov	r4, r0
 80071e0:	2301      	movs	r3, #1
 80071e2:	e7f0      	b.n	80071c6 <_vfiprintf_r+0x1da>
 80071e4:	ab03      	add	r3, sp, #12
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	462a      	mov	r2, r5
 80071ea:	4b16      	ldr	r3, [pc, #88]	; (8007244 <_vfiprintf_r+0x258>)
 80071ec:	a904      	add	r1, sp, #16
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7fd fdc2 	bl	8004d78 <_printf_float>
 80071f4:	4607      	mov	r7, r0
 80071f6:	1c78      	adds	r0, r7, #1
 80071f8:	d1d6      	bne.n	80071a8 <_vfiprintf_r+0x1bc>
 80071fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071fc:	07d9      	lsls	r1, r3, #31
 80071fe:	d405      	bmi.n	800720c <_vfiprintf_r+0x220>
 8007200:	89ab      	ldrh	r3, [r5, #12]
 8007202:	059a      	lsls	r2, r3, #22
 8007204:	d402      	bmi.n	800720c <_vfiprintf_r+0x220>
 8007206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007208:	f000 faaf 	bl	800776a <__retarget_lock_release_recursive>
 800720c:	89ab      	ldrh	r3, [r5, #12]
 800720e:	065b      	lsls	r3, r3, #25
 8007210:	f53f af12 	bmi.w	8007038 <_vfiprintf_r+0x4c>
 8007214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007216:	e711      	b.n	800703c <_vfiprintf_r+0x50>
 8007218:	ab03      	add	r3, sp, #12
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	462a      	mov	r2, r5
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <_vfiprintf_r+0x258>)
 8007220:	a904      	add	r1, sp, #16
 8007222:	4630      	mov	r0, r6
 8007224:	f7fe f84c 	bl	80052c0 <_printf_i>
 8007228:	e7e4      	b.n	80071f4 <_vfiprintf_r+0x208>
 800722a:	bf00      	nop
 800722c:	08008d84 	.word	0x08008d84
 8007230:	08008da4 	.word	0x08008da4
 8007234:	08008d64 	.word	0x08008d64
 8007238:	08008c0c 	.word	0x08008c0c
 800723c:	08008c16 	.word	0x08008c16
 8007240:	08004d79 	.word	0x08004d79
 8007244:	08006fc9 	.word	0x08006fc9
 8007248:	08008c12 	.word	0x08008c12

0800724c <__swbuf_r>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	460e      	mov	r6, r1
 8007250:	4614      	mov	r4, r2
 8007252:	4605      	mov	r5, r0
 8007254:	b118      	cbz	r0, 800725e <__swbuf_r+0x12>
 8007256:	6983      	ldr	r3, [r0, #24]
 8007258:	b90b      	cbnz	r3, 800725e <__swbuf_r+0x12>
 800725a:	f000 f9e7 	bl	800762c <__sinit>
 800725e:	4b21      	ldr	r3, [pc, #132]	; (80072e4 <__swbuf_r+0x98>)
 8007260:	429c      	cmp	r4, r3
 8007262:	d12b      	bne.n	80072bc <__swbuf_r+0x70>
 8007264:	686c      	ldr	r4, [r5, #4]
 8007266:	69a3      	ldr	r3, [r4, #24]
 8007268:	60a3      	str	r3, [r4, #8]
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	071a      	lsls	r2, r3, #28
 800726e:	d52f      	bpl.n	80072d0 <__swbuf_r+0x84>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	b36b      	cbz	r3, 80072d0 <__swbuf_r+0x84>
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	6820      	ldr	r0, [r4, #0]
 8007278:	1ac0      	subs	r0, r0, r3
 800727a:	6963      	ldr	r3, [r4, #20]
 800727c:	b2f6      	uxtb	r6, r6
 800727e:	4283      	cmp	r3, r0
 8007280:	4637      	mov	r7, r6
 8007282:	dc04      	bgt.n	800728e <__swbuf_r+0x42>
 8007284:	4621      	mov	r1, r4
 8007286:	4628      	mov	r0, r5
 8007288:	f000 f93c 	bl	8007504 <_fflush_r>
 800728c:	bb30      	cbnz	r0, 80072dc <__swbuf_r+0x90>
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	3b01      	subs	r3, #1
 8007292:	60a3      	str	r3, [r4, #8]
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	701e      	strb	r6, [r3, #0]
 800729c:	6963      	ldr	r3, [r4, #20]
 800729e:	3001      	adds	r0, #1
 80072a0:	4283      	cmp	r3, r0
 80072a2:	d004      	beq.n	80072ae <__swbuf_r+0x62>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	07db      	lsls	r3, r3, #31
 80072a8:	d506      	bpl.n	80072b8 <__swbuf_r+0x6c>
 80072aa:	2e0a      	cmp	r6, #10
 80072ac:	d104      	bne.n	80072b8 <__swbuf_r+0x6c>
 80072ae:	4621      	mov	r1, r4
 80072b0:	4628      	mov	r0, r5
 80072b2:	f000 f927 	bl	8007504 <_fflush_r>
 80072b6:	b988      	cbnz	r0, 80072dc <__swbuf_r+0x90>
 80072b8:	4638      	mov	r0, r7
 80072ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <__swbuf_r+0x9c>)
 80072be:	429c      	cmp	r4, r3
 80072c0:	d101      	bne.n	80072c6 <__swbuf_r+0x7a>
 80072c2:	68ac      	ldr	r4, [r5, #8]
 80072c4:	e7cf      	b.n	8007266 <__swbuf_r+0x1a>
 80072c6:	4b09      	ldr	r3, [pc, #36]	; (80072ec <__swbuf_r+0xa0>)
 80072c8:	429c      	cmp	r4, r3
 80072ca:	bf08      	it	eq
 80072cc:	68ec      	ldreq	r4, [r5, #12]
 80072ce:	e7ca      	b.n	8007266 <__swbuf_r+0x1a>
 80072d0:	4621      	mov	r1, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 f81a 	bl	800730c <__swsetup_r>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d0cb      	beq.n	8007274 <__swbuf_r+0x28>
 80072dc:	f04f 37ff 	mov.w	r7, #4294967295
 80072e0:	e7ea      	b.n	80072b8 <__swbuf_r+0x6c>
 80072e2:	bf00      	nop
 80072e4:	08008d84 	.word	0x08008d84
 80072e8:	08008da4 	.word	0x08008da4
 80072ec:	08008d64 	.word	0x08008d64

080072f0 <__ascii_wctomb>:
 80072f0:	b149      	cbz	r1, 8007306 <__ascii_wctomb+0x16>
 80072f2:	2aff      	cmp	r2, #255	; 0xff
 80072f4:	bf85      	ittet	hi
 80072f6:	238a      	movhi	r3, #138	; 0x8a
 80072f8:	6003      	strhi	r3, [r0, #0]
 80072fa:	700a      	strbls	r2, [r1, #0]
 80072fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007300:	bf98      	it	ls
 8007302:	2001      	movls	r0, #1
 8007304:	4770      	bx	lr
 8007306:	4608      	mov	r0, r1
 8007308:	4770      	bx	lr
	...

0800730c <__swsetup_r>:
 800730c:	4b32      	ldr	r3, [pc, #200]	; (80073d8 <__swsetup_r+0xcc>)
 800730e:	b570      	push	{r4, r5, r6, lr}
 8007310:	681d      	ldr	r5, [r3, #0]
 8007312:	4606      	mov	r6, r0
 8007314:	460c      	mov	r4, r1
 8007316:	b125      	cbz	r5, 8007322 <__swsetup_r+0x16>
 8007318:	69ab      	ldr	r3, [r5, #24]
 800731a:	b913      	cbnz	r3, 8007322 <__swsetup_r+0x16>
 800731c:	4628      	mov	r0, r5
 800731e:	f000 f985 	bl	800762c <__sinit>
 8007322:	4b2e      	ldr	r3, [pc, #184]	; (80073dc <__swsetup_r+0xd0>)
 8007324:	429c      	cmp	r4, r3
 8007326:	d10f      	bne.n	8007348 <__swsetup_r+0x3c>
 8007328:	686c      	ldr	r4, [r5, #4]
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007330:	0719      	lsls	r1, r3, #28
 8007332:	d42c      	bmi.n	800738e <__swsetup_r+0x82>
 8007334:	06dd      	lsls	r5, r3, #27
 8007336:	d411      	bmi.n	800735c <__swsetup_r+0x50>
 8007338:	2309      	movs	r3, #9
 800733a:	6033      	str	r3, [r6, #0]
 800733c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	f04f 30ff 	mov.w	r0, #4294967295
 8007346:	e03e      	b.n	80073c6 <__swsetup_r+0xba>
 8007348:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <__swsetup_r+0xd4>)
 800734a:	429c      	cmp	r4, r3
 800734c:	d101      	bne.n	8007352 <__swsetup_r+0x46>
 800734e:	68ac      	ldr	r4, [r5, #8]
 8007350:	e7eb      	b.n	800732a <__swsetup_r+0x1e>
 8007352:	4b24      	ldr	r3, [pc, #144]	; (80073e4 <__swsetup_r+0xd8>)
 8007354:	429c      	cmp	r4, r3
 8007356:	bf08      	it	eq
 8007358:	68ec      	ldreq	r4, [r5, #12]
 800735a:	e7e6      	b.n	800732a <__swsetup_r+0x1e>
 800735c:	0758      	lsls	r0, r3, #29
 800735e:	d512      	bpl.n	8007386 <__swsetup_r+0x7a>
 8007360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007362:	b141      	cbz	r1, 8007376 <__swsetup_r+0x6a>
 8007364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007368:	4299      	cmp	r1, r3
 800736a:	d002      	beq.n	8007372 <__swsetup_r+0x66>
 800736c:	4630      	mov	r0, r6
 800736e:	f7ff fb31 	bl	80069d4 <_free_r>
 8007372:	2300      	movs	r3, #0
 8007374:	6363      	str	r3, [r4, #52]	; 0x34
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	2300      	movs	r3, #0
 8007380:	6063      	str	r3, [r4, #4]
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f043 0308 	orr.w	r3, r3, #8
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	b94b      	cbnz	r3, 80073a6 <__swsetup_r+0x9a>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800739c:	d003      	beq.n	80073a6 <__swsetup_r+0x9a>
 800739e:	4621      	mov	r1, r4
 80073a0:	4630      	mov	r0, r6
 80073a2:	f000 fa09 	bl	80077b8 <__smakebuf_r>
 80073a6:	89a0      	ldrh	r0, [r4, #12]
 80073a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073ac:	f010 0301 	ands.w	r3, r0, #1
 80073b0:	d00a      	beq.n	80073c8 <__swsetup_r+0xbc>
 80073b2:	2300      	movs	r3, #0
 80073b4:	60a3      	str	r3, [r4, #8]
 80073b6:	6963      	ldr	r3, [r4, #20]
 80073b8:	425b      	negs	r3, r3
 80073ba:	61a3      	str	r3, [r4, #24]
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	b943      	cbnz	r3, 80073d2 <__swsetup_r+0xc6>
 80073c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073c4:	d1ba      	bne.n	800733c <__swsetup_r+0x30>
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	0781      	lsls	r1, r0, #30
 80073ca:	bf58      	it	pl
 80073cc:	6963      	ldrpl	r3, [r4, #20]
 80073ce:	60a3      	str	r3, [r4, #8]
 80073d0:	e7f4      	b.n	80073bc <__swsetup_r+0xb0>
 80073d2:	2000      	movs	r0, #0
 80073d4:	e7f7      	b.n	80073c6 <__swsetup_r+0xba>
 80073d6:	bf00      	nop
 80073d8:	20000014 	.word	0x20000014
 80073dc:	08008d84 	.word	0x08008d84
 80073e0:	08008da4 	.word	0x08008da4
 80073e4:	08008d64 	.word	0x08008d64

080073e8 <abort>:
 80073e8:	b508      	push	{r3, lr}
 80073ea:	2006      	movs	r0, #6
 80073ec:	f000 fa54 	bl	8007898 <raise>
 80073f0:	2001      	movs	r0, #1
 80073f2:	f7fa fb79 	bl	8001ae8 <_exit>
	...

080073f8 <__sflush_r>:
 80073f8:	898a      	ldrh	r2, [r1, #12]
 80073fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	4605      	mov	r5, r0
 8007400:	0710      	lsls	r0, r2, #28
 8007402:	460c      	mov	r4, r1
 8007404:	d458      	bmi.n	80074b8 <__sflush_r+0xc0>
 8007406:	684b      	ldr	r3, [r1, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	dc05      	bgt.n	8007418 <__sflush_r+0x20>
 800740c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	dc02      	bgt.n	8007418 <__sflush_r+0x20>
 8007412:	2000      	movs	r0, #0
 8007414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800741a:	2e00      	cmp	r6, #0
 800741c:	d0f9      	beq.n	8007412 <__sflush_r+0x1a>
 800741e:	2300      	movs	r3, #0
 8007420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007424:	682f      	ldr	r7, [r5, #0]
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	d032      	beq.n	8007490 <__sflush_r+0x98>
 800742a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800742c:	89a3      	ldrh	r3, [r4, #12]
 800742e:	075a      	lsls	r2, r3, #29
 8007430:	d505      	bpl.n	800743e <__sflush_r+0x46>
 8007432:	6863      	ldr	r3, [r4, #4]
 8007434:	1ac0      	subs	r0, r0, r3
 8007436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007438:	b10b      	cbz	r3, 800743e <__sflush_r+0x46>
 800743a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800743c:	1ac0      	subs	r0, r0, r3
 800743e:	2300      	movs	r3, #0
 8007440:	4602      	mov	r2, r0
 8007442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007444:	6a21      	ldr	r1, [r4, #32]
 8007446:	4628      	mov	r0, r5
 8007448:	47b0      	blx	r6
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	d106      	bne.n	800745e <__sflush_r+0x66>
 8007450:	6829      	ldr	r1, [r5, #0]
 8007452:	291d      	cmp	r1, #29
 8007454:	d82c      	bhi.n	80074b0 <__sflush_r+0xb8>
 8007456:	4a2a      	ldr	r2, [pc, #168]	; (8007500 <__sflush_r+0x108>)
 8007458:	40ca      	lsrs	r2, r1
 800745a:	07d6      	lsls	r6, r2, #31
 800745c:	d528      	bpl.n	80074b0 <__sflush_r+0xb8>
 800745e:	2200      	movs	r2, #0
 8007460:	6062      	str	r2, [r4, #4]
 8007462:	04d9      	lsls	r1, r3, #19
 8007464:	6922      	ldr	r2, [r4, #16]
 8007466:	6022      	str	r2, [r4, #0]
 8007468:	d504      	bpl.n	8007474 <__sflush_r+0x7c>
 800746a:	1c42      	adds	r2, r0, #1
 800746c:	d101      	bne.n	8007472 <__sflush_r+0x7a>
 800746e:	682b      	ldr	r3, [r5, #0]
 8007470:	b903      	cbnz	r3, 8007474 <__sflush_r+0x7c>
 8007472:	6560      	str	r0, [r4, #84]	; 0x54
 8007474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007476:	602f      	str	r7, [r5, #0]
 8007478:	2900      	cmp	r1, #0
 800747a:	d0ca      	beq.n	8007412 <__sflush_r+0x1a>
 800747c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007480:	4299      	cmp	r1, r3
 8007482:	d002      	beq.n	800748a <__sflush_r+0x92>
 8007484:	4628      	mov	r0, r5
 8007486:	f7ff faa5 	bl	80069d4 <_free_r>
 800748a:	2000      	movs	r0, #0
 800748c:	6360      	str	r0, [r4, #52]	; 0x34
 800748e:	e7c1      	b.n	8007414 <__sflush_r+0x1c>
 8007490:	6a21      	ldr	r1, [r4, #32]
 8007492:	2301      	movs	r3, #1
 8007494:	4628      	mov	r0, r5
 8007496:	47b0      	blx	r6
 8007498:	1c41      	adds	r1, r0, #1
 800749a:	d1c7      	bne.n	800742c <__sflush_r+0x34>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0c4      	beq.n	800742c <__sflush_r+0x34>
 80074a2:	2b1d      	cmp	r3, #29
 80074a4:	d001      	beq.n	80074aa <__sflush_r+0xb2>
 80074a6:	2b16      	cmp	r3, #22
 80074a8:	d101      	bne.n	80074ae <__sflush_r+0xb6>
 80074aa:	602f      	str	r7, [r5, #0]
 80074ac:	e7b1      	b.n	8007412 <__sflush_r+0x1a>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	e7ad      	b.n	8007414 <__sflush_r+0x1c>
 80074b8:	690f      	ldr	r7, [r1, #16]
 80074ba:	2f00      	cmp	r7, #0
 80074bc:	d0a9      	beq.n	8007412 <__sflush_r+0x1a>
 80074be:	0793      	lsls	r3, r2, #30
 80074c0:	680e      	ldr	r6, [r1, #0]
 80074c2:	bf08      	it	eq
 80074c4:	694b      	ldreq	r3, [r1, #20]
 80074c6:	600f      	str	r7, [r1, #0]
 80074c8:	bf18      	it	ne
 80074ca:	2300      	movne	r3, #0
 80074cc:	eba6 0807 	sub.w	r8, r6, r7
 80074d0:	608b      	str	r3, [r1, #8]
 80074d2:	f1b8 0f00 	cmp.w	r8, #0
 80074d6:	dd9c      	ble.n	8007412 <__sflush_r+0x1a>
 80074d8:	6a21      	ldr	r1, [r4, #32]
 80074da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074dc:	4643      	mov	r3, r8
 80074de:	463a      	mov	r2, r7
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b0      	blx	r6
 80074e4:	2800      	cmp	r0, #0
 80074e6:	dc06      	bgt.n	80074f6 <__sflush_r+0xfe>
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	e78e      	b.n	8007414 <__sflush_r+0x1c>
 80074f6:	4407      	add	r7, r0
 80074f8:	eba8 0800 	sub.w	r8, r8, r0
 80074fc:	e7e9      	b.n	80074d2 <__sflush_r+0xda>
 80074fe:	bf00      	nop
 8007500:	20400001 	.word	0x20400001

08007504 <_fflush_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	690b      	ldr	r3, [r1, #16]
 8007508:	4605      	mov	r5, r0
 800750a:	460c      	mov	r4, r1
 800750c:	b913      	cbnz	r3, 8007514 <_fflush_r+0x10>
 800750e:	2500      	movs	r5, #0
 8007510:	4628      	mov	r0, r5
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	b118      	cbz	r0, 800751e <_fflush_r+0x1a>
 8007516:	6983      	ldr	r3, [r0, #24]
 8007518:	b90b      	cbnz	r3, 800751e <_fflush_r+0x1a>
 800751a:	f000 f887 	bl	800762c <__sinit>
 800751e:	4b14      	ldr	r3, [pc, #80]	; (8007570 <_fflush_r+0x6c>)
 8007520:	429c      	cmp	r4, r3
 8007522:	d11b      	bne.n	800755c <_fflush_r+0x58>
 8007524:	686c      	ldr	r4, [r5, #4]
 8007526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0ef      	beq.n	800750e <_fflush_r+0xa>
 800752e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007530:	07d0      	lsls	r0, r2, #31
 8007532:	d404      	bmi.n	800753e <_fflush_r+0x3a>
 8007534:	0599      	lsls	r1, r3, #22
 8007536:	d402      	bmi.n	800753e <_fflush_r+0x3a>
 8007538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753a:	f000 f915 	bl	8007768 <__retarget_lock_acquire_recursive>
 800753e:	4628      	mov	r0, r5
 8007540:	4621      	mov	r1, r4
 8007542:	f7ff ff59 	bl	80073f8 <__sflush_r>
 8007546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007548:	07da      	lsls	r2, r3, #31
 800754a:	4605      	mov	r5, r0
 800754c:	d4e0      	bmi.n	8007510 <_fflush_r+0xc>
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	059b      	lsls	r3, r3, #22
 8007552:	d4dd      	bmi.n	8007510 <_fflush_r+0xc>
 8007554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007556:	f000 f908 	bl	800776a <__retarget_lock_release_recursive>
 800755a:	e7d9      	b.n	8007510 <_fflush_r+0xc>
 800755c:	4b05      	ldr	r3, [pc, #20]	; (8007574 <_fflush_r+0x70>)
 800755e:	429c      	cmp	r4, r3
 8007560:	d101      	bne.n	8007566 <_fflush_r+0x62>
 8007562:	68ac      	ldr	r4, [r5, #8]
 8007564:	e7df      	b.n	8007526 <_fflush_r+0x22>
 8007566:	4b04      	ldr	r3, [pc, #16]	; (8007578 <_fflush_r+0x74>)
 8007568:	429c      	cmp	r4, r3
 800756a:	bf08      	it	eq
 800756c:	68ec      	ldreq	r4, [r5, #12]
 800756e:	e7da      	b.n	8007526 <_fflush_r+0x22>
 8007570:	08008d84 	.word	0x08008d84
 8007574:	08008da4 	.word	0x08008da4
 8007578:	08008d64 	.word	0x08008d64

0800757c <std>:
 800757c:	2300      	movs	r3, #0
 800757e:	b510      	push	{r4, lr}
 8007580:	4604      	mov	r4, r0
 8007582:	e9c0 3300 	strd	r3, r3, [r0]
 8007586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800758a:	6083      	str	r3, [r0, #8]
 800758c:	8181      	strh	r1, [r0, #12]
 800758e:	6643      	str	r3, [r0, #100]	; 0x64
 8007590:	81c2      	strh	r2, [r0, #14]
 8007592:	6183      	str	r3, [r0, #24]
 8007594:	4619      	mov	r1, r3
 8007596:	2208      	movs	r2, #8
 8007598:	305c      	adds	r0, #92	; 0x5c
 800759a:	f7fd fb45 	bl	8004c28 <memset>
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <std+0x38>)
 80075a0:	6263      	str	r3, [r4, #36]	; 0x24
 80075a2:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <std+0x3c>)
 80075a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <std+0x40>)
 80075a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <std+0x44>)
 80075ac:	6224      	str	r4, [r4, #32]
 80075ae:	6323      	str	r3, [r4, #48]	; 0x30
 80075b0:	bd10      	pop	{r4, pc}
 80075b2:	bf00      	nop
 80075b4:	080078d1 	.word	0x080078d1
 80075b8:	080078f3 	.word	0x080078f3
 80075bc:	0800792b 	.word	0x0800792b
 80075c0:	0800794f 	.word	0x0800794f

080075c4 <_cleanup_r>:
 80075c4:	4901      	ldr	r1, [pc, #4]	; (80075cc <_cleanup_r+0x8>)
 80075c6:	f000 b8af 	b.w	8007728 <_fwalk_reent>
 80075ca:	bf00      	nop
 80075cc:	08007505 	.word	0x08007505

080075d0 <__sfmoreglue>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	2268      	movs	r2, #104	; 0x68
 80075d4:	1e4d      	subs	r5, r1, #1
 80075d6:	4355      	muls	r5, r2
 80075d8:	460e      	mov	r6, r1
 80075da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075de:	f7ff fa65 	bl	8006aac <_malloc_r>
 80075e2:	4604      	mov	r4, r0
 80075e4:	b140      	cbz	r0, 80075f8 <__sfmoreglue+0x28>
 80075e6:	2100      	movs	r1, #0
 80075e8:	e9c0 1600 	strd	r1, r6, [r0]
 80075ec:	300c      	adds	r0, #12
 80075ee:	60a0      	str	r0, [r4, #8]
 80075f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075f4:	f7fd fb18 	bl	8004c28 <memset>
 80075f8:	4620      	mov	r0, r4
 80075fa:	bd70      	pop	{r4, r5, r6, pc}

080075fc <__sfp_lock_acquire>:
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <__sfp_lock_acquire+0x8>)
 80075fe:	f000 b8b3 	b.w	8007768 <__retarget_lock_acquire_recursive>
 8007602:	bf00      	nop
 8007604:	200005a5 	.word	0x200005a5

08007608 <__sfp_lock_release>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__sfp_lock_release+0x8>)
 800760a:	f000 b8ae 	b.w	800776a <__retarget_lock_release_recursive>
 800760e:	bf00      	nop
 8007610:	200005a5 	.word	0x200005a5

08007614 <__sinit_lock_acquire>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__sinit_lock_acquire+0x8>)
 8007616:	f000 b8a7 	b.w	8007768 <__retarget_lock_acquire_recursive>
 800761a:	bf00      	nop
 800761c:	200005a6 	.word	0x200005a6

08007620 <__sinit_lock_release>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__sinit_lock_release+0x8>)
 8007622:	f000 b8a2 	b.w	800776a <__retarget_lock_release_recursive>
 8007626:	bf00      	nop
 8007628:	200005a6 	.word	0x200005a6

0800762c <__sinit>:
 800762c:	b510      	push	{r4, lr}
 800762e:	4604      	mov	r4, r0
 8007630:	f7ff fff0 	bl	8007614 <__sinit_lock_acquire>
 8007634:	69a3      	ldr	r3, [r4, #24]
 8007636:	b11b      	cbz	r3, 8007640 <__sinit+0x14>
 8007638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800763c:	f7ff bff0 	b.w	8007620 <__sinit_lock_release>
 8007640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007644:	6523      	str	r3, [r4, #80]	; 0x50
 8007646:	4b13      	ldr	r3, [pc, #76]	; (8007694 <__sinit+0x68>)
 8007648:	4a13      	ldr	r2, [pc, #76]	; (8007698 <__sinit+0x6c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	62a2      	str	r2, [r4, #40]	; 0x28
 800764e:	42a3      	cmp	r3, r4
 8007650:	bf04      	itt	eq
 8007652:	2301      	moveq	r3, #1
 8007654:	61a3      	streq	r3, [r4, #24]
 8007656:	4620      	mov	r0, r4
 8007658:	f000 f820 	bl	800769c <__sfp>
 800765c:	6060      	str	r0, [r4, #4]
 800765e:	4620      	mov	r0, r4
 8007660:	f000 f81c 	bl	800769c <__sfp>
 8007664:	60a0      	str	r0, [r4, #8]
 8007666:	4620      	mov	r0, r4
 8007668:	f000 f818 	bl	800769c <__sfp>
 800766c:	2200      	movs	r2, #0
 800766e:	60e0      	str	r0, [r4, #12]
 8007670:	2104      	movs	r1, #4
 8007672:	6860      	ldr	r0, [r4, #4]
 8007674:	f7ff ff82 	bl	800757c <std>
 8007678:	68a0      	ldr	r0, [r4, #8]
 800767a:	2201      	movs	r2, #1
 800767c:	2109      	movs	r1, #9
 800767e:	f7ff ff7d 	bl	800757c <std>
 8007682:	68e0      	ldr	r0, [r4, #12]
 8007684:	2202      	movs	r2, #2
 8007686:	2112      	movs	r1, #18
 8007688:	f7ff ff78 	bl	800757c <std>
 800768c:	2301      	movs	r3, #1
 800768e:	61a3      	str	r3, [r4, #24]
 8007690:	e7d2      	b.n	8007638 <__sinit+0xc>
 8007692:	bf00      	nop
 8007694:	080089e8 	.word	0x080089e8
 8007698:	080075c5 	.word	0x080075c5

0800769c <__sfp>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	4607      	mov	r7, r0
 80076a0:	f7ff ffac 	bl	80075fc <__sfp_lock_acquire>
 80076a4:	4b1e      	ldr	r3, [pc, #120]	; (8007720 <__sfp+0x84>)
 80076a6:	681e      	ldr	r6, [r3, #0]
 80076a8:	69b3      	ldr	r3, [r6, #24]
 80076aa:	b913      	cbnz	r3, 80076b2 <__sfp+0x16>
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff ffbd 	bl	800762c <__sinit>
 80076b2:	3648      	adds	r6, #72	; 0x48
 80076b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	d503      	bpl.n	80076c4 <__sfp+0x28>
 80076bc:	6833      	ldr	r3, [r6, #0]
 80076be:	b30b      	cbz	r3, 8007704 <__sfp+0x68>
 80076c0:	6836      	ldr	r6, [r6, #0]
 80076c2:	e7f7      	b.n	80076b4 <__sfp+0x18>
 80076c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076c8:	b9d5      	cbnz	r5, 8007700 <__sfp+0x64>
 80076ca:	4b16      	ldr	r3, [pc, #88]	; (8007724 <__sfp+0x88>)
 80076cc:	60e3      	str	r3, [r4, #12]
 80076ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076d2:	6665      	str	r5, [r4, #100]	; 0x64
 80076d4:	f000 f847 	bl	8007766 <__retarget_lock_init_recursive>
 80076d8:	f7ff ff96 	bl	8007608 <__sfp_lock_release>
 80076dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076e4:	6025      	str	r5, [r4, #0]
 80076e6:	61a5      	str	r5, [r4, #24]
 80076e8:	2208      	movs	r2, #8
 80076ea:	4629      	mov	r1, r5
 80076ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076f0:	f7fd fa9a 	bl	8004c28 <memset>
 80076f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076fc:	4620      	mov	r0, r4
 80076fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007700:	3468      	adds	r4, #104	; 0x68
 8007702:	e7d9      	b.n	80076b8 <__sfp+0x1c>
 8007704:	2104      	movs	r1, #4
 8007706:	4638      	mov	r0, r7
 8007708:	f7ff ff62 	bl	80075d0 <__sfmoreglue>
 800770c:	4604      	mov	r4, r0
 800770e:	6030      	str	r0, [r6, #0]
 8007710:	2800      	cmp	r0, #0
 8007712:	d1d5      	bne.n	80076c0 <__sfp+0x24>
 8007714:	f7ff ff78 	bl	8007608 <__sfp_lock_release>
 8007718:	230c      	movs	r3, #12
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	e7ee      	b.n	80076fc <__sfp+0x60>
 800771e:	bf00      	nop
 8007720:	080089e8 	.word	0x080089e8
 8007724:	ffff0001 	.word	0xffff0001

08007728 <_fwalk_reent>:
 8007728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800772c:	4606      	mov	r6, r0
 800772e:	4688      	mov	r8, r1
 8007730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007734:	2700      	movs	r7, #0
 8007736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800773a:	f1b9 0901 	subs.w	r9, r9, #1
 800773e:	d505      	bpl.n	800774c <_fwalk_reent+0x24>
 8007740:	6824      	ldr	r4, [r4, #0]
 8007742:	2c00      	cmp	r4, #0
 8007744:	d1f7      	bne.n	8007736 <_fwalk_reent+0xe>
 8007746:	4638      	mov	r0, r7
 8007748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800774c:	89ab      	ldrh	r3, [r5, #12]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d907      	bls.n	8007762 <_fwalk_reent+0x3a>
 8007752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007756:	3301      	adds	r3, #1
 8007758:	d003      	beq.n	8007762 <_fwalk_reent+0x3a>
 800775a:	4629      	mov	r1, r5
 800775c:	4630      	mov	r0, r6
 800775e:	47c0      	blx	r8
 8007760:	4307      	orrs	r7, r0
 8007762:	3568      	adds	r5, #104	; 0x68
 8007764:	e7e9      	b.n	800773a <_fwalk_reent+0x12>

08007766 <__retarget_lock_init_recursive>:
 8007766:	4770      	bx	lr

08007768 <__retarget_lock_acquire_recursive>:
 8007768:	4770      	bx	lr

0800776a <__retarget_lock_release_recursive>:
 800776a:	4770      	bx	lr

0800776c <__swhatbuf_r>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	460e      	mov	r6, r1
 8007770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007774:	2900      	cmp	r1, #0
 8007776:	b096      	sub	sp, #88	; 0x58
 8007778:	4614      	mov	r4, r2
 800777a:	461d      	mov	r5, r3
 800777c:	da08      	bge.n	8007790 <__swhatbuf_r+0x24>
 800777e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	602a      	str	r2, [r5, #0]
 8007786:	061a      	lsls	r2, r3, #24
 8007788:	d410      	bmi.n	80077ac <__swhatbuf_r+0x40>
 800778a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800778e:	e00e      	b.n	80077ae <__swhatbuf_r+0x42>
 8007790:	466a      	mov	r2, sp
 8007792:	f000 f903 	bl	800799c <_fstat_r>
 8007796:	2800      	cmp	r0, #0
 8007798:	dbf1      	blt.n	800777e <__swhatbuf_r+0x12>
 800779a:	9a01      	ldr	r2, [sp, #4]
 800779c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077a4:	425a      	negs	r2, r3
 80077a6:	415a      	adcs	r2, r3
 80077a8:	602a      	str	r2, [r5, #0]
 80077aa:	e7ee      	b.n	800778a <__swhatbuf_r+0x1e>
 80077ac:	2340      	movs	r3, #64	; 0x40
 80077ae:	2000      	movs	r0, #0
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	b016      	add	sp, #88	; 0x58
 80077b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080077b8 <__smakebuf_r>:
 80077b8:	898b      	ldrh	r3, [r1, #12]
 80077ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077bc:	079d      	lsls	r5, r3, #30
 80077be:	4606      	mov	r6, r0
 80077c0:	460c      	mov	r4, r1
 80077c2:	d507      	bpl.n	80077d4 <__smakebuf_r+0x1c>
 80077c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	6123      	str	r3, [r4, #16]
 80077cc:	2301      	movs	r3, #1
 80077ce:	6163      	str	r3, [r4, #20]
 80077d0:	b002      	add	sp, #8
 80077d2:	bd70      	pop	{r4, r5, r6, pc}
 80077d4:	ab01      	add	r3, sp, #4
 80077d6:	466a      	mov	r2, sp
 80077d8:	f7ff ffc8 	bl	800776c <__swhatbuf_r>
 80077dc:	9900      	ldr	r1, [sp, #0]
 80077de:	4605      	mov	r5, r0
 80077e0:	4630      	mov	r0, r6
 80077e2:	f7ff f963 	bl	8006aac <_malloc_r>
 80077e6:	b948      	cbnz	r0, 80077fc <__smakebuf_r+0x44>
 80077e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ec:	059a      	lsls	r2, r3, #22
 80077ee:	d4ef      	bmi.n	80077d0 <__smakebuf_r+0x18>
 80077f0:	f023 0303 	bic.w	r3, r3, #3
 80077f4:	f043 0302 	orr.w	r3, r3, #2
 80077f8:	81a3      	strh	r3, [r4, #12]
 80077fa:	e7e3      	b.n	80077c4 <__smakebuf_r+0xc>
 80077fc:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <__smakebuf_r+0x7c>)
 80077fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	6020      	str	r0, [r4, #0]
 8007804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	9b00      	ldr	r3, [sp, #0]
 800780c:	6163      	str	r3, [r4, #20]
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	6120      	str	r0, [r4, #16]
 8007812:	b15b      	cbz	r3, 800782c <__smakebuf_r+0x74>
 8007814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007818:	4630      	mov	r0, r6
 800781a:	f000 f8d1 	bl	80079c0 <_isatty_r>
 800781e:	b128      	cbz	r0, 800782c <__smakebuf_r+0x74>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	f023 0303 	bic.w	r3, r3, #3
 8007826:	f043 0301 	orr.w	r3, r3, #1
 800782a:	81a3      	strh	r3, [r4, #12]
 800782c:	89a0      	ldrh	r0, [r4, #12]
 800782e:	4305      	orrs	r5, r0
 8007830:	81a5      	strh	r5, [r4, #12]
 8007832:	e7cd      	b.n	80077d0 <__smakebuf_r+0x18>
 8007834:	080075c5 	.word	0x080075c5

08007838 <_malloc_usable_size_r>:
 8007838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800783c:	1f18      	subs	r0, r3, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfbc      	itt	lt
 8007842:	580b      	ldrlt	r3, [r1, r0]
 8007844:	18c0      	addlt	r0, r0, r3
 8007846:	4770      	bx	lr

08007848 <_raise_r>:
 8007848:	291f      	cmp	r1, #31
 800784a:	b538      	push	{r3, r4, r5, lr}
 800784c:	4604      	mov	r4, r0
 800784e:	460d      	mov	r5, r1
 8007850:	d904      	bls.n	800785c <_raise_r+0x14>
 8007852:	2316      	movs	r3, #22
 8007854:	6003      	str	r3, [r0, #0]
 8007856:	f04f 30ff 	mov.w	r0, #4294967295
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800785e:	b112      	cbz	r2, 8007866 <_raise_r+0x1e>
 8007860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007864:	b94b      	cbnz	r3, 800787a <_raise_r+0x32>
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f830 	bl	80078cc <_getpid_r>
 800786c:	462a      	mov	r2, r5
 800786e:	4601      	mov	r1, r0
 8007870:	4620      	mov	r0, r4
 8007872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007876:	f000 b817 	b.w	80078a8 <_kill_r>
 800787a:	2b01      	cmp	r3, #1
 800787c:	d00a      	beq.n	8007894 <_raise_r+0x4c>
 800787e:	1c59      	adds	r1, r3, #1
 8007880:	d103      	bne.n	800788a <_raise_r+0x42>
 8007882:	2316      	movs	r3, #22
 8007884:	6003      	str	r3, [r0, #0]
 8007886:	2001      	movs	r0, #1
 8007888:	e7e7      	b.n	800785a <_raise_r+0x12>
 800788a:	2400      	movs	r4, #0
 800788c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007890:	4628      	mov	r0, r5
 8007892:	4798      	blx	r3
 8007894:	2000      	movs	r0, #0
 8007896:	e7e0      	b.n	800785a <_raise_r+0x12>

08007898 <raise>:
 8007898:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <raise+0xc>)
 800789a:	4601      	mov	r1, r0
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	f7ff bfd3 	b.w	8007848 <_raise_r>
 80078a2:	bf00      	nop
 80078a4:	20000014 	.word	0x20000014

080078a8 <_kill_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d07      	ldr	r5, [pc, #28]	; (80078c8 <_kill_r+0x20>)
 80078ac:	2300      	movs	r3, #0
 80078ae:	4604      	mov	r4, r0
 80078b0:	4608      	mov	r0, r1
 80078b2:	4611      	mov	r1, r2
 80078b4:	602b      	str	r3, [r5, #0]
 80078b6:	f7fa f907 	bl	8001ac8 <_kill>
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	d102      	bne.n	80078c4 <_kill_r+0x1c>
 80078be:	682b      	ldr	r3, [r5, #0]
 80078c0:	b103      	cbz	r3, 80078c4 <_kill_r+0x1c>
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
 80078c6:	bf00      	nop
 80078c8:	200005a0 	.word	0x200005a0

080078cc <_getpid_r>:
 80078cc:	f7fa b8f4 	b.w	8001ab8 <_getpid>

080078d0 <__sread>:
 80078d0:	b510      	push	{r4, lr}
 80078d2:	460c      	mov	r4, r1
 80078d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d8:	f000 f894 	bl	8007a04 <_read_r>
 80078dc:	2800      	cmp	r0, #0
 80078de:	bfab      	itete	ge
 80078e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078e2:	89a3      	ldrhlt	r3, [r4, #12]
 80078e4:	181b      	addge	r3, r3, r0
 80078e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078ea:	bfac      	ite	ge
 80078ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80078ee:	81a3      	strhlt	r3, [r4, #12]
 80078f0:	bd10      	pop	{r4, pc}

080078f2 <__swrite>:
 80078f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f6:	461f      	mov	r7, r3
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	05db      	lsls	r3, r3, #23
 80078fc:	4605      	mov	r5, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	4616      	mov	r6, r2
 8007902:	d505      	bpl.n	8007910 <__swrite+0x1e>
 8007904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007908:	2302      	movs	r3, #2
 800790a:	2200      	movs	r2, #0
 800790c:	f000 f868 	bl	80079e0 <_lseek_r>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	4632      	mov	r2, r6
 800791e:	463b      	mov	r3, r7
 8007920:	4628      	mov	r0, r5
 8007922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	f000 b817 	b.w	8007958 <_write_r>

0800792a <__sseek>:
 800792a:	b510      	push	{r4, lr}
 800792c:	460c      	mov	r4, r1
 800792e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007932:	f000 f855 	bl	80079e0 <_lseek_r>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	bf15      	itete	ne
 800793c:	6560      	strne	r0, [r4, #84]	; 0x54
 800793e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007946:	81a3      	strheq	r3, [r4, #12]
 8007948:	bf18      	it	ne
 800794a:	81a3      	strhne	r3, [r4, #12]
 800794c:	bd10      	pop	{r4, pc}

0800794e <__sclose>:
 800794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007952:	f000 b813 	b.w	800797c <_close_r>
	...

08007958 <_write_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	; (8007978 <_write_r+0x20>)
 800795c:	4604      	mov	r4, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	2200      	movs	r2, #0
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f7fa f8e5 	bl	8001b36 <_write>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_write_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_write_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	200005a0 	.word	0x200005a0

0800797c <_close_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d06      	ldr	r5, [pc, #24]	; (8007998 <_close_r+0x1c>)
 8007980:	2300      	movs	r3, #0
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7fa f8f1 	bl	8001b6e <_close>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_close_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_close_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200005a0 	.word	0x200005a0

0800799c <_fstat_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4d07      	ldr	r5, [pc, #28]	; (80079bc <_fstat_r+0x20>)
 80079a0:	2300      	movs	r3, #0
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	4611      	mov	r1, r2
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	f7fa f8ec 	bl	8001b86 <_fstat>
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	d102      	bne.n	80079b8 <_fstat_r+0x1c>
 80079b2:	682b      	ldr	r3, [r5, #0]
 80079b4:	b103      	cbz	r3, 80079b8 <_fstat_r+0x1c>
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	bd38      	pop	{r3, r4, r5, pc}
 80079ba:	bf00      	nop
 80079bc:	200005a0 	.word	0x200005a0

080079c0 <_isatty_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d06      	ldr	r5, [pc, #24]	; (80079dc <_isatty_r+0x1c>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	602b      	str	r3, [r5, #0]
 80079cc:	f7fa f8eb 	bl	8001ba6 <_isatty>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_isatty_r+0x1a>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_isatty_r+0x1a>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	200005a0 	.word	0x200005a0

080079e0 <_lseek_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d07      	ldr	r5, [pc, #28]	; (8007a00 <_lseek_r+0x20>)
 80079e4:	4604      	mov	r4, r0
 80079e6:	4608      	mov	r0, r1
 80079e8:	4611      	mov	r1, r2
 80079ea:	2200      	movs	r2, #0
 80079ec:	602a      	str	r2, [r5, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f7fa f8e4 	bl	8001bbc <_lseek>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_lseek_r+0x1e>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_lseek_r+0x1e>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	200005a0 	.word	0x200005a0

08007a04 <_read_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d07      	ldr	r5, [pc, #28]	; (8007a24 <_read_r+0x20>)
 8007a08:	4604      	mov	r4, r0
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	602a      	str	r2, [r5, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f7fa f872 	bl	8001afc <_read>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_read_r+0x1e>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_read_r+0x1e>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	200005a0 	.word	0x200005a0

08007a28 <pow>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	ed2d 8b02 	vpush	{d8}
 8007a2e:	eeb0 8a40 	vmov.f32	s16, s0
 8007a32:	eef0 8a60 	vmov.f32	s17, s1
 8007a36:	ec55 4b11 	vmov	r4, r5, d1
 8007a3a:	f000 f891 	bl	8007b60 <__ieee754_pow>
 8007a3e:	4622      	mov	r2, r4
 8007a40:	462b      	mov	r3, r5
 8007a42:	4620      	mov	r0, r4
 8007a44:	4629      	mov	r1, r5
 8007a46:	ec57 6b10 	vmov	r6, r7, d0
 8007a4a:	f7f9 f877 	bl	8000b3c <__aeabi_dcmpun>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d13b      	bne.n	8007aca <pow+0xa2>
 8007a52:	ec51 0b18 	vmov	r0, r1, d8
 8007a56:	2200      	movs	r2, #0
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f7f9 f83d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a5e:	b1b8      	cbz	r0, 8007a90 <pow+0x68>
 8007a60:	2200      	movs	r2, #0
 8007a62:	2300      	movs	r3, #0
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f9 f836 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d146      	bne.n	8007afe <pow+0xd6>
 8007a70:	ec45 4b10 	vmov	d0, r4, r5
 8007a74:	f000 fe8d 	bl	8008792 <finite>
 8007a78:	b338      	cbz	r0, 8007aca <pow+0xa2>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4620      	mov	r0, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7f9 f833 	bl	8000aec <__aeabi_dcmplt>
 8007a86:	b300      	cbz	r0, 8007aca <pow+0xa2>
 8007a88:	f7fd f8a4 	bl	8004bd4 <__errno>
 8007a8c:	2322      	movs	r3, #34	; 0x22
 8007a8e:	e01b      	b.n	8007ac8 <pow+0xa0>
 8007a90:	ec47 6b10 	vmov	d0, r6, r7
 8007a94:	f000 fe7d 	bl	8008792 <finite>
 8007a98:	b9e0      	cbnz	r0, 8007ad4 <pow+0xac>
 8007a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8007a9e:	eef0 0a68 	vmov.f32	s1, s17
 8007aa2:	f000 fe76 	bl	8008792 <finite>
 8007aa6:	b1a8      	cbz	r0, 8007ad4 <pow+0xac>
 8007aa8:	ec45 4b10 	vmov	d0, r4, r5
 8007aac:	f000 fe71 	bl	8008792 <finite>
 8007ab0:	b180      	cbz	r0, 8007ad4 <pow+0xac>
 8007ab2:	4632      	mov	r2, r6
 8007ab4:	463b      	mov	r3, r7
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	f7f9 f83f 	bl	8000b3c <__aeabi_dcmpun>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d0e2      	beq.n	8007a88 <pow+0x60>
 8007ac2:	f7fd f887 	bl	8004bd4 <__errno>
 8007ac6:	2321      	movs	r3, #33	; 0x21
 8007ac8:	6003      	str	r3, [r0, #0]
 8007aca:	ecbd 8b02 	vpop	{d8}
 8007ace:	ec47 6b10 	vmov	d0, r6, r7
 8007ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f8 fffc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d0f2      	beq.n	8007aca <pow+0xa2>
 8007ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ae8:	eef0 0a68 	vmov.f32	s1, s17
 8007aec:	f000 fe51 	bl	8008792 <finite>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0ea      	beq.n	8007aca <pow+0xa2>
 8007af4:	ec45 4b10 	vmov	d0, r4, r5
 8007af8:	f000 fe4b 	bl	8008792 <finite>
 8007afc:	e7c3      	b.n	8007a86 <pow+0x5e>
 8007afe:	4f01      	ldr	r7, [pc, #4]	; (8007b04 <pow+0xdc>)
 8007b00:	2600      	movs	r6, #0
 8007b02:	e7e2      	b.n	8007aca <pow+0xa2>
 8007b04:	3ff00000 	.word	0x3ff00000

08007b08 <sqrt>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	ed2d 8b02 	vpush	{d8}
 8007b0e:	ec55 4b10 	vmov	r4, r5, d0
 8007b12:	f000 fd53 	bl	80085bc <__ieee754_sqrt>
 8007b16:	4622      	mov	r2, r4
 8007b18:	462b      	mov	r3, r5
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	eeb0 8a40 	vmov.f32	s16, s0
 8007b22:	eef0 8a60 	vmov.f32	s17, s1
 8007b26:	f7f9 f809 	bl	8000b3c <__aeabi_dcmpun>
 8007b2a:	b990      	cbnz	r0, 8007b52 <sqrt+0x4a>
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2300      	movs	r3, #0
 8007b30:	4620      	mov	r0, r4
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7f8 ffda 	bl	8000aec <__aeabi_dcmplt>
 8007b38:	b158      	cbz	r0, 8007b52 <sqrt+0x4a>
 8007b3a:	f7fd f84b 	bl	8004bd4 <__errno>
 8007b3e:	2321      	movs	r3, #33	; 0x21
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	4610      	mov	r0, r2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f7f8 fe87 	bl	800085c <__aeabi_ddiv>
 8007b4e:	ec41 0b18 	vmov	d8, r0, r1
 8007b52:	eeb0 0a48 	vmov.f32	s0, s16
 8007b56:	eef0 0a68 	vmov.f32	s1, s17
 8007b5a:	ecbd 8b02 	vpop	{d8}
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}

08007b60 <__ieee754_pow>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	ed2d 8b06 	vpush	{d8-d10}
 8007b68:	b089      	sub	sp, #36	; 0x24
 8007b6a:	ed8d 1b00 	vstr	d1, [sp]
 8007b6e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007b72:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007b76:	ea58 0102 	orrs.w	r1, r8, r2
 8007b7a:	ec57 6b10 	vmov	r6, r7, d0
 8007b7e:	d115      	bne.n	8007bac <__ieee754_pow+0x4c>
 8007b80:	19b3      	adds	r3, r6, r6
 8007b82:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007b86:	4152      	adcs	r2, r2
 8007b88:	4299      	cmp	r1, r3
 8007b8a:	4b89      	ldr	r3, [pc, #548]	; (8007db0 <__ieee754_pow+0x250>)
 8007b8c:	4193      	sbcs	r3, r2
 8007b8e:	f080 84d2 	bcs.w	8008536 <__ieee754_pow+0x9d6>
 8007b92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b96:	4630      	mov	r0, r6
 8007b98:	4639      	mov	r1, r7
 8007b9a:	f7f8 fb7f 	bl	800029c <__adddf3>
 8007b9e:	ec41 0b10 	vmov	d0, r0, r1
 8007ba2:	b009      	add	sp, #36	; 0x24
 8007ba4:	ecbd 8b06 	vpop	{d8-d10}
 8007ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bac:	4b81      	ldr	r3, [pc, #516]	; (8007db4 <__ieee754_pow+0x254>)
 8007bae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007bb2:	429c      	cmp	r4, r3
 8007bb4:	ee10 aa10 	vmov	sl, s0
 8007bb8:	463d      	mov	r5, r7
 8007bba:	dc06      	bgt.n	8007bca <__ieee754_pow+0x6a>
 8007bbc:	d101      	bne.n	8007bc2 <__ieee754_pow+0x62>
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	d1e7      	bne.n	8007b92 <__ieee754_pow+0x32>
 8007bc2:	4598      	cmp	r8, r3
 8007bc4:	dc01      	bgt.n	8007bca <__ieee754_pow+0x6a>
 8007bc6:	d10f      	bne.n	8007be8 <__ieee754_pow+0x88>
 8007bc8:	b172      	cbz	r2, 8007be8 <__ieee754_pow+0x88>
 8007bca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007bce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007bd2:	ea55 050a 	orrs.w	r5, r5, sl
 8007bd6:	d1dc      	bne.n	8007b92 <__ieee754_pow+0x32>
 8007bd8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007bdc:	18db      	adds	r3, r3, r3
 8007bde:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007be2:	4152      	adcs	r2, r2
 8007be4:	429d      	cmp	r5, r3
 8007be6:	e7d0      	b.n	8007b8a <__ieee754_pow+0x2a>
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	da3b      	bge.n	8007c64 <__ieee754_pow+0x104>
 8007bec:	4b72      	ldr	r3, [pc, #456]	; (8007db8 <__ieee754_pow+0x258>)
 8007bee:	4598      	cmp	r8, r3
 8007bf0:	dc51      	bgt.n	8007c96 <__ieee754_pow+0x136>
 8007bf2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007bf6:	4598      	cmp	r8, r3
 8007bf8:	f340 84ac 	ble.w	8008554 <__ieee754_pow+0x9f4>
 8007bfc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007c00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c04:	2b14      	cmp	r3, #20
 8007c06:	dd0f      	ble.n	8007c28 <__ieee754_pow+0xc8>
 8007c08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007c0c:	fa22 f103 	lsr.w	r1, r2, r3
 8007c10:	fa01 f303 	lsl.w	r3, r1, r3
 8007c14:	4293      	cmp	r3, r2
 8007c16:	f040 849d 	bne.w	8008554 <__ieee754_pow+0x9f4>
 8007c1a:	f001 0101 	and.w	r1, r1, #1
 8007c1e:	f1c1 0302 	rsb	r3, r1, #2
 8007c22:	9304      	str	r3, [sp, #16]
 8007c24:	b182      	cbz	r2, 8007c48 <__ieee754_pow+0xe8>
 8007c26:	e05f      	b.n	8007ce8 <__ieee754_pow+0x188>
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	d15b      	bne.n	8007ce4 <__ieee754_pow+0x184>
 8007c2c:	f1c3 0314 	rsb	r3, r3, #20
 8007c30:	fa48 f103 	asr.w	r1, r8, r3
 8007c34:	fa01 f303 	lsl.w	r3, r1, r3
 8007c38:	4543      	cmp	r3, r8
 8007c3a:	f040 8488 	bne.w	800854e <__ieee754_pow+0x9ee>
 8007c3e:	f001 0101 	and.w	r1, r1, #1
 8007c42:	f1c1 0302 	rsb	r3, r1, #2
 8007c46:	9304      	str	r3, [sp, #16]
 8007c48:	4b5c      	ldr	r3, [pc, #368]	; (8007dbc <__ieee754_pow+0x25c>)
 8007c4a:	4598      	cmp	r8, r3
 8007c4c:	d132      	bne.n	8007cb4 <__ieee754_pow+0x154>
 8007c4e:	f1b9 0f00 	cmp.w	r9, #0
 8007c52:	f280 8478 	bge.w	8008546 <__ieee754_pow+0x9e6>
 8007c56:	4959      	ldr	r1, [pc, #356]	; (8007dbc <__ieee754_pow+0x25c>)
 8007c58:	4632      	mov	r2, r6
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	f7f8 fdfd 	bl	800085c <__aeabi_ddiv>
 8007c62:	e79c      	b.n	8007b9e <__ieee754_pow+0x3e>
 8007c64:	2300      	movs	r3, #0
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d13d      	bne.n	8007ce8 <__ieee754_pow+0x188>
 8007c6c:	4b51      	ldr	r3, [pc, #324]	; (8007db4 <__ieee754_pow+0x254>)
 8007c6e:	4598      	cmp	r8, r3
 8007c70:	d1ea      	bne.n	8007c48 <__ieee754_pow+0xe8>
 8007c72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007c76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007c7a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c7e:	f000 845a 	beq.w	8008536 <__ieee754_pow+0x9d6>
 8007c82:	4b4f      	ldr	r3, [pc, #316]	; (8007dc0 <__ieee754_pow+0x260>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	dd08      	ble.n	8007c9a <__ieee754_pow+0x13a>
 8007c88:	f1b9 0f00 	cmp.w	r9, #0
 8007c8c:	f2c0 8457 	blt.w	800853e <__ieee754_pow+0x9de>
 8007c90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c94:	e783      	b.n	8007b9e <__ieee754_pow+0x3e>
 8007c96:	2302      	movs	r3, #2
 8007c98:	e7e5      	b.n	8007c66 <__ieee754_pow+0x106>
 8007c9a:	f1b9 0f00 	cmp.w	r9, #0
 8007c9e:	f04f 0000 	mov.w	r0, #0
 8007ca2:	f04f 0100 	mov.w	r1, #0
 8007ca6:	f6bf af7a 	bge.w	8007b9e <__ieee754_pow+0x3e>
 8007caa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007cae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007cb2:	e774      	b.n	8007b9e <__ieee754_pow+0x3e>
 8007cb4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007cb8:	d106      	bne.n	8007cc8 <__ieee754_pow+0x168>
 8007cba:	4632      	mov	r2, r6
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	f7f8 fca1 	bl	8000608 <__aeabi_dmul>
 8007cc6:	e76a      	b.n	8007b9e <__ieee754_pow+0x3e>
 8007cc8:	4b3e      	ldr	r3, [pc, #248]	; (8007dc4 <__ieee754_pow+0x264>)
 8007cca:	4599      	cmp	r9, r3
 8007ccc:	d10c      	bne.n	8007ce8 <__ieee754_pow+0x188>
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	db0a      	blt.n	8007ce8 <__ieee754_pow+0x188>
 8007cd2:	ec47 6b10 	vmov	d0, r6, r7
 8007cd6:	b009      	add	sp, #36	; 0x24
 8007cd8:	ecbd 8b06 	vpop	{d8-d10}
 8007cdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	f000 bc6c 	b.w	80085bc <__ieee754_sqrt>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9304      	str	r3, [sp, #16]
 8007ce8:	ec47 6b10 	vmov	d0, r6, r7
 8007cec:	f000 fd48 	bl	8008780 <fabs>
 8007cf0:	ec51 0b10 	vmov	r0, r1, d0
 8007cf4:	f1ba 0f00 	cmp.w	sl, #0
 8007cf8:	d129      	bne.n	8007d4e <__ieee754_pow+0x1ee>
 8007cfa:	b124      	cbz	r4, 8007d06 <__ieee754_pow+0x1a6>
 8007cfc:	4b2f      	ldr	r3, [pc, #188]	; (8007dbc <__ieee754_pow+0x25c>)
 8007cfe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d123      	bne.n	8007d4e <__ieee754_pow+0x1ee>
 8007d06:	f1b9 0f00 	cmp.w	r9, #0
 8007d0a:	da05      	bge.n	8007d18 <__ieee754_pow+0x1b8>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	2000      	movs	r0, #0
 8007d12:	492a      	ldr	r1, [pc, #168]	; (8007dbc <__ieee754_pow+0x25c>)
 8007d14:	f7f8 fda2 	bl	800085c <__aeabi_ddiv>
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	f6bf af40 	bge.w	8007b9e <__ieee754_pow+0x3e>
 8007d1e:	9b04      	ldr	r3, [sp, #16]
 8007d20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007d24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007d28:	4323      	orrs	r3, r4
 8007d2a:	d108      	bne.n	8007d3e <__ieee754_pow+0x1de>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	f7f8 fab0 	bl	8000298 <__aeabi_dsub>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	e78f      	b.n	8007c5e <__ieee754_pow+0xfe>
 8007d3e:	9b04      	ldr	r3, [sp, #16]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	f47f af2c 	bne.w	8007b9e <__ieee754_pow+0x3e>
 8007d46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	e727      	b.n	8007b9e <__ieee754_pow+0x3e>
 8007d4e:	0feb      	lsrs	r3, r5, #31
 8007d50:	3b01      	subs	r3, #1
 8007d52:	9306      	str	r3, [sp, #24]
 8007d54:	9a06      	ldr	r2, [sp, #24]
 8007d56:	9b04      	ldr	r3, [sp, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	d102      	bne.n	8007d62 <__ieee754_pow+0x202>
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	463b      	mov	r3, r7
 8007d60:	e7e6      	b.n	8007d30 <__ieee754_pow+0x1d0>
 8007d62:	4b19      	ldr	r3, [pc, #100]	; (8007dc8 <__ieee754_pow+0x268>)
 8007d64:	4598      	cmp	r8, r3
 8007d66:	f340 80fb 	ble.w	8007f60 <__ieee754_pow+0x400>
 8007d6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007d6e:	4598      	cmp	r8, r3
 8007d70:	4b13      	ldr	r3, [pc, #76]	; (8007dc0 <__ieee754_pow+0x260>)
 8007d72:	dd0c      	ble.n	8007d8e <__ieee754_pow+0x22e>
 8007d74:	429c      	cmp	r4, r3
 8007d76:	dc0f      	bgt.n	8007d98 <__ieee754_pow+0x238>
 8007d78:	f1b9 0f00 	cmp.w	r9, #0
 8007d7c:	da0f      	bge.n	8007d9e <__ieee754_pow+0x23e>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	b009      	add	sp, #36	; 0x24
 8007d82:	ecbd 8b06 	vpop	{d8-d10}
 8007d86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	f000 bcf0 	b.w	800876e <__math_oflow>
 8007d8e:	429c      	cmp	r4, r3
 8007d90:	dbf2      	blt.n	8007d78 <__ieee754_pow+0x218>
 8007d92:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <__ieee754_pow+0x25c>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	dd19      	ble.n	8007dcc <__ieee754_pow+0x26c>
 8007d98:	f1b9 0f00 	cmp.w	r9, #0
 8007d9c:	dcef      	bgt.n	8007d7e <__ieee754_pow+0x21e>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	b009      	add	sp, #36	; 0x24
 8007da2:	ecbd 8b06 	vpop	{d8-d10}
 8007da6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	f000 bcd7 	b.w	800875c <__math_uflow>
 8007dae:	bf00      	nop
 8007db0:	fff00000 	.word	0xfff00000
 8007db4:	7ff00000 	.word	0x7ff00000
 8007db8:	433fffff 	.word	0x433fffff
 8007dbc:	3ff00000 	.word	0x3ff00000
 8007dc0:	3fefffff 	.word	0x3fefffff
 8007dc4:	3fe00000 	.word	0x3fe00000
 8007dc8:	41e00000 	.word	0x41e00000
 8007dcc:	4b60      	ldr	r3, [pc, #384]	; (8007f50 <__ieee754_pow+0x3f0>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f7f8 fa62 	bl	8000298 <__aeabi_dsub>
 8007dd4:	a354      	add	r3, pc, #336	; (adr r3, 8007f28 <__ieee754_pow+0x3c8>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	4604      	mov	r4, r0
 8007ddc:	460d      	mov	r5, r1
 8007dde:	f7f8 fc13 	bl	8000608 <__aeabi_dmul>
 8007de2:	a353      	add	r3, pc, #332	; (adr r3, 8007f30 <__ieee754_pow+0x3d0>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	4606      	mov	r6, r0
 8007dea:	460f      	mov	r7, r1
 8007dec:	4620      	mov	r0, r4
 8007dee:	4629      	mov	r1, r5
 8007df0:	f7f8 fc0a 	bl	8000608 <__aeabi_dmul>
 8007df4:	4b57      	ldr	r3, [pc, #348]	; (8007f54 <__ieee754_pow+0x3f4>)
 8007df6:	4682      	mov	sl, r0
 8007df8:	468b      	mov	fp, r1
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7f8 fc02 	bl	8000608 <__aeabi_dmul>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	a14b      	add	r1, pc, #300	; (adr r1, 8007f38 <__ieee754_pow+0x3d8>)
 8007e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e0e:	f7f8 fa43 	bl	8000298 <__aeabi_dsub>
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	f7f8 fbf7 	bl	8000608 <__aeabi_dmul>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	2000      	movs	r0, #0
 8007e20:	494d      	ldr	r1, [pc, #308]	; (8007f58 <__ieee754_pow+0x3f8>)
 8007e22:	f7f8 fa39 	bl	8000298 <__aeabi_dsub>
 8007e26:	4622      	mov	r2, r4
 8007e28:	4680      	mov	r8, r0
 8007e2a:	4689      	mov	r9, r1
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 fbe9 	bl	8000608 <__aeabi_dmul>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	f7f8 fbe3 	bl	8000608 <__aeabi_dmul>
 8007e42:	a33f      	add	r3, pc, #252	; (adr r3, 8007f40 <__ieee754_pow+0x3e0>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fbde 	bl	8000608 <__aeabi_dmul>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4650      	mov	r0, sl
 8007e52:	4659      	mov	r1, fp
 8007e54:	f7f8 fa20 	bl	8000298 <__aeabi_dsub>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	4689      	mov	r9, r1
 8007e60:	4630      	mov	r0, r6
 8007e62:	4639      	mov	r1, r7
 8007e64:	f7f8 fa1a 	bl	800029c <__adddf3>
 8007e68:	2000      	movs	r0, #0
 8007e6a:	4632      	mov	r2, r6
 8007e6c:	463b      	mov	r3, r7
 8007e6e:	4604      	mov	r4, r0
 8007e70:	460d      	mov	r5, r1
 8007e72:	f7f8 fa11 	bl	8000298 <__aeabi_dsub>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	f7f8 fa0b 	bl	8000298 <__aeabi_dsub>
 8007e82:	9b04      	ldr	r3, [sp, #16]
 8007e84:	9a06      	ldr	r2, [sp, #24]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	4682      	mov	sl, r0
 8007e8c:	468b      	mov	fp, r1
 8007e8e:	f040 81e7 	bne.w	8008260 <__ieee754_pow+0x700>
 8007e92:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007f48 <__ieee754_pow+0x3e8>
 8007e96:	eeb0 8a47 	vmov.f32	s16, s14
 8007e9a:	eef0 8a67 	vmov.f32	s17, s15
 8007e9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ea2:	2600      	movs	r6, #0
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007eac:	f7f8 f9f4 	bl	8000298 <__aeabi_dsub>
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	f7f8 fba8 	bl	8000608 <__aeabi_dmul>
 8007eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	4689      	mov	r9, r1
 8007ec0:	4650      	mov	r0, sl
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	f7f8 fba0 	bl	8000608 <__aeabi_dmul>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	f7f8 f9e4 	bl	800029c <__adddf3>
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	4680      	mov	r8, r0
 8007eda:	4689      	mov	r9, r1
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 fb92 	bl	8000608 <__aeabi_dmul>
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	460d      	mov	r5, r1
 8007eea:	4602      	mov	r2, r0
 8007eec:	4649      	mov	r1, r9
 8007eee:	4640      	mov	r0, r8
 8007ef0:	f7f8 f9d4 	bl	800029c <__adddf3>
 8007ef4:	4b19      	ldr	r3, [pc, #100]	; (8007f5c <__ieee754_pow+0x3fc>)
 8007ef6:	4299      	cmp	r1, r3
 8007ef8:	ec45 4b19 	vmov	d9, r4, r5
 8007efc:	4606      	mov	r6, r0
 8007efe:	460f      	mov	r7, r1
 8007f00:	468b      	mov	fp, r1
 8007f02:	f340 82f1 	ble.w	80084e8 <__ieee754_pow+0x988>
 8007f06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007f0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007f0e:	4303      	orrs	r3, r0
 8007f10:	f000 81e4 	beq.w	80082dc <__ieee754_pow+0x77c>
 8007f14:	ec51 0b18 	vmov	r0, r1, d8
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f7f8 fde6 	bl	8000aec <__aeabi_dcmplt>
 8007f20:	3800      	subs	r0, #0
 8007f22:	bf18      	it	ne
 8007f24:	2001      	movne	r0, #1
 8007f26:	e72b      	b.n	8007d80 <__ieee754_pow+0x220>
 8007f28:	60000000 	.word	0x60000000
 8007f2c:	3ff71547 	.word	0x3ff71547
 8007f30:	f85ddf44 	.word	0xf85ddf44
 8007f34:	3e54ae0b 	.word	0x3e54ae0b
 8007f38:	55555555 	.word	0x55555555
 8007f3c:	3fd55555 	.word	0x3fd55555
 8007f40:	652b82fe 	.word	0x652b82fe
 8007f44:	3ff71547 	.word	0x3ff71547
 8007f48:	00000000 	.word	0x00000000
 8007f4c:	bff00000 	.word	0xbff00000
 8007f50:	3ff00000 	.word	0x3ff00000
 8007f54:	3fd00000 	.word	0x3fd00000
 8007f58:	3fe00000 	.word	0x3fe00000
 8007f5c:	408fffff 	.word	0x408fffff
 8007f60:	4bd5      	ldr	r3, [pc, #852]	; (80082b8 <__ieee754_pow+0x758>)
 8007f62:	402b      	ands	r3, r5
 8007f64:	2200      	movs	r2, #0
 8007f66:	b92b      	cbnz	r3, 8007f74 <__ieee754_pow+0x414>
 8007f68:	4bd4      	ldr	r3, [pc, #848]	; (80082bc <__ieee754_pow+0x75c>)
 8007f6a:	f7f8 fb4d 	bl	8000608 <__aeabi_dmul>
 8007f6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007f72:	460c      	mov	r4, r1
 8007f74:	1523      	asrs	r3, r4, #20
 8007f76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007f7a:	4413      	add	r3, r2
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	4bd0      	ldr	r3, [pc, #832]	; (80082c0 <__ieee754_pow+0x760>)
 8007f80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007f84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f8e:	dd08      	ble.n	8007fa2 <__ieee754_pow+0x442>
 8007f90:	4bcc      	ldr	r3, [pc, #816]	; (80082c4 <__ieee754_pow+0x764>)
 8007f92:	429c      	cmp	r4, r3
 8007f94:	f340 8162 	ble.w	800825c <__ieee754_pow+0x6fc>
 8007f98:	9b05      	ldr	r3, [sp, #20]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	9305      	str	r3, [sp, #20]
 8007f9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007fa2:	2400      	movs	r4, #0
 8007fa4:	00e3      	lsls	r3, r4, #3
 8007fa6:	9307      	str	r3, [sp, #28]
 8007fa8:	4bc7      	ldr	r3, [pc, #796]	; (80082c8 <__ieee754_pow+0x768>)
 8007faa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fae:	ed93 7b00 	vldr	d7, [r3]
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	ec53 2b17 	vmov	r2, r3, d7
 8007fb8:	eeb0 9a47 	vmov.f32	s18, s14
 8007fbc:	eef0 9a67 	vmov.f32	s19, s15
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	f7f8 f969 	bl	8000298 <__aeabi_dsub>
 8007fc6:	4652      	mov	r2, sl
 8007fc8:	4606      	mov	r6, r0
 8007fca:	460f      	mov	r7, r1
 8007fcc:	462b      	mov	r3, r5
 8007fce:	ec51 0b19 	vmov	r0, r1, d9
 8007fd2:	f7f8 f963 	bl	800029c <__adddf3>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	2000      	movs	r0, #0
 8007fdc:	49bb      	ldr	r1, [pc, #748]	; (80082cc <__ieee754_pow+0x76c>)
 8007fde:	f7f8 fc3d 	bl	800085c <__aeabi_ddiv>
 8007fe2:	ec41 0b1a 	vmov	d10, r0, r1
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4630      	mov	r0, r6
 8007fec:	4639      	mov	r1, r7
 8007fee:	f7f8 fb0b 	bl	8000608 <__aeabi_dmul>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ff8:	9302      	str	r3, [sp, #8]
 8007ffa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007ffe:	46ab      	mov	fp, r5
 8008000:	106d      	asrs	r5, r5, #1
 8008002:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008006:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800800a:	ec41 0b18 	vmov	d8, r0, r1
 800800e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008012:	2200      	movs	r2, #0
 8008014:	4640      	mov	r0, r8
 8008016:	4649      	mov	r1, r9
 8008018:	4614      	mov	r4, r2
 800801a:	461d      	mov	r5, r3
 800801c:	f7f8 faf4 	bl	8000608 <__aeabi_dmul>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4630      	mov	r0, r6
 8008026:	4639      	mov	r1, r7
 8008028:	f7f8 f936 	bl	8000298 <__aeabi_dsub>
 800802c:	ec53 2b19 	vmov	r2, r3, d9
 8008030:	4606      	mov	r6, r0
 8008032:	460f      	mov	r7, r1
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 f92e 	bl	8000298 <__aeabi_dsub>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4650      	mov	r0, sl
 8008042:	4659      	mov	r1, fp
 8008044:	f7f8 f928 	bl	8000298 <__aeabi_dsub>
 8008048:	4642      	mov	r2, r8
 800804a:	464b      	mov	r3, r9
 800804c:	f7f8 fadc 	bl	8000608 <__aeabi_dmul>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	f7f8 f91e 	bl	8000298 <__aeabi_dsub>
 800805c:	ec53 2b1a 	vmov	r2, r3, d10
 8008060:	f7f8 fad2 	bl	8000608 <__aeabi_dmul>
 8008064:	ec53 2b18 	vmov	r2, r3, d8
 8008068:	ec41 0b19 	vmov	d9, r0, r1
 800806c:	ec51 0b18 	vmov	r0, r1, d8
 8008070:	f7f8 faca 	bl	8000608 <__aeabi_dmul>
 8008074:	a37c      	add	r3, pc, #496	; (adr r3, 8008268 <__ieee754_pow+0x708>)
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	4604      	mov	r4, r0
 800807c:	460d      	mov	r5, r1
 800807e:	f7f8 fac3 	bl	8000608 <__aeabi_dmul>
 8008082:	a37b      	add	r3, pc, #492	; (adr r3, 8008270 <__ieee754_pow+0x710>)
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f7f8 f908 	bl	800029c <__adddf3>
 800808c:	4622      	mov	r2, r4
 800808e:	462b      	mov	r3, r5
 8008090:	f7f8 faba 	bl	8000608 <__aeabi_dmul>
 8008094:	a378      	add	r3, pc, #480	; (adr r3, 8008278 <__ieee754_pow+0x718>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 f8ff 	bl	800029c <__adddf3>
 800809e:	4622      	mov	r2, r4
 80080a0:	462b      	mov	r3, r5
 80080a2:	f7f8 fab1 	bl	8000608 <__aeabi_dmul>
 80080a6:	a376      	add	r3, pc, #472	; (adr r3, 8008280 <__ieee754_pow+0x720>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 f8f6 	bl	800029c <__adddf3>
 80080b0:	4622      	mov	r2, r4
 80080b2:	462b      	mov	r3, r5
 80080b4:	f7f8 faa8 	bl	8000608 <__aeabi_dmul>
 80080b8:	a373      	add	r3, pc, #460	; (adr r3, 8008288 <__ieee754_pow+0x728>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 f8ed 	bl	800029c <__adddf3>
 80080c2:	4622      	mov	r2, r4
 80080c4:	462b      	mov	r3, r5
 80080c6:	f7f8 fa9f 	bl	8000608 <__aeabi_dmul>
 80080ca:	a371      	add	r3, pc, #452	; (adr r3, 8008290 <__ieee754_pow+0x730>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 f8e4 	bl	800029c <__adddf3>
 80080d4:	4622      	mov	r2, r4
 80080d6:	4606      	mov	r6, r0
 80080d8:	460f      	mov	r7, r1
 80080da:	462b      	mov	r3, r5
 80080dc:	4620      	mov	r0, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	f7f8 fa92 	bl	8000608 <__aeabi_dmul>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 fa8c 	bl	8000608 <__aeabi_dmul>
 80080f0:	4642      	mov	r2, r8
 80080f2:	4604      	mov	r4, r0
 80080f4:	460d      	mov	r5, r1
 80080f6:	464b      	mov	r3, r9
 80080f8:	ec51 0b18 	vmov	r0, r1, d8
 80080fc:	f7f8 f8ce 	bl	800029c <__adddf3>
 8008100:	ec53 2b19 	vmov	r2, r3, d9
 8008104:	f7f8 fa80 	bl	8000608 <__aeabi_dmul>
 8008108:	4622      	mov	r2, r4
 800810a:	462b      	mov	r3, r5
 800810c:	f7f8 f8c6 	bl	800029c <__adddf3>
 8008110:	4642      	mov	r2, r8
 8008112:	4682      	mov	sl, r0
 8008114:	468b      	mov	fp, r1
 8008116:	464b      	mov	r3, r9
 8008118:	4640      	mov	r0, r8
 800811a:	4649      	mov	r1, r9
 800811c:	f7f8 fa74 	bl	8000608 <__aeabi_dmul>
 8008120:	4b6b      	ldr	r3, [pc, #428]	; (80082d0 <__ieee754_pow+0x770>)
 8008122:	2200      	movs	r2, #0
 8008124:	4606      	mov	r6, r0
 8008126:	460f      	mov	r7, r1
 8008128:	f7f8 f8b8 	bl	800029c <__adddf3>
 800812c:	4652      	mov	r2, sl
 800812e:	465b      	mov	r3, fp
 8008130:	f7f8 f8b4 	bl	800029c <__adddf3>
 8008134:	2000      	movs	r0, #0
 8008136:	4604      	mov	r4, r0
 8008138:	460d      	mov	r5, r1
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4640      	mov	r0, r8
 8008140:	4649      	mov	r1, r9
 8008142:	f7f8 fa61 	bl	8000608 <__aeabi_dmul>
 8008146:	4b62      	ldr	r3, [pc, #392]	; (80082d0 <__ieee754_pow+0x770>)
 8008148:	4680      	mov	r8, r0
 800814a:	4689      	mov	r9, r1
 800814c:	2200      	movs	r2, #0
 800814e:	4620      	mov	r0, r4
 8008150:	4629      	mov	r1, r5
 8008152:	f7f8 f8a1 	bl	8000298 <__aeabi_dsub>
 8008156:	4632      	mov	r2, r6
 8008158:	463b      	mov	r3, r7
 800815a:	f7f8 f89d 	bl	8000298 <__aeabi_dsub>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4650      	mov	r0, sl
 8008164:	4659      	mov	r1, fp
 8008166:	f7f8 f897 	bl	8000298 <__aeabi_dsub>
 800816a:	ec53 2b18 	vmov	r2, r3, d8
 800816e:	f7f8 fa4b 	bl	8000608 <__aeabi_dmul>
 8008172:	4622      	mov	r2, r4
 8008174:	4606      	mov	r6, r0
 8008176:	460f      	mov	r7, r1
 8008178:	462b      	mov	r3, r5
 800817a:	ec51 0b19 	vmov	r0, r1, d9
 800817e:	f7f8 fa43 	bl	8000608 <__aeabi_dmul>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7f8 f887 	bl	800029c <__adddf3>
 800818e:	4606      	mov	r6, r0
 8008190:	460f      	mov	r7, r1
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4640      	mov	r0, r8
 8008198:	4649      	mov	r1, r9
 800819a:	f7f8 f87f 	bl	800029c <__adddf3>
 800819e:	a33e      	add	r3, pc, #248	; (adr r3, 8008298 <__ieee754_pow+0x738>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	2000      	movs	r0, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	460d      	mov	r5, r1
 80081aa:	f7f8 fa2d 	bl	8000608 <__aeabi_dmul>
 80081ae:	4642      	mov	r2, r8
 80081b0:	ec41 0b18 	vmov	d8, r0, r1
 80081b4:	464b      	mov	r3, r9
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 f86d 	bl	8000298 <__aeabi_dsub>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4630      	mov	r0, r6
 80081c4:	4639      	mov	r1, r7
 80081c6:	f7f8 f867 	bl	8000298 <__aeabi_dsub>
 80081ca:	a335      	add	r3, pc, #212	; (adr r3, 80082a0 <__ieee754_pow+0x740>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 fa1a 	bl	8000608 <__aeabi_dmul>
 80081d4:	a334      	add	r3, pc, #208	; (adr r3, 80082a8 <__ieee754_pow+0x748>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	4606      	mov	r6, r0
 80081dc:	460f      	mov	r7, r1
 80081de:	4620      	mov	r0, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7f8 fa11 	bl	8000608 <__aeabi_dmul>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4630      	mov	r0, r6
 80081ec:	4639      	mov	r1, r7
 80081ee:	f7f8 f855 	bl	800029c <__adddf3>
 80081f2:	9a07      	ldr	r2, [sp, #28]
 80081f4:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <__ieee754_pow+0x774>)
 80081f6:	4413      	add	r3, r2
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f7f8 f84e 	bl	800029c <__adddf3>
 8008200:	4682      	mov	sl, r0
 8008202:	9805      	ldr	r0, [sp, #20]
 8008204:	468b      	mov	fp, r1
 8008206:	f7f8 f995 	bl	8000534 <__aeabi_i2d>
 800820a:	9a07      	ldr	r2, [sp, #28]
 800820c:	4b32      	ldr	r3, [pc, #200]	; (80082d8 <__ieee754_pow+0x778>)
 800820e:	4413      	add	r3, r2
 8008210:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008214:	4606      	mov	r6, r0
 8008216:	460f      	mov	r7, r1
 8008218:	4652      	mov	r2, sl
 800821a:	465b      	mov	r3, fp
 800821c:	ec51 0b18 	vmov	r0, r1, d8
 8008220:	f7f8 f83c 	bl	800029c <__adddf3>
 8008224:	4642      	mov	r2, r8
 8008226:	464b      	mov	r3, r9
 8008228:	f7f8 f838 	bl	800029c <__adddf3>
 800822c:	4632      	mov	r2, r6
 800822e:	463b      	mov	r3, r7
 8008230:	f7f8 f834 	bl	800029c <__adddf3>
 8008234:	2000      	movs	r0, #0
 8008236:	4632      	mov	r2, r6
 8008238:	463b      	mov	r3, r7
 800823a:	4604      	mov	r4, r0
 800823c:	460d      	mov	r5, r1
 800823e:	f7f8 f82b 	bl	8000298 <__aeabi_dsub>
 8008242:	4642      	mov	r2, r8
 8008244:	464b      	mov	r3, r9
 8008246:	f7f8 f827 	bl	8000298 <__aeabi_dsub>
 800824a:	ec53 2b18 	vmov	r2, r3, d8
 800824e:	f7f8 f823 	bl	8000298 <__aeabi_dsub>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4650      	mov	r0, sl
 8008258:	4659      	mov	r1, fp
 800825a:	e610      	b.n	8007e7e <__ieee754_pow+0x31e>
 800825c:	2401      	movs	r4, #1
 800825e:	e6a1      	b.n	8007fa4 <__ieee754_pow+0x444>
 8008260:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80082b0 <__ieee754_pow+0x750>
 8008264:	e617      	b.n	8007e96 <__ieee754_pow+0x336>
 8008266:	bf00      	nop
 8008268:	4a454eef 	.word	0x4a454eef
 800826c:	3fca7e28 	.word	0x3fca7e28
 8008270:	93c9db65 	.word	0x93c9db65
 8008274:	3fcd864a 	.word	0x3fcd864a
 8008278:	a91d4101 	.word	0xa91d4101
 800827c:	3fd17460 	.word	0x3fd17460
 8008280:	518f264d 	.word	0x518f264d
 8008284:	3fd55555 	.word	0x3fd55555
 8008288:	db6fabff 	.word	0xdb6fabff
 800828c:	3fdb6db6 	.word	0x3fdb6db6
 8008290:	33333303 	.word	0x33333303
 8008294:	3fe33333 	.word	0x3fe33333
 8008298:	e0000000 	.word	0xe0000000
 800829c:	3feec709 	.word	0x3feec709
 80082a0:	dc3a03fd 	.word	0xdc3a03fd
 80082a4:	3feec709 	.word	0x3feec709
 80082a8:	145b01f5 	.word	0x145b01f5
 80082ac:	be3e2fe0 	.word	0xbe3e2fe0
 80082b0:	00000000 	.word	0x00000000
 80082b4:	3ff00000 	.word	0x3ff00000
 80082b8:	7ff00000 	.word	0x7ff00000
 80082bc:	43400000 	.word	0x43400000
 80082c0:	0003988e 	.word	0x0003988e
 80082c4:	000bb679 	.word	0x000bb679
 80082c8:	08008dc8 	.word	0x08008dc8
 80082cc:	3ff00000 	.word	0x3ff00000
 80082d0:	40080000 	.word	0x40080000
 80082d4:	08008de8 	.word	0x08008de8
 80082d8:	08008dd8 	.word	0x08008dd8
 80082dc:	a3b5      	add	r3, pc, #724	; (adr r3, 80085b4 <__ieee754_pow+0xa54>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	4640      	mov	r0, r8
 80082e4:	4649      	mov	r1, r9
 80082e6:	f7f7 ffd9 	bl	800029c <__adddf3>
 80082ea:	4622      	mov	r2, r4
 80082ec:	ec41 0b1a 	vmov	d10, r0, r1
 80082f0:	462b      	mov	r3, r5
 80082f2:	4630      	mov	r0, r6
 80082f4:	4639      	mov	r1, r7
 80082f6:	f7f7 ffcf 	bl	8000298 <__aeabi_dsub>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	ec51 0b1a 	vmov	r0, r1, d10
 8008302:	f7f8 fc11 	bl	8000b28 <__aeabi_dcmpgt>
 8008306:	2800      	cmp	r0, #0
 8008308:	f47f ae04 	bne.w	8007f14 <__ieee754_pow+0x3b4>
 800830c:	4aa4      	ldr	r2, [pc, #656]	; (80085a0 <__ieee754_pow+0xa40>)
 800830e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008312:	4293      	cmp	r3, r2
 8008314:	f340 8108 	ble.w	8008528 <__ieee754_pow+0x9c8>
 8008318:	151b      	asrs	r3, r3, #20
 800831a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800831e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008322:	fa4a f303 	asr.w	r3, sl, r3
 8008326:	445b      	add	r3, fp
 8008328:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800832c:	4e9d      	ldr	r6, [pc, #628]	; (80085a4 <__ieee754_pow+0xa44>)
 800832e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008332:	4116      	asrs	r6, r2
 8008334:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008338:	2000      	movs	r0, #0
 800833a:	ea23 0106 	bic.w	r1, r3, r6
 800833e:	f1c2 0214 	rsb	r2, r2, #20
 8008342:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008346:	fa4a fa02 	asr.w	sl, sl, r2
 800834a:	f1bb 0f00 	cmp.w	fp, #0
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4620      	mov	r0, r4
 8008354:	4629      	mov	r1, r5
 8008356:	bfb8      	it	lt
 8008358:	f1ca 0a00 	rsblt	sl, sl, #0
 800835c:	f7f7 ff9c 	bl	8000298 <__aeabi_dsub>
 8008360:	ec41 0b19 	vmov	d9, r0, r1
 8008364:	4642      	mov	r2, r8
 8008366:	464b      	mov	r3, r9
 8008368:	ec51 0b19 	vmov	r0, r1, d9
 800836c:	f7f7 ff96 	bl	800029c <__adddf3>
 8008370:	a37b      	add	r3, pc, #492	; (adr r3, 8008560 <__ieee754_pow+0xa00>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	2000      	movs	r0, #0
 8008378:	4604      	mov	r4, r0
 800837a:	460d      	mov	r5, r1
 800837c:	f7f8 f944 	bl	8000608 <__aeabi_dmul>
 8008380:	ec53 2b19 	vmov	r2, r3, d9
 8008384:	4606      	mov	r6, r0
 8008386:	460f      	mov	r7, r1
 8008388:	4620      	mov	r0, r4
 800838a:	4629      	mov	r1, r5
 800838c:	f7f7 ff84 	bl	8000298 <__aeabi_dsub>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4640      	mov	r0, r8
 8008396:	4649      	mov	r1, r9
 8008398:	f7f7 ff7e 	bl	8000298 <__aeabi_dsub>
 800839c:	a372      	add	r3, pc, #456	; (adr r3, 8008568 <__ieee754_pow+0xa08>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	f7f8 f931 	bl	8000608 <__aeabi_dmul>
 80083a6:	a372      	add	r3, pc, #456	; (adr r3, 8008570 <__ieee754_pow+0xa10>)
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	4620      	mov	r0, r4
 80083b2:	4629      	mov	r1, r5
 80083b4:	f7f8 f928 	bl	8000608 <__aeabi_dmul>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4640      	mov	r0, r8
 80083be:	4649      	mov	r1, r9
 80083c0:	f7f7 ff6c 	bl	800029c <__adddf3>
 80083c4:	4604      	mov	r4, r0
 80083c6:	460d      	mov	r5, r1
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4630      	mov	r0, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	f7f7 ff64 	bl	800029c <__adddf3>
 80083d4:	4632      	mov	r2, r6
 80083d6:	463b      	mov	r3, r7
 80083d8:	4680      	mov	r8, r0
 80083da:	4689      	mov	r9, r1
 80083dc:	f7f7 ff5c 	bl	8000298 <__aeabi_dsub>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4620      	mov	r0, r4
 80083e6:	4629      	mov	r1, r5
 80083e8:	f7f7 ff56 	bl	8000298 <__aeabi_dsub>
 80083ec:	4642      	mov	r2, r8
 80083ee:	4606      	mov	r6, r0
 80083f0:	460f      	mov	r7, r1
 80083f2:	464b      	mov	r3, r9
 80083f4:	4640      	mov	r0, r8
 80083f6:	4649      	mov	r1, r9
 80083f8:	f7f8 f906 	bl	8000608 <__aeabi_dmul>
 80083fc:	a35e      	add	r3, pc, #376	; (adr r3, 8008578 <__ieee754_pow+0xa18>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	4604      	mov	r4, r0
 8008404:	460d      	mov	r5, r1
 8008406:	f7f8 f8ff 	bl	8000608 <__aeabi_dmul>
 800840a:	a35d      	add	r3, pc, #372	; (adr r3, 8008580 <__ieee754_pow+0xa20>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f7 ff42 	bl	8000298 <__aeabi_dsub>
 8008414:	4622      	mov	r2, r4
 8008416:	462b      	mov	r3, r5
 8008418:	f7f8 f8f6 	bl	8000608 <__aeabi_dmul>
 800841c:	a35a      	add	r3, pc, #360	; (adr r3, 8008588 <__ieee754_pow+0xa28>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f7 ff3b 	bl	800029c <__adddf3>
 8008426:	4622      	mov	r2, r4
 8008428:	462b      	mov	r3, r5
 800842a:	f7f8 f8ed 	bl	8000608 <__aeabi_dmul>
 800842e:	a358      	add	r3, pc, #352	; (adr r3, 8008590 <__ieee754_pow+0xa30>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f7f7 ff30 	bl	8000298 <__aeabi_dsub>
 8008438:	4622      	mov	r2, r4
 800843a:	462b      	mov	r3, r5
 800843c:	f7f8 f8e4 	bl	8000608 <__aeabi_dmul>
 8008440:	a355      	add	r3, pc, #340	; (adr r3, 8008598 <__ieee754_pow+0xa38>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f7f7 ff29 	bl	800029c <__adddf3>
 800844a:	4622      	mov	r2, r4
 800844c:	462b      	mov	r3, r5
 800844e:	f7f8 f8db 	bl	8000608 <__aeabi_dmul>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4640      	mov	r0, r8
 8008458:	4649      	mov	r1, r9
 800845a:	f7f7 ff1d 	bl	8000298 <__aeabi_dsub>
 800845e:	4604      	mov	r4, r0
 8008460:	460d      	mov	r5, r1
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4640      	mov	r0, r8
 8008468:	4649      	mov	r1, r9
 800846a:	f7f8 f8cd 	bl	8000608 <__aeabi_dmul>
 800846e:	2200      	movs	r2, #0
 8008470:	ec41 0b19 	vmov	d9, r0, r1
 8008474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f7 ff0c 	bl	8000298 <__aeabi_dsub>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	ec51 0b19 	vmov	r0, r1, d9
 8008488:	f7f8 f9e8 	bl	800085c <__aeabi_ddiv>
 800848c:	4632      	mov	r2, r6
 800848e:	4604      	mov	r4, r0
 8008490:	460d      	mov	r5, r1
 8008492:	463b      	mov	r3, r7
 8008494:	4640      	mov	r0, r8
 8008496:	4649      	mov	r1, r9
 8008498:	f7f8 f8b6 	bl	8000608 <__aeabi_dmul>
 800849c:	4632      	mov	r2, r6
 800849e:	463b      	mov	r3, r7
 80084a0:	f7f7 fefc 	bl	800029c <__adddf3>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4620      	mov	r0, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	f7f7 fef4 	bl	8000298 <__aeabi_dsub>
 80084b0:	4642      	mov	r2, r8
 80084b2:	464b      	mov	r3, r9
 80084b4:	f7f7 fef0 	bl	8000298 <__aeabi_dsub>
 80084b8:	460b      	mov	r3, r1
 80084ba:	4602      	mov	r2, r0
 80084bc:	493a      	ldr	r1, [pc, #232]	; (80085a8 <__ieee754_pow+0xa48>)
 80084be:	2000      	movs	r0, #0
 80084c0:	f7f7 feea 	bl	8000298 <__aeabi_dsub>
 80084c4:	ec41 0b10 	vmov	d0, r0, r1
 80084c8:	ee10 3a90 	vmov	r3, s1
 80084cc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80084d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084d4:	da2b      	bge.n	800852e <__ieee754_pow+0x9ce>
 80084d6:	4650      	mov	r0, sl
 80084d8:	f000 f966 	bl	80087a8 <scalbn>
 80084dc:	ec51 0b10 	vmov	r0, r1, d0
 80084e0:	ec53 2b18 	vmov	r2, r3, d8
 80084e4:	f7ff bbed 	b.w	8007cc2 <__ieee754_pow+0x162>
 80084e8:	4b30      	ldr	r3, [pc, #192]	; (80085ac <__ieee754_pow+0xa4c>)
 80084ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80084ee:	429e      	cmp	r6, r3
 80084f0:	f77f af0c 	ble.w	800830c <__ieee754_pow+0x7ac>
 80084f4:	4b2e      	ldr	r3, [pc, #184]	; (80085b0 <__ieee754_pow+0xa50>)
 80084f6:	440b      	add	r3, r1
 80084f8:	4303      	orrs	r3, r0
 80084fa:	d009      	beq.n	8008510 <__ieee754_pow+0x9b0>
 80084fc:	ec51 0b18 	vmov	r0, r1, d8
 8008500:	2200      	movs	r2, #0
 8008502:	2300      	movs	r3, #0
 8008504:	f7f8 faf2 	bl	8000aec <__aeabi_dcmplt>
 8008508:	3800      	subs	r0, #0
 800850a:	bf18      	it	ne
 800850c:	2001      	movne	r0, #1
 800850e:	e447      	b.n	8007da0 <__ieee754_pow+0x240>
 8008510:	4622      	mov	r2, r4
 8008512:	462b      	mov	r3, r5
 8008514:	f7f7 fec0 	bl	8000298 <__aeabi_dsub>
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	f7f8 fafa 	bl	8000b14 <__aeabi_dcmpge>
 8008520:	2800      	cmp	r0, #0
 8008522:	f43f aef3 	beq.w	800830c <__ieee754_pow+0x7ac>
 8008526:	e7e9      	b.n	80084fc <__ieee754_pow+0x99c>
 8008528:	f04f 0a00 	mov.w	sl, #0
 800852c:	e71a      	b.n	8008364 <__ieee754_pow+0x804>
 800852e:	ec51 0b10 	vmov	r0, r1, d0
 8008532:	4619      	mov	r1, r3
 8008534:	e7d4      	b.n	80084e0 <__ieee754_pow+0x980>
 8008536:	491c      	ldr	r1, [pc, #112]	; (80085a8 <__ieee754_pow+0xa48>)
 8008538:	2000      	movs	r0, #0
 800853a:	f7ff bb30 	b.w	8007b9e <__ieee754_pow+0x3e>
 800853e:	2000      	movs	r0, #0
 8008540:	2100      	movs	r1, #0
 8008542:	f7ff bb2c 	b.w	8007b9e <__ieee754_pow+0x3e>
 8008546:	4630      	mov	r0, r6
 8008548:	4639      	mov	r1, r7
 800854a:	f7ff bb28 	b.w	8007b9e <__ieee754_pow+0x3e>
 800854e:	9204      	str	r2, [sp, #16]
 8008550:	f7ff bb7a 	b.w	8007c48 <__ieee754_pow+0xe8>
 8008554:	2300      	movs	r3, #0
 8008556:	f7ff bb64 	b.w	8007c22 <__ieee754_pow+0xc2>
 800855a:	bf00      	nop
 800855c:	f3af 8000 	nop.w
 8008560:	00000000 	.word	0x00000000
 8008564:	3fe62e43 	.word	0x3fe62e43
 8008568:	fefa39ef 	.word	0xfefa39ef
 800856c:	3fe62e42 	.word	0x3fe62e42
 8008570:	0ca86c39 	.word	0x0ca86c39
 8008574:	be205c61 	.word	0xbe205c61
 8008578:	72bea4d0 	.word	0x72bea4d0
 800857c:	3e663769 	.word	0x3e663769
 8008580:	c5d26bf1 	.word	0xc5d26bf1
 8008584:	3ebbbd41 	.word	0x3ebbbd41
 8008588:	af25de2c 	.word	0xaf25de2c
 800858c:	3f11566a 	.word	0x3f11566a
 8008590:	16bebd93 	.word	0x16bebd93
 8008594:	3f66c16c 	.word	0x3f66c16c
 8008598:	5555553e 	.word	0x5555553e
 800859c:	3fc55555 	.word	0x3fc55555
 80085a0:	3fe00000 	.word	0x3fe00000
 80085a4:	000fffff 	.word	0x000fffff
 80085a8:	3ff00000 	.word	0x3ff00000
 80085ac:	4090cbff 	.word	0x4090cbff
 80085b0:	3f6f3400 	.word	0x3f6f3400
 80085b4:	652b82fe 	.word	0x652b82fe
 80085b8:	3c971547 	.word	0x3c971547

080085bc <__ieee754_sqrt>:
 80085bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c0:	ec55 4b10 	vmov	r4, r5, d0
 80085c4:	4e55      	ldr	r6, [pc, #340]	; (800871c <__ieee754_sqrt+0x160>)
 80085c6:	43ae      	bics	r6, r5
 80085c8:	ee10 0a10 	vmov	r0, s0
 80085cc:	ee10 3a10 	vmov	r3, s0
 80085d0:	462a      	mov	r2, r5
 80085d2:	4629      	mov	r1, r5
 80085d4:	d110      	bne.n	80085f8 <__ieee754_sqrt+0x3c>
 80085d6:	ee10 2a10 	vmov	r2, s0
 80085da:	462b      	mov	r3, r5
 80085dc:	f7f8 f814 	bl	8000608 <__aeabi_dmul>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4620      	mov	r0, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f7 fe58 	bl	800029c <__adddf3>
 80085ec:	4604      	mov	r4, r0
 80085ee:	460d      	mov	r5, r1
 80085f0:	ec45 4b10 	vmov	d0, r4, r5
 80085f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	dc10      	bgt.n	800861e <__ieee754_sqrt+0x62>
 80085fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008600:	4330      	orrs	r0, r6
 8008602:	d0f5      	beq.n	80085f0 <__ieee754_sqrt+0x34>
 8008604:	b15d      	cbz	r5, 800861e <__ieee754_sqrt+0x62>
 8008606:	ee10 2a10 	vmov	r2, s0
 800860a:	462b      	mov	r3, r5
 800860c:	ee10 0a10 	vmov	r0, s0
 8008610:	f7f7 fe42 	bl	8000298 <__aeabi_dsub>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	f7f8 f920 	bl	800085c <__aeabi_ddiv>
 800861c:	e7e6      	b.n	80085ec <__ieee754_sqrt+0x30>
 800861e:	1512      	asrs	r2, r2, #20
 8008620:	d074      	beq.n	800870c <__ieee754_sqrt+0x150>
 8008622:	07d4      	lsls	r4, r2, #31
 8008624:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008628:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800862c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008630:	bf5e      	ittt	pl
 8008632:	0fda      	lsrpl	r2, r3, #31
 8008634:	005b      	lslpl	r3, r3, #1
 8008636:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800863a:	2400      	movs	r4, #0
 800863c:	0fda      	lsrs	r2, r3, #31
 800863e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008642:	107f      	asrs	r7, r7, #1
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	2516      	movs	r5, #22
 8008648:	4620      	mov	r0, r4
 800864a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800864e:	1886      	adds	r6, r0, r2
 8008650:	428e      	cmp	r6, r1
 8008652:	bfde      	ittt	le
 8008654:	1b89      	suble	r1, r1, r6
 8008656:	18b0      	addle	r0, r6, r2
 8008658:	18a4      	addle	r4, r4, r2
 800865a:	0049      	lsls	r1, r1, #1
 800865c:	3d01      	subs	r5, #1
 800865e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008662:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008666:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800866a:	d1f0      	bne.n	800864e <__ieee754_sqrt+0x92>
 800866c:	462a      	mov	r2, r5
 800866e:	f04f 0e20 	mov.w	lr, #32
 8008672:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008676:	4281      	cmp	r1, r0
 8008678:	eb06 0c05 	add.w	ip, r6, r5
 800867c:	dc02      	bgt.n	8008684 <__ieee754_sqrt+0xc8>
 800867e:	d113      	bne.n	80086a8 <__ieee754_sqrt+0xec>
 8008680:	459c      	cmp	ip, r3
 8008682:	d811      	bhi.n	80086a8 <__ieee754_sqrt+0xec>
 8008684:	f1bc 0f00 	cmp.w	ip, #0
 8008688:	eb0c 0506 	add.w	r5, ip, r6
 800868c:	da43      	bge.n	8008716 <__ieee754_sqrt+0x15a>
 800868e:	2d00      	cmp	r5, #0
 8008690:	db41      	blt.n	8008716 <__ieee754_sqrt+0x15a>
 8008692:	f100 0801 	add.w	r8, r0, #1
 8008696:	1a09      	subs	r1, r1, r0
 8008698:	459c      	cmp	ip, r3
 800869a:	bf88      	it	hi
 800869c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80086a0:	eba3 030c 	sub.w	r3, r3, ip
 80086a4:	4432      	add	r2, r6
 80086a6:	4640      	mov	r0, r8
 80086a8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80086ac:	f1be 0e01 	subs.w	lr, lr, #1
 80086b0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80086b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80086b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80086bc:	d1db      	bne.n	8008676 <__ieee754_sqrt+0xba>
 80086be:	430b      	orrs	r3, r1
 80086c0:	d006      	beq.n	80086d0 <__ieee754_sqrt+0x114>
 80086c2:	1c50      	adds	r0, r2, #1
 80086c4:	bf13      	iteet	ne
 80086c6:	3201      	addne	r2, #1
 80086c8:	3401      	addeq	r4, #1
 80086ca:	4672      	moveq	r2, lr
 80086cc:	f022 0201 	bicne.w	r2, r2, #1
 80086d0:	1063      	asrs	r3, r4, #1
 80086d2:	0852      	lsrs	r2, r2, #1
 80086d4:	07e1      	lsls	r1, r4, #31
 80086d6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80086da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80086de:	bf48      	it	mi
 80086e0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80086e4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80086e8:	4614      	mov	r4, r2
 80086ea:	e781      	b.n	80085f0 <__ieee754_sqrt+0x34>
 80086ec:	0ad9      	lsrs	r1, r3, #11
 80086ee:	3815      	subs	r0, #21
 80086f0:	055b      	lsls	r3, r3, #21
 80086f2:	2900      	cmp	r1, #0
 80086f4:	d0fa      	beq.n	80086ec <__ieee754_sqrt+0x130>
 80086f6:	02cd      	lsls	r5, r1, #11
 80086f8:	d50a      	bpl.n	8008710 <__ieee754_sqrt+0x154>
 80086fa:	f1c2 0420 	rsb	r4, r2, #32
 80086fe:	fa23 f404 	lsr.w	r4, r3, r4
 8008702:	1e55      	subs	r5, r2, #1
 8008704:	4093      	lsls	r3, r2
 8008706:	4321      	orrs	r1, r4
 8008708:	1b42      	subs	r2, r0, r5
 800870a:	e78a      	b.n	8008622 <__ieee754_sqrt+0x66>
 800870c:	4610      	mov	r0, r2
 800870e:	e7f0      	b.n	80086f2 <__ieee754_sqrt+0x136>
 8008710:	0049      	lsls	r1, r1, #1
 8008712:	3201      	adds	r2, #1
 8008714:	e7ef      	b.n	80086f6 <__ieee754_sqrt+0x13a>
 8008716:	4680      	mov	r8, r0
 8008718:	e7bd      	b.n	8008696 <__ieee754_sqrt+0xda>
 800871a:	bf00      	nop
 800871c:	7ff00000 	.word	0x7ff00000

08008720 <with_errno>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	4604      	mov	r4, r0
 8008724:	460d      	mov	r5, r1
 8008726:	4616      	mov	r6, r2
 8008728:	f7fc fa54 	bl	8004bd4 <__errno>
 800872c:	4629      	mov	r1, r5
 800872e:	6006      	str	r6, [r0, #0]
 8008730:	4620      	mov	r0, r4
 8008732:	bd70      	pop	{r4, r5, r6, pc}

08008734 <xflow>:
 8008734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008736:	4614      	mov	r4, r2
 8008738:	461d      	mov	r5, r3
 800873a:	b108      	cbz	r0, 8008740 <xflow+0xc>
 800873c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008740:	e9cd 2300 	strd	r2, r3, [sp]
 8008744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008748:	4620      	mov	r0, r4
 800874a:	4629      	mov	r1, r5
 800874c:	f7f7 ff5c 	bl	8000608 <__aeabi_dmul>
 8008750:	2222      	movs	r2, #34	; 0x22
 8008752:	b003      	add	sp, #12
 8008754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008758:	f7ff bfe2 	b.w	8008720 <with_errno>

0800875c <__math_uflow>:
 800875c:	b508      	push	{r3, lr}
 800875e:	2200      	movs	r2, #0
 8008760:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008764:	f7ff ffe6 	bl	8008734 <xflow>
 8008768:	ec41 0b10 	vmov	d0, r0, r1
 800876c:	bd08      	pop	{r3, pc}

0800876e <__math_oflow>:
 800876e:	b508      	push	{r3, lr}
 8008770:	2200      	movs	r2, #0
 8008772:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008776:	f7ff ffdd 	bl	8008734 <xflow>
 800877a:	ec41 0b10 	vmov	d0, r0, r1
 800877e:	bd08      	pop	{r3, pc}

08008780 <fabs>:
 8008780:	ec51 0b10 	vmov	r0, r1, d0
 8008784:	ee10 2a10 	vmov	r2, s0
 8008788:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800878c:	ec43 2b10 	vmov	d0, r2, r3
 8008790:	4770      	bx	lr

08008792 <finite>:
 8008792:	b082      	sub	sp, #8
 8008794:	ed8d 0b00 	vstr	d0, [sp]
 8008798:	9801      	ldr	r0, [sp, #4]
 800879a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800879e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80087a2:	0fc0      	lsrs	r0, r0, #31
 80087a4:	b002      	add	sp, #8
 80087a6:	4770      	bx	lr

080087a8 <scalbn>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	ec55 4b10 	vmov	r4, r5, d0
 80087ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80087b2:	4606      	mov	r6, r0
 80087b4:	462b      	mov	r3, r5
 80087b6:	b99a      	cbnz	r2, 80087e0 <scalbn+0x38>
 80087b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80087bc:	4323      	orrs	r3, r4
 80087be:	d036      	beq.n	800882e <scalbn+0x86>
 80087c0:	4b39      	ldr	r3, [pc, #228]	; (80088a8 <scalbn+0x100>)
 80087c2:	4629      	mov	r1, r5
 80087c4:	ee10 0a10 	vmov	r0, s0
 80087c8:	2200      	movs	r2, #0
 80087ca:	f7f7 ff1d 	bl	8000608 <__aeabi_dmul>
 80087ce:	4b37      	ldr	r3, [pc, #220]	; (80088ac <scalbn+0x104>)
 80087d0:	429e      	cmp	r6, r3
 80087d2:	4604      	mov	r4, r0
 80087d4:	460d      	mov	r5, r1
 80087d6:	da10      	bge.n	80087fa <scalbn+0x52>
 80087d8:	a32b      	add	r3, pc, #172	; (adr r3, 8008888 <scalbn+0xe0>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	e03a      	b.n	8008856 <scalbn+0xae>
 80087e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80087e4:	428a      	cmp	r2, r1
 80087e6:	d10c      	bne.n	8008802 <scalbn+0x5a>
 80087e8:	ee10 2a10 	vmov	r2, s0
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f7f7 fd54 	bl	800029c <__adddf3>
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	e019      	b.n	800882e <scalbn+0x86>
 80087fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80087fe:	460b      	mov	r3, r1
 8008800:	3a36      	subs	r2, #54	; 0x36
 8008802:	4432      	add	r2, r6
 8008804:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008808:	428a      	cmp	r2, r1
 800880a:	dd08      	ble.n	800881e <scalbn+0x76>
 800880c:	2d00      	cmp	r5, #0
 800880e:	a120      	add	r1, pc, #128	; (adr r1, 8008890 <scalbn+0xe8>)
 8008810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008814:	da1c      	bge.n	8008850 <scalbn+0xa8>
 8008816:	a120      	add	r1, pc, #128	; (adr r1, 8008898 <scalbn+0xf0>)
 8008818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800881c:	e018      	b.n	8008850 <scalbn+0xa8>
 800881e:	2a00      	cmp	r2, #0
 8008820:	dd08      	ble.n	8008834 <scalbn+0x8c>
 8008822:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008826:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800882a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800882e:	ec45 4b10 	vmov	d0, r4, r5
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008838:	da19      	bge.n	800886e <scalbn+0xc6>
 800883a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800883e:	429e      	cmp	r6, r3
 8008840:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008844:	dd0a      	ble.n	800885c <scalbn+0xb4>
 8008846:	a112      	add	r1, pc, #72	; (adr r1, 8008890 <scalbn+0xe8>)
 8008848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e2      	bne.n	8008816 <scalbn+0x6e>
 8008850:	a30f      	add	r3, pc, #60	; (adr r3, 8008890 <scalbn+0xe8>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f7f7 fed7 	bl	8000608 <__aeabi_dmul>
 800885a:	e7cb      	b.n	80087f4 <scalbn+0x4c>
 800885c:	a10a      	add	r1, pc, #40	; (adr r1, 8008888 <scalbn+0xe0>)
 800885e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0b8      	beq.n	80087d8 <scalbn+0x30>
 8008866:	a10e      	add	r1, pc, #56	; (adr r1, 80088a0 <scalbn+0xf8>)
 8008868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800886c:	e7b4      	b.n	80087d8 <scalbn+0x30>
 800886e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008872:	3236      	adds	r2, #54	; 0x36
 8008874:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008878:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800887c:	4620      	mov	r0, r4
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <scalbn+0x108>)
 8008880:	2200      	movs	r2, #0
 8008882:	e7e8      	b.n	8008856 <scalbn+0xae>
 8008884:	f3af 8000 	nop.w
 8008888:	c2f8f359 	.word	0xc2f8f359
 800888c:	01a56e1f 	.word	0x01a56e1f
 8008890:	8800759c 	.word	0x8800759c
 8008894:	7e37e43c 	.word	0x7e37e43c
 8008898:	8800759c 	.word	0x8800759c
 800889c:	fe37e43c 	.word	0xfe37e43c
 80088a0:	c2f8f359 	.word	0xc2f8f359
 80088a4:	81a56e1f 	.word	0x81a56e1f
 80088a8:	43500000 	.word	0x43500000
 80088ac:	ffff3cb0 	.word	0xffff3cb0
 80088b0:	3c900000 	.word	0x3c900000

080088b4 <_init>:
 80088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b6:	bf00      	nop
 80088b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ba:	bc08      	pop	{r3}
 80088bc:	469e      	mov	lr, r3
 80088be:	4770      	bx	lr

080088c0 <_fini>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	bf00      	nop
 80088c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c6:	bc08      	pop	{r3}
 80088c8:	469e      	mov	lr, r3
 80088ca:	4770      	bx	lr
